webpackJsonp([1],{

/***/ 131:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n  * vue-router v2.7.0\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"[vue-router] \" + message);\n  }\n}\n\nfunction warn(condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn(\"[vue-router] \" + message);\n  }\n}\n\nfunction isError(err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1;\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render(_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children);\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h();\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (val && current !== vm || !val && current === vm) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children);\n  }\n};\n\nfunction resolveProps(route, config) {\n  switch (typeof config === 'undefined' ? 'undefined' : _typeof(config)) {\n    case 'undefined':\n      return;\n    case 'object':\n      return config;\n    case 'function':\n      return config(route);\n    case 'boolean':\n      return config ? route.params : undefined;\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, \"props in \\\"\" + route.path + \"\\\" is a \" + (typeof config === 'undefined' ? 'undefined' : _typeof(config)) + \", \" + \"expecting an object, function or boolean.\");\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function encodeReserveReplacer(c) {\n  return '%' + c.charCodeAt(0).toString(16);\n};\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function encode(str) {\n  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');\n};\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery(query, extraQuery, _parseQuery) {\n  if (extraQuery === void 0) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery;\n}\n\nfunction parseQuery(query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res;\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res;\n}\n\nfunction stringifyQuery(obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return '';\n    }\n\n    if (val === null) {\n      return encode(key);\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return;\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&');\n    }\n\n    return encode(key) + '=' + encode(val);\n  }).filter(function (x) {\n    return x.length > 0;\n  }).join('&') : null;\n  return res ? \"?\" + res : '';\n}\n\n/*  */\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute(record, location, redirectedFrom, router) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || record && record.name,\n    meta: record && record.meta || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route);\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch(record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res;\n}\n\nfunction getFullPath(ref, _stringifyQuery) {\n  var path = ref.path;\n  var query = ref.query;if (query === void 0) query = {};\n  var hash = ref.hash;if (hash === void 0) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash;\n}\n\nfunction isSameRoute(a, b) {\n  if (b === START) {\n    return a === b;\n  } else if (!b) {\n    return false;\n  } else if (a.path && b.path) {\n    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);\n  } else if (a.name && b.name) {\n    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);\n  } else {\n    return false;\n  }\n}\n\nfunction isObjectEqual(a, b) {\n  if (a === void 0) a = {};\n  if (b === void 0) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if ((typeof aVal === 'undefined' ? 'undefined' : _typeof(aVal)) === 'object' && (typeof bVal === 'undefined' ? 'undefined' : _typeof(bVal)) === 'object') {\n      return isObjectEqual(aVal, bVal);\n    }\n    return String(aVal) === String(bVal);\n  });\n}\n\nfunction isIncludedRoute(current, target) {\n  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);\n}\n\nfunction queryIncludes(current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render(h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;\n    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;\n    var compareTarget = location.path ? createRoute(null, location, null, router) : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);\n\n    var handler = function handler(e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) {\n        on[e] = handler;\n      });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default);\n  }\n};\n\nfunction guardEvent(e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {\n    return;\n  }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) {\n    return;\n  }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) {\n    return;\n  }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) {\n      return;\n    }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true;\n}\n\nfunction findAnchor(children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child;\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child;\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install(Vue) {\n  if (install.installed) {\n    return;\n  }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function isDef(v) {\n    return v !== undefined;\n  };\n\n  var registerInstance = function registerInstance(vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate() {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = this.$parent && this.$parent._routerRoot || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed() {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get() {\n      return this._routerRoot._router;\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get() {\n      return this._routerRoot._route;\n    }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath(relative, base, append) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative;\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative;\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/');\n}\n\nfunction parsePath(path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  };\n}\n\nfunction cleanPath(path) {\n  return path.replace(/\\/\\//g, '/');\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)',\n// Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n// \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n// \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n'([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse(str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue;\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens;\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty(str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk(str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (_typeof(tokens[i]) === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue;\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue;\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined');\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue;\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"');\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path;\n  };\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1');\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys(re, keys) {\n  re.keys = keys;\n  return re;\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags(options) {\n  return options.sensitive ? '' : 'i';\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp(path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys);\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp(path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys);\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp(path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options);\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp(tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */keys || options;\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys);\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp(path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */keys || options;\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */keys);\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);\n  }\n\n  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams(path, params, routeMsg) {\n  try {\n    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true });\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"missing param for \" + routeMsg + \": \" + e.message);\n    }\n    return '';\n  }\n}\n\n/*  */\n\nfunction createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  };\n}\n\nfunction addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(typeof route.component !== 'string', \"route config \\\"component\\\" for path: \" + String(path || name) + \" cannot be a \" + \"string id. Use an actual component instead.\");\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null ? {} : route.components ? route.props : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) {\n        return (/^\\/?$/.test(child.path)\n        );\n      })) {\n        warn(false, \"Named Route '\" + route.name + \"' has a default child route. \" + \"When navigating to this named route (:to=\\\"{name: '\" + route.name + \"'\\\"), \" + \"the default child route will not be rendered. Remove the name from \" + \"this route and use the name of the default child route for named \" + \"links instead.\");\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs ? cleanPath(matchAs + \"/\" + child.path) : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(false, \"Duplicate named routes definition: \" + \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + record.path + \"\\\" }\");\n    }\n  }\n}\n\nfunction compileRouteRegex(path, pathToRegexpOptions) {\n  var regex = index(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], \"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\");\n      keys[key.name] = true;\n    });\n  }\n  return regex;\n}\n\nfunction normalizePath(path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') {\n    return path;\n  }\n  if (parent == null) {\n    return path;\n  }\n  return cleanPath(parent.path + \"/\" + path);\n}\n\n/*  */\n\nfunction normalizeLocation(raw, current, append, router) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next;\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, \"path \" + current.path);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next;\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = current && current.path || '/';\n  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;\n\n  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  };\n}\n\nfunction assign(a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a;\n}\n\n/*  */\n\nfunction createMatcher(routes, router) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes(routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match(raw, currentRoute, redirectedFrom) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, \"Route with name '\" + name + \"' does not exist\");\n      }\n      if (!record) {\n        return _createRoute(null, location);\n      }\n      var paramNames = record.regex.keys.filter(function (key) {\n        return !key.optional;\n      }).map(function (key) {\n        return key.name;\n      });\n\n      if (_typeof(location.params) !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && _typeof(currentRoute.params) === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, \"named route \\\"\" + name + \"\\\"\");\n        return _createRoute(record, location, redirectedFrom);\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom);\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location);\n  }\n\n  function redirect(record, location) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || (typeof redirect === 'undefined' ? 'undefined' : _typeof(redirect)) !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, \"invalid redirect option: \" + JSON.stringify(redirect));\n      }\n      return _createRoute(null, location);\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, \"redirect failed: named route \\\"\" + name + \"\\\" not found.\");\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location);\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, \"redirect route with path \\\"\" + rawPath + \"\\\"\");\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location);\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, \"invalid redirect option: \" + JSON.stringify(redirect));\n      }\n      return _createRoute(null, location);\n    }\n  }\n\n  function alias(record, location, matchAs) {\n    var aliasedPath = fillParams(matchAs, location.params, \"aliased route with path \\\"\" + matchAs + \"\\\"\");\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location);\n    }\n    return _createRoute(null, location);\n  }\n\n  function _createRoute(record, location, redirectedFrom) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location);\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs);\n    }\n    return createRoute(record, location, redirectedFrom, router);\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  };\n}\n\nfunction matchRoute(regex, path, params) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false;\n  } else if (!params) {\n    return true;\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true;\n}\n\nfunction resolveRecordPath(path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true);\n}\n\n/*  */\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll() {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll(router, to, from, isPop) {\n  if (!router.app) {\n    return;\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return;\n    }\n    var isObject = (typeof shouldScroll === 'undefined' ? 'undefined' : _typeof(shouldScroll)) === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};\n        offset = normalizeOffset(offset);\n        position = getElementPosition(el, offset);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition() {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition() {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key];\n  }\n}\n\nfunction getElementPosition(el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  };\n}\n\nfunction isValidPosition(obj) {\n  return isNumber(obj.x) || isNumber(obj.y);\n}\n\nfunction normalizePosition(obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  };\n}\n\nfunction normalizeOffset(obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  };\n}\n\nfunction isNumber(v) {\n  return typeof v === 'number';\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && function () {\n  var ua = window.navigator.userAgent;\n\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n\n  return window.history && 'pushState' in window.history;\n}();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;\n\nvar _key = genKey();\n\nfunction genKey() {\n  return Time.now().toFixed(3);\n}\n\nfunction getStateKey() {\n  return _key;\n}\n\nfunction setStateKey(key) {\n  _key = key;\n}\n\nfunction pushState(url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState(url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue(queue, fn, cb) {\n  var step = function step(index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents(matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (resolvedDef.__esModule && resolvedDef.default) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason) ? reason : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) {\n      next();\n    }\n  };\n}\n\nfunction flatMapComponents(matched, fn) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return fn(m.components[key], m.instances[key], m, key);\n    });\n  }));\n}\n\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once(fn) {\n  var called = false;\n  return function () {\n    var args = [],\n        len = arguments.length;\n    while (len--) {\n      args[len] = arguments[len];\n    }if (called) {\n      return;\n    }\n    called = true;\n    return fn.apply(this, args);\n  };\n}\n\n/*  */\n\nvar History = function History(router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen(cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady(cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError(errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {\n  var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) {\n        cb(route);\n      });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) {\n        cb(err);\n      });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {\n  var this$1 = this;\n\n  var current = this.current;\n  var abort = function abort(err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (isSameRoute(route, current) &&\n  // in the case the route map has been dynamically appended to\n  route.matched.length === current.matched.length) {\n    this.ensureURL();\n    return abort();\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n  var updated = ref.updated;\n  var deactivated = ref.deactivated;\n  var activated = ref.activated;\n\n  var queue = [].concat(\n  // in-component leave guards\n  extractLeaveGuards(deactivated),\n  // global before hooks\n  this.router.beforeHooks,\n  // in-component update hooks\n  extractUpdateHooks(updated),\n  // in-config enter guards\n  activated.map(function (m) {\n    return m.beforeEnter;\n  }),\n  // async components\n  resolveAsyncComponents(activated));\n\n  this.pending = route;\n  var iterator = function iterator(hook, next) {\n    if (this$1.pending !== route) {\n      return abort();\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (typeof to === 'string' || (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if ((typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function isValid() {\n      return this$1.current === route;\n    };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort();\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) {\n            cb();\n          });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute(route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase(base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = baseEl && baseEl.getAttribute('href') || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '');\n}\n\nfunction resolveQueue(current, next) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break;\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  };\n}\n\nfunction extractGuards(records, name, bind, reverse) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard) ? guard.map(function (guard) {\n        return bind(guard, instance, match, key);\n      }) : bind(guard, instance, match, key);\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards);\n}\n\nfunction extractGuard(def, key) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key];\n}\n\nfunction extractLeaveGuards(deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);\n}\n\nfunction extractUpdateHooks(updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);\n}\n\nfunction bindGuard(guard, instance) {\n  if (instance) {\n    return function boundRouteGuard() {\n      return guard.apply(instance, arguments);\n    };\n  }\n}\n\nfunction extractEnterGuards(activated, cbs, isValid) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid);\n  });\n}\n\nfunction bindEnterGuard(guard, match, key, cbs, isValid) {\n  return function routeEnterGuard(to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    });\n  };\n}\n\nfunction poll(cb, // somehow flow cannot infer this is a function\ninstances, key, isValid) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\nvar HTML5History = function (History$$1) {\n  function HTML5History(router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if (History$$1) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create(History$$1 && History$$1.prototype);\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go(n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push(location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL(push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {\n    return getLocation(this.base);\n  };\n\n  return HTML5History;\n}(History);\n\nfunction getLocation(base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash;\n}\n\n/*  */\n\nvar HashHistory = function (History$$1) {\n  function HashHistory(router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return;\n    }\n    ensureSlash();\n  }\n\n  if (History$$1) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create(History$$1 && History$$1.prototype);\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners() {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return;\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push(location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go(n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL(push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {\n    return getHash();\n  };\n\n  return HashHistory;\n}(History);\n\nfunction checkFallback(base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(cleanPath(base + '/#' + location));\n    return true;\n  }\n}\n\nfunction ensureSlash() {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true;\n  }\n  replaceHash('/' + path);\n  return false;\n}\n\nfunction getHash() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1);\n}\n\nfunction pushHash(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash(path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  window.location.replace(base + \"#\" + path);\n}\n\n/*  */\n\nvar AbstractHistory = function (History$$1) {\n  function AbstractHistory(router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if (History$$1) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create(History$$1 && History$$1.prototype);\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go(n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return;\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/';\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL() {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History);\n\n/*  */\n\nvar VueRouter = function VueRouter(options) {\n  if (options === void 0) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break;\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break;\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break;\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, \"invalid mode: \" + mode);\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match(raw, current, redirectedFrom) {\n  return this.matcher.match(raw, current, redirectedFrom);\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current;\n};\n\nVueRouter.prototype.init = function init(app /* Vue component instance */) {\n  var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(install.installed, \"not installed. Make sure to call `Vue.use(VueRouter)` \" + \"before creating root instance.\");\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return;\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function setupHashListener() {\n      history.setupListeners();\n    };\n    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach(fn) {\n  return registerHook(this.beforeHooks, fn);\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve(fn) {\n  return registerHook(this.resolveHooks, fn);\n};\n\nVueRouter.prototype.afterEach = function afterEach(fn) {\n  return registerHook(this.afterHooks, fn);\n};\n\nVueRouter.prototype.onReady = function onReady(cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError(errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push(location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace(location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go(n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back() {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward() {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {\n  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;\n  if (!route) {\n    return [];\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key];\n    });\n  }));\n};\n\nVueRouter.prototype.resolve = function resolve(to, current, append) {\n  var location = normalizeLocation(to, current || this.history.current, append, this);\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  };\n};\n\nVueRouter.prototype.addRoutes = function addRoutes(routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties(VueRouter.prototype, prototypeAccessors);\n\nfunction registerHook(list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) {\n      list.splice(i, 1);\n    }\n  };\n}\n\nfunction createHref(base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path;\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.7.0';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (VueRouter);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(66)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 132:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * vuex v2.3.0\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function applyMixin(Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    var usesInit = Vue.config._lifecycleHooks.indexOf('init') > -1;\n    Vue.mixin(usesInit ? { init: vuexInit } : { beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if (options === void 0) options = {};\n\n      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit() {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin(store) {\n  if (!devtoolHook) {\n    return;\n  }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n/**\n * forEach for object\n */\nfunction forEachValue(obj, fn) {\n  Object.keys(obj).forEach(function (key) {\n    return fn(obj[key], key);\n  });\n}\n\nfunction isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n}\n\nfunction isPromise(val) {\n  return val && typeof val.then === 'function';\n}\n\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error(\"[vuex] \" + msg);\n  }\n}\n\nvar Module = function Module(rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: {} };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced;\n};\n\nModule.prototype.addChild = function addChild(key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild(key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild(key) {\n  return this._children[key];\n};\n\nModule.prototype.update = function update(rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild(fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter(fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction(fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation(fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties(Module.prototype, prototypeAccessors$1);\n\nvar ModuleCollection = function ModuleCollection(rawRootModule) {\n  var this$1 = this;\n\n  // register root module (Vuex.Store options)\n  this.root = new Module(rawRootModule, false);\n\n  // register all nested modules\n  if (rawRootModule.modules) {\n    forEachValue(rawRootModule.modules, function (rawModule, key) {\n      this$1.register([key], rawModule, false);\n    });\n  }\n};\n\nModuleCollection.prototype.get = function get(path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key);\n  }, this.root);\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace(path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '');\n  }, '');\n};\n\nModuleCollection.prototype.update = function update$1(rawRootModule) {\n  update(this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register(path, rawModule, runtime) {\n  var this$1 = this;\n  if (runtime === void 0) runtime = true;\n\n  var parent = this.get(path.slice(0, -1));\n  var newModule = new Module(rawModule, runtime);\n  parent.addChild(path[path.length - 1], newModule);\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister(path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) {\n    return;\n  }\n\n  parent.removeChild(key);\n};\n\nfunction update(targetModule, newModule) {\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        console.warn(\"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" + 'manual reload is needed');\n        return;\n      }\n      update(targetModule.getChild(key), newModule.modules[key]);\n    }\n  }\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store(options) {\n  var this$1 = this;\n  if (options === void 0) options = {};\n\n  assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n  assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n\n  var state = options.state;if (state === void 0) state = {};\n  var plugins = options.plugins;if (plugins === void 0) plugins = [];\n  var strict = options.strict;if (strict === void 0) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch(type, payload) {\n    return dispatch.call(store, type, payload);\n  };\n  this.commit = function boundCommit(type, payload, options) {\n    return commit.call(store, type, payload, options);\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.concat(devtoolPlugin).forEach(function (plugin) {\n    return plugin(this$1);\n  });\n};\n\nvar prototypeAccessors = { state: {} };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state;\n};\n\nprototypeAccessors.state.set = function (v) {\n  assert(false, \"Use store.replaceState() to explicit replace store state.\");\n};\n\nStore.prototype.commit = function commit(_type, _payload, _options) {\n  var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n  var type = ref.type;\n  var payload = ref.payload;\n  var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    console.error(\"[vuex] unknown mutation type: \" + type);\n    return;\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator(handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) {\n    return sub(mutation, this$1.state);\n  });\n\n  if (options && options.silent) {\n    console.warn(\"[vuex] mutation type: \" + type + \". Silent option has been removed. \" + 'Use the filter functionality in the vue-devtools');\n  }\n};\n\nStore.prototype.dispatch = function dispatch(_type, _payload) {\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n  var type = ref.type;\n  var payload = ref.payload;\n\n  var entry = this._actions[type];\n  if (!entry) {\n    console.error(\"[vuex] unknown action type: \" + type);\n    return;\n  }\n  return entry.length > 1 ? Promise.all(entry.map(function (handler) {\n    return handler(payload);\n  })) : entry[0](payload);\n};\n\nStore.prototype.subscribe = function subscribe(fn) {\n  var subs = this._subscribers;\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  };\n};\n\nStore.prototype.watch = function watch(getter, cb, options) {\n  var this$1 = this;\n\n  assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  return this._watcherVM.$watch(function () {\n    return getter(this$1.state, this$1.getters);\n  }, cb, options);\n};\n\nStore.prototype.replaceState = function replaceState(state) {\n  var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule(path, rawModule) {\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path));\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule(path) {\n  var this$1 = this;\n\n  if (typeof path === 'string') {\n    path = [path];\n  }\n  assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate(newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit(fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties(Store.prototype, prototypeAccessors);\n\nfunction resetStore(store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM(store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () {\n      return fn(store);\n    };\n    Object.defineProperty(store.getters, key, {\n      get: function get() {\n        return store._vm[key];\n      },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () {\n      return oldVm.$destroy();\n    });\n  }\n}\n\nfunction installModule(store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var namespacedType = namespace + key;\n    registerAction(store, namespacedType, action, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext(store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._actions[type]) {\n          console.error(\"[vuex] unknown local action type: \" + args.type + \", global type: \" + type);\n          return;\n        }\n      }\n\n      return store.dispatch(type, payload);\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (!store._mutations[type]) {\n          console.error(\"[vuex] unknown local mutation type: \" + args.type + \", global type: \" + type);\n          return;\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace ? function () {\n        return store.getters;\n      } : function () {\n        return makeLocalGetters(store, namespace);\n      }\n    },\n    state: {\n      get: function get() {\n        return getNestedState(store.state, path);\n      }\n    }\n  });\n\n  return local;\n}\n\nfunction makeLocalGetters(store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) {\n      return;\n    }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function get() {\n        return store.getters[type];\n      },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy;\n}\n\nfunction registerMutation(store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler(payload) {\n    handler(local.state, payload);\n  });\n}\n\nfunction registerAction(store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler(payload, cb) {\n    var res = handler({\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err;\n      });\n    } else {\n      return res;\n    }\n  });\n}\n\nfunction registerGetter(store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    console.error(\"[vuex] duplicate getter key: \" + type);\n    return;\n  }\n  store._wrappedGetters[type] = function wrappedGetter(store) {\n    return rawGetter(local.state, // local state\n    local.getters, // local getters\n    store.state, // root state\n    store.getters // root getters\n    );\n  };\n}\n\nfunction enableStrictMode(store) {\n  store._vm.$watch(function () {\n    return this._data.$$state;\n  }, function () {\n    assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState(state, path) {\n  return path.length ? path.reduce(function (state, key) {\n    return state[key];\n  }, state) : state;\n}\n\nfunction unifyObjectStyle(type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  assert(typeof type === 'string', \"Expects string as the type, but found \" + (typeof type === 'undefined' ? 'undefined' : _typeof(type)) + \".\");\n\n  return { type: type, payload: payload, options: options };\n}\n\nfunction install(_Vue) {\n  if (Vue) {\n    console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');\n    return;\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n// auto install in dist mode\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState() {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return;\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function' ? val.call(this, state, getters) : state[val];\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res;\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedMutation() {\n      var args = [],\n          len = arguments.length;\n      while (len--) {\n        args[len] = arguments[len];\n      }if (namespace && !getModuleByNamespace(this.$store, 'mapMutations', namespace)) {\n        return;\n      }\n      return this.$store.commit.apply(this.$store, [val].concat(args));\n    };\n  });\n  return res;\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter() {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return;\n      }\n      if (!(val in this.$store.getters)) {\n        console.error(\"[vuex] unknown getter: \" + val);\n        return;\n      }\n      return this.$store.getters[val];\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res;\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedAction() {\n      var args = [],\n          len = arguments.length;\n      while (len--) {\n        args[len] = arguments[len];\n      }if (namespace && !getModuleByNamespace(this.$store, 'mapActions', namespace)) {\n        return;\n      }\n      return this.$store.dispatch.apply(this.$store, [val].concat(args));\n    };\n  });\n  return res;\n});\n\nfunction normalizeMap(map) {\n  return Array.isArray(map) ? map.map(function (key) {\n    return { key: key, val: key };\n  }) : Object.keys(map).map(function (key) {\n    return { key: key, val: map[key] };\n  });\n}\n\nfunction normalizeNamespace(fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map);\n  };\n}\n\nfunction getModuleByNamespace(store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (!module) {\n    console.error(\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace);\n  }\n  return module;\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '2.3.0',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 469:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! tether 1.4.0 */\n\n(function (root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    module.exports = factory(require, exports, module);\n  } else {\n    root.Tether = factory();\n  }\n})(this, function (require, exports, module) {\n\n  'use strict';\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n  }();\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  var TetherBase = undefined;\n  if (typeof TetherBase === 'undefined') {\n    TetherBase = { modules: [] };\n  }\n\n  var zeroElement = null;\n\n  // Same as native getBoundingClientRect, except it takes into account parent <frame> offsets\n  // if the element lies within a nested document (<frame> or <iframe>-like).\n  function getActualBoundingClientRect(node) {\n    var boundingRect = node.getBoundingClientRect();\n\n    // The original object returned by getBoundingClientRect is immutable, so we clone it\n    // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9\n    var rect = {};\n    for (var k in boundingRect) {\n      rect[k] = boundingRect[k];\n    }\n\n    if (node.ownerDocument !== document) {\n      var _frameElement = node.ownerDocument.defaultView.frameElement;\n      if (_frameElement) {\n        var frameRect = getActualBoundingClientRect(_frameElement);\n        rect.top += frameRect.top;\n        rect.bottom += frameRect.top;\n        rect.left += frameRect.left;\n        rect.right += frameRect.left;\n      }\n    }\n\n    return rect;\n  }\n\n  function getScrollParents(el) {\n    // In firefox if the el is inside an iframe with display: none; window.getComputedStyle() will return null;\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    var computedStyle = getComputedStyle(el) || {};\n    var position = computedStyle.position;\n    var parents = [];\n\n    if (position === 'fixed') {\n      return [el];\n    }\n\n    var parent = el;\n    while ((parent = parent.parentNode) && parent && parent.nodeType === 1) {\n      var style = undefined;\n      try {\n        style = getComputedStyle(parent);\n      } catch (err) {}\n\n      if (typeof style === 'undefined' || style === null) {\n        parents.push(parent);\n        return parents;\n      }\n\n      var _style = style;\n      var overflow = _style.overflow;\n      var overflowX = _style.overflowX;\n      var overflowY = _style.overflowY;\n\n      if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n        if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {\n          parents.push(parent);\n        }\n      }\n    }\n\n    parents.push(el.ownerDocument.body);\n\n    // If the node is within a frame, account for the parent window scroll\n    if (el.ownerDocument !== document) {\n      parents.push(el.ownerDocument.defaultView);\n    }\n\n    return parents;\n  }\n\n  var uniqueId = function () {\n    var id = 0;\n    return function () {\n      return ++id;\n    };\n  }();\n\n  var zeroPosCache = {};\n  var getOrigin = function getOrigin() {\n    // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of\n    // jitter as the user scrolls that messes with our ability to detect if two positions\n    // are equivilant or not.  We place an element at the top left of the page that will\n    // get the same jitter, so we can cancel the two out.\n    var node = zeroElement;\n    if (!node || !document.body.contains(node)) {\n      node = document.createElement('div');\n      node.setAttribute('data-tether-id', uniqueId());\n      extend(node.style, {\n        top: 0,\n        left: 0,\n        position: 'absolute'\n      });\n\n      document.body.appendChild(node);\n\n      zeroElement = node;\n    }\n\n    var id = node.getAttribute('data-tether-id');\n    if (typeof zeroPosCache[id] === 'undefined') {\n      zeroPosCache[id] = getActualBoundingClientRect(node);\n\n      // Clear the cache when this position call is done\n      defer(function () {\n        delete zeroPosCache[id];\n      });\n    }\n\n    return zeroPosCache[id];\n  };\n\n  function removeUtilElements() {\n    if (zeroElement) {\n      document.body.removeChild(zeroElement);\n    }\n    zeroElement = null;\n  };\n\n  function getBounds(el) {\n    var doc = undefined;\n    if (el === document) {\n      doc = document;\n      el = document.documentElement;\n    } else {\n      doc = el.ownerDocument;\n    }\n\n    var docEl = doc.documentElement;\n\n    var box = getActualBoundingClientRect(el);\n\n    var origin = getOrigin();\n\n    box.top -= origin.top;\n    box.left -= origin.left;\n\n    if (typeof box.width === 'undefined') {\n      box.width = document.body.scrollWidth - box.left - box.right;\n    }\n    if (typeof box.height === 'undefined') {\n      box.height = document.body.scrollHeight - box.top - box.bottom;\n    }\n\n    box.top = box.top - docEl.clientTop;\n    box.left = box.left - docEl.clientLeft;\n    box.right = doc.body.clientWidth - box.width - box.left;\n    box.bottom = doc.body.clientHeight - box.height - box.top;\n\n    return box;\n  }\n\n  function getOffsetParent(el) {\n    return el.offsetParent || document.documentElement;\n  }\n\n  var _scrollBarSize = null;\n  function getScrollBarSize() {\n    if (_scrollBarSize) {\n      return _scrollBarSize;\n    }\n    var inner = document.createElement('div');\n    inner.style.width = '100%';\n    inner.style.height = '200px';\n\n    var outer = document.createElement('div');\n    extend(outer.style, {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      visibility: 'hidden',\n      width: '200px',\n      height: '150px',\n      overflow: 'hidden'\n    });\n\n    outer.appendChild(inner);\n\n    document.body.appendChild(outer);\n\n    var widthContained = inner.offsetWidth;\n    outer.style.overflow = 'scroll';\n    var widthScroll = inner.offsetWidth;\n\n    if (widthContained === widthScroll) {\n      widthScroll = outer.clientWidth;\n    }\n\n    document.body.removeChild(outer);\n\n    var width = widthContained - widthScroll;\n\n    _scrollBarSize = { width: width, height: width };\n    return _scrollBarSize;\n  }\n\n  function extend() {\n    var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    var args = [];\n\n    Array.prototype.push.apply(args, arguments);\n\n    args.slice(1).forEach(function (obj) {\n      if (obj) {\n        for (var key in obj) {\n          if ({}.hasOwnProperty.call(obj, key)) {\n            out[key] = obj[key];\n          }\n        }\n      }\n    });\n\n    return out;\n  }\n\n  function removeClass(el, name) {\n    if (typeof el.classList !== 'undefined') {\n      name.split(' ').forEach(function (cls) {\n        if (cls.trim()) {\n          el.classList.remove(cls);\n        }\n      });\n    } else {\n      var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');\n      var className = getClassName(el).replace(regex, ' ');\n      setClassName(el, className);\n    }\n  }\n\n  function addClass(el, name) {\n    if (typeof el.classList !== 'undefined') {\n      name.split(' ').forEach(function (cls) {\n        if (cls.trim()) {\n          el.classList.add(cls);\n        }\n      });\n    } else {\n      removeClass(el, name);\n      var cls = getClassName(el) + (' ' + name);\n      setClassName(el, cls);\n    }\n  }\n\n  function hasClass(el, name) {\n    if (typeof el.classList !== 'undefined') {\n      return el.classList.contains(name);\n    }\n    var className = getClassName(el);\n    return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);\n  }\n\n  function getClassName(el) {\n    // Can't use just SVGAnimatedString here since nodes within a Frame in IE have\n    // completely separately SVGAnimatedString base classes\n    if (el.className instanceof el.ownerDocument.defaultView.SVGAnimatedString) {\n      return el.className.baseVal;\n    }\n    return el.className;\n  }\n\n  function setClassName(el, className) {\n    el.setAttribute('class', className);\n  }\n\n  function updateClasses(el, add, all) {\n    // Of the set of 'all' classes, we need the 'add' classes, and only the\n    // 'add' classes to be set.\n    all.forEach(function (cls) {\n      if (add.indexOf(cls) === -1 && hasClass(el, cls)) {\n        removeClass(el, cls);\n      }\n    });\n\n    add.forEach(function (cls) {\n      if (!hasClass(el, cls)) {\n        addClass(el, cls);\n      }\n    });\n  }\n\n  var deferred = [];\n\n  var defer = function defer(fn) {\n    deferred.push(fn);\n  };\n\n  var flush = function flush() {\n    var fn = undefined;\n    while (fn = deferred.pop()) {\n      fn();\n    }\n  };\n\n  var Evented = function () {\n    function Evented() {\n      _classCallCheck(this, Evented);\n    }\n\n    _createClass(Evented, [{\n      key: 'on',\n      value: function on(event, handler, ctx) {\n        var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n        if (typeof this.bindings === 'undefined') {\n          this.bindings = {};\n        }\n        if (typeof this.bindings[event] === 'undefined') {\n          this.bindings[event] = [];\n        }\n        this.bindings[event].push({ handler: handler, ctx: ctx, once: once });\n      }\n    }, {\n      key: 'once',\n      value: function once(event, handler, ctx) {\n        this.on(event, handler, ctx, true);\n      }\n    }, {\n      key: 'off',\n      value: function off(event, handler) {\n        if (typeof this.bindings === 'undefined' || typeof this.bindings[event] === 'undefined') {\n          return;\n        }\n\n        if (typeof handler === 'undefined') {\n          delete this.bindings[event];\n        } else {\n          var i = 0;\n          while (i < this.bindings[event].length) {\n            if (this.bindings[event][i].handler === handler) {\n              this.bindings[event].splice(i, 1);\n            } else {\n              ++i;\n            }\n          }\n        }\n      }\n    }, {\n      key: 'trigger',\n      value: function trigger(event) {\n        if (typeof this.bindings !== 'undefined' && this.bindings[event]) {\n          var i = 0;\n\n          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          while (i < this.bindings[event].length) {\n            var _bindings$event$i = this.bindings[event][i];\n            var handler = _bindings$event$i.handler;\n            var ctx = _bindings$event$i.ctx;\n            var once = _bindings$event$i.once;\n\n            var context = ctx;\n            if (typeof context === 'undefined') {\n              context = this;\n            }\n\n            handler.apply(context, args);\n\n            if (once) {\n              this.bindings[event].splice(i, 1);\n            } else {\n              ++i;\n            }\n          }\n        }\n      }\n    }]);\n\n    return Evented;\n  }();\n\n  TetherBase.Utils = {\n    getActualBoundingClientRect: getActualBoundingClientRect,\n    getScrollParents: getScrollParents,\n    getBounds: getBounds,\n    getOffsetParent: getOffsetParent,\n    extend: extend,\n    addClass: addClass,\n    removeClass: removeClass,\n    hasClass: hasClass,\n    updateClasses: updateClasses,\n    defer: defer,\n    flush: flush,\n    uniqueId: uniqueId,\n    Evented: Evented,\n    getScrollBarSize: getScrollBarSize,\n    removeUtilElements: removeUtilElements\n  };\n  /* globals TetherBase, performance */\n\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;_e = err;\n      } finally {\n        try {\n          if (!_n && _i['return']) _i['return']();\n        } finally {\n          if (_d) throw _e;\n        }\n      }return _arr;\n    }return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError('Invalid attempt to destructure non-iterable instance');\n      }\n    };\n  }();\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n  }();\n\n  var _get = function get(_x6, _x7, _x8) {\n    var _again = true;_function: while (_again) {\n      var object = _x6,\n          property = _x7,\n          receiver = _x8;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {\n        var parent = Object.getPrototypeOf(object);if (parent === null) {\n          return undefined;\n        } else {\n          _x6 = parent;_x7 = property;_x8 = receiver;_again = true;desc = parent = undefined;continue _function;\n        }\n      } else if ('value' in desc) {\n        return desc.value;\n      } else {\n        var getter = desc.get;if (getter === undefined) {\n          return undefined;\n        }return getter.call(receiver);\n      }\n    }\n  };\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  if (typeof TetherBase === 'undefined') {\n    throw new Error('You must include the utils.js file before tether.js');\n  }\n\n  var _TetherBase$Utils = TetherBase.Utils;\n  var getScrollParents = _TetherBase$Utils.getScrollParents;\n  var getBounds = _TetherBase$Utils.getBounds;\n  var getOffsetParent = _TetherBase$Utils.getOffsetParent;\n  var extend = _TetherBase$Utils.extend;\n  var addClass = _TetherBase$Utils.addClass;\n  var removeClass = _TetherBase$Utils.removeClass;\n  var updateClasses = _TetherBase$Utils.updateClasses;\n  var defer = _TetherBase$Utils.defer;\n  var flush = _TetherBase$Utils.flush;\n  var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;\n  var removeUtilElements = _TetherBase$Utils.removeUtilElements;\n\n  function within(a, b) {\n    var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n    return a + diff >= b && b >= a - diff;\n  }\n\n  var transformKey = function () {\n    if (typeof document === 'undefined') {\n      return '';\n    }\n    var el = document.createElement('div');\n\n    var transforms = ['transform', 'WebkitTransform', 'OTransform', 'MozTransform', 'msTransform'];\n    for (var i = 0; i < transforms.length; ++i) {\n      var key = transforms[i];\n      if (el.style[key] !== undefined) {\n        return key;\n      }\n    }\n  }();\n\n  var tethers = [];\n\n  var position = function position() {\n    tethers.forEach(function (tether) {\n      tether.position(false);\n    });\n    flush();\n  };\n\n  function now() {\n    if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {\n      return performance.now();\n    }\n    return +new Date();\n  }\n\n  (function () {\n    var lastCall = null;\n    var lastDuration = null;\n    var pendingTimeout = null;\n\n    var tick = function tick() {\n      if (typeof lastDuration !== 'undefined' && lastDuration > 16) {\n        // We voluntarily throttle ourselves if we can't manage 60fps\n        lastDuration = Math.min(lastDuration - 16, 250);\n\n        // Just in case this is the last event, remember to position just once more\n        pendingTimeout = setTimeout(tick, 250);\n        return;\n      }\n\n      if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {\n        // Some browsers call events a little too frequently, refuse to run more than is reasonable\n        return;\n      }\n\n      if (pendingTimeout != null) {\n        clearTimeout(pendingTimeout);\n        pendingTimeout = null;\n      }\n\n      lastCall = now();\n      position();\n      lastDuration = now() - lastCall;\n    };\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined') {\n      ['resize', 'scroll', 'touchmove'].forEach(function (event) {\n        window.addEventListener(event, tick);\n      });\n    }\n  })();\n\n  var MIRROR_LR = {\n    center: 'center',\n    left: 'right',\n    right: 'left'\n  };\n\n  var MIRROR_TB = {\n    middle: 'middle',\n    top: 'bottom',\n    bottom: 'top'\n  };\n\n  var OFFSET_MAP = {\n    top: 0,\n    left: 0,\n    middle: '50%',\n    center: '50%',\n    bottom: '100%',\n    right: '100%'\n  };\n\n  var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {\n    var left = attachment.left;\n    var top = attachment.top;\n\n    if (left === 'auto') {\n      left = MIRROR_LR[relativeToAttachment.left];\n    }\n\n    if (top === 'auto') {\n      top = MIRROR_TB[relativeToAttachment.top];\n    }\n\n    return { left: left, top: top };\n  };\n\n  var attachmentToOffset = function attachmentToOffset(attachment) {\n    var left = attachment.left;\n    var top = attachment.top;\n\n    if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {\n      left = OFFSET_MAP[attachment.left];\n    }\n\n    if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {\n      top = OFFSET_MAP[attachment.top];\n    }\n\n    return { left: left, top: top };\n  };\n\n  function addOffset() {\n    var out = { top: 0, left: 0 };\n\n    for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {\n      offsets[_key] = arguments[_key];\n    }\n\n    offsets.forEach(function (_ref) {\n      var top = _ref.top;\n      var left = _ref.left;\n\n      if (typeof top === 'string') {\n        top = parseFloat(top, 10);\n      }\n      if (typeof left === 'string') {\n        left = parseFloat(left, 10);\n      }\n\n      out.top += top;\n      out.left += left;\n    });\n\n    return out;\n  }\n\n  function offsetToPx(offset, size) {\n    if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {\n      offset.left = parseFloat(offset.left, 10) / 100 * size.width;\n    }\n    if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {\n      offset.top = parseFloat(offset.top, 10) / 100 * size.height;\n    }\n\n    return offset;\n  }\n\n  var parseOffset = function parseOffset(value) {\n    var _value$split = value.split(' ');\n\n    var _value$split2 = _slicedToArray(_value$split, 2);\n\n    var top = _value$split2[0];\n    var left = _value$split2[1];\n\n    return { top: top, left: left };\n  };\n  var parseAttachment = parseOffset;\n\n  var TetherClass = function (_Evented) {\n    _inherits(TetherClass, _Evented);\n\n    function TetherClass(options) {\n      var _this = this;\n\n      _classCallCheck(this, TetherClass);\n\n      _get(Object.getPrototypeOf(TetherClass.prototype), 'constructor', this).call(this);\n      this.position = this.position.bind(this);\n\n      tethers.push(this);\n\n      this.history = [];\n\n      this.setOptions(options, false);\n\n      TetherBase.modules.forEach(function (module) {\n        if (typeof module.initialize !== 'undefined') {\n          module.initialize.call(_this);\n        }\n      });\n\n      this.position();\n    }\n\n    _createClass(TetherClass, [{\n      key: 'getClass',\n      value: function getClass() {\n        var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n        var classes = this.options.classes;\n\n        if (typeof classes !== 'undefined' && classes[key]) {\n          return this.options.classes[key];\n        } else if (this.options.classPrefix) {\n          return this.options.classPrefix + '-' + key;\n        } else {\n          return key;\n        }\n      }\n    }, {\n      key: 'setOptions',\n      value: function setOptions(options) {\n        var _this2 = this;\n\n        var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n        var defaults = {\n          offset: '0 0',\n          targetOffset: '0 0',\n          targetAttachment: 'auto auto',\n          classPrefix: 'tether'\n        };\n\n        this.options = extend(defaults, options);\n\n        var _options = this.options;\n        var element = _options.element;\n        var target = _options.target;\n        var targetModifier = _options.targetModifier;\n\n        this.element = element;\n        this.target = target;\n        this.targetModifier = targetModifier;\n\n        if (this.target === 'viewport') {\n          this.target = document.body;\n          this.targetModifier = 'visible';\n        } else if (this.target === 'scroll-handle') {\n          this.target = document.body;\n          this.targetModifier = 'scroll-handle';\n        }\n\n        ['element', 'target'].forEach(function (key) {\n          if (typeof _this2[key] === 'undefined') {\n            throw new Error('Tether Error: Both element and target must be defined');\n          }\n\n          if (typeof _this2[key].jquery !== 'undefined') {\n            _this2[key] = _this2[key][0];\n          } else if (typeof _this2[key] === 'string') {\n            _this2[key] = document.querySelector(_this2[key]);\n          }\n        });\n\n        addClass(this.element, this.getClass('element'));\n        if (!(this.options.addTargetClasses === false)) {\n          addClass(this.target, this.getClass('target'));\n        }\n\n        if (!this.options.attachment) {\n          throw new Error('Tether Error: You must provide an attachment');\n        }\n\n        this.targetAttachment = parseAttachment(this.options.targetAttachment);\n        this.attachment = parseAttachment(this.options.attachment);\n        this.offset = parseOffset(this.options.offset);\n        this.targetOffset = parseOffset(this.options.targetOffset);\n\n        if (typeof this.scrollParents !== 'undefined') {\n          this.disable();\n        }\n\n        if (this.targetModifier === 'scroll-handle') {\n          this.scrollParents = [this.target];\n        } else {\n          this.scrollParents = getScrollParents(this.target);\n        }\n\n        if (!(this.options.enabled === false)) {\n          this.enable(pos);\n        }\n      }\n    }, {\n      key: 'getTargetBounds',\n      value: function getTargetBounds() {\n        if (typeof this.targetModifier !== 'undefined') {\n          if (this.targetModifier === 'visible') {\n            if (this.target === document.body) {\n              return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };\n            } else {\n              var bounds = getBounds(this.target);\n\n              var out = {\n                height: bounds.height,\n                width: bounds.width,\n                top: bounds.top,\n                left: bounds.left\n              };\n\n              out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));\n              out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));\n              out.height = Math.min(innerHeight, out.height);\n              out.height -= 2;\n\n              out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));\n              out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));\n              out.width = Math.min(innerWidth, out.width);\n              out.width -= 2;\n\n              if (out.top < pageYOffset) {\n                out.top = pageYOffset;\n              }\n              if (out.left < pageXOffset) {\n                out.left = pageXOffset;\n              }\n\n              return out;\n            }\n          } else if (this.targetModifier === 'scroll-handle') {\n            var bounds = undefined;\n            var target = this.target;\n            if (target === document.body) {\n              target = document.documentElement;\n\n              bounds = {\n                left: pageXOffset,\n                top: pageYOffset,\n                height: innerHeight,\n                width: innerWidth\n              };\n            } else {\n              bounds = getBounds(target);\n            }\n\n            var style = getComputedStyle(target);\n\n            var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;\n\n            var scrollBottom = 0;\n            if (hasBottomScroll) {\n              scrollBottom = 15;\n            }\n\n            var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;\n\n            var out = {\n              width: 15,\n              height: height * 0.975 * (height / target.scrollHeight),\n              left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15\n            };\n\n            var fitAdj = 0;\n            if (height < 408 && this.target === document.body) {\n              fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;\n            }\n\n            if (this.target !== document.body) {\n              out.height = Math.max(out.height, 24);\n            }\n\n            var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);\n            out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);\n\n            if (this.target === document.body) {\n              out.height = Math.max(out.height, 24);\n            }\n\n            return out;\n          }\n        } else {\n          return getBounds(this.target);\n        }\n      }\n    }, {\n      key: 'clearCache',\n      value: function clearCache() {\n        this._cache = {};\n      }\n    }, {\n      key: 'cache',\n      value: function cache(k, getter) {\n        // More than one module will often need the same DOM info, so\n        // we keep a cache which is cleared on each position call\n        if (typeof this._cache === 'undefined') {\n          this._cache = {};\n        }\n\n        if (typeof this._cache[k] === 'undefined') {\n          this._cache[k] = getter.call(this);\n        }\n\n        return this._cache[k];\n      }\n    }, {\n      key: 'enable',\n      value: function enable() {\n        var _this3 = this;\n\n        var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n        if (!(this.options.addTargetClasses === false)) {\n          addClass(this.target, this.getClass('enabled'));\n        }\n        addClass(this.element, this.getClass('enabled'));\n        this.enabled = true;\n\n        this.scrollParents.forEach(function (parent) {\n          if (parent !== _this3.target.ownerDocument) {\n            parent.addEventListener('scroll', _this3.position);\n          }\n        });\n\n        if (pos) {\n          this.position();\n        }\n      }\n    }, {\n      key: 'disable',\n      value: function disable() {\n        var _this4 = this;\n\n        removeClass(this.target, this.getClass('enabled'));\n        removeClass(this.element, this.getClass('enabled'));\n        this.enabled = false;\n\n        if (typeof this.scrollParents !== 'undefined') {\n          this.scrollParents.forEach(function (parent) {\n            parent.removeEventListener('scroll', _this4.position);\n          });\n        }\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var _this5 = this;\n\n        this.disable();\n\n        tethers.forEach(function (tether, i) {\n          if (tether === _this5) {\n            tethers.splice(i, 1);\n          }\n        });\n\n        // Remove any elements we were using for convenience from the DOM\n        if (tethers.length === 0) {\n          removeUtilElements();\n        }\n      }\n    }, {\n      key: 'updateAttachClasses',\n      value: function updateAttachClasses(elementAttach, targetAttach) {\n        var _this6 = this;\n\n        elementAttach = elementAttach || this.attachment;\n        targetAttach = targetAttach || this.targetAttachment;\n        var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];\n\n        if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {\n          // updateAttachClasses can be called more than once in a position call, so\n          // we need to clean up after ourselves such that when the last defer gets\n          // ran it doesn't add any extra classes from previous calls.\n          this._addAttachClasses.splice(0, this._addAttachClasses.length);\n        }\n\n        if (typeof this._addAttachClasses === 'undefined') {\n          this._addAttachClasses = [];\n        }\n        var add = this._addAttachClasses;\n\n        if (elementAttach.top) {\n          add.push(this.getClass('element-attached') + '-' + elementAttach.top);\n        }\n        if (elementAttach.left) {\n          add.push(this.getClass('element-attached') + '-' + elementAttach.left);\n        }\n        if (targetAttach.top) {\n          add.push(this.getClass('target-attached') + '-' + targetAttach.top);\n        }\n        if (targetAttach.left) {\n          add.push(this.getClass('target-attached') + '-' + targetAttach.left);\n        }\n\n        var all = [];\n        sides.forEach(function (side) {\n          all.push(_this6.getClass('element-attached') + '-' + side);\n          all.push(_this6.getClass('target-attached') + '-' + side);\n        });\n\n        defer(function () {\n          if (!(typeof _this6._addAttachClasses !== 'undefined')) {\n            return;\n          }\n\n          updateClasses(_this6.element, _this6._addAttachClasses, all);\n          if (!(_this6.options.addTargetClasses === false)) {\n            updateClasses(_this6.target, _this6._addAttachClasses, all);\n          }\n\n          delete _this6._addAttachClasses;\n        });\n      }\n    }, {\n      key: 'position',\n      value: function position() {\n        var _this7 = this;\n\n        var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n        // flushChanges commits the changes immediately, leave true unless you are positioning multiple\n        // tethers (in which case call Tether.Utils.flush yourself when you're done)\n\n        if (!this.enabled) {\n          return;\n        }\n\n        this.clearCache();\n\n        // Turn 'auto' attachments into the appropriate corner or edge\n        var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);\n\n        this.updateAttachClasses(this.attachment, targetAttachment);\n\n        var elementPos = this.cache('element-bounds', function () {\n          return getBounds(_this7.element);\n        });\n\n        var width = elementPos.width;\n        var height = elementPos.height;\n\n        if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n          var _lastSize = this.lastSize;\n\n          // We cache the height and width to make it possible to position elements that are\n          // getting hidden.\n          width = _lastSize.width;\n          height = _lastSize.height;\n        } else {\n          this.lastSize = { width: width, height: height };\n        }\n\n        var targetPos = this.cache('target-bounds', function () {\n          return _this7.getTargetBounds();\n        });\n        var targetSize = targetPos;\n\n        // Get an actual px offset from the attachment\n        var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });\n        var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);\n\n        var manualOffset = offsetToPx(this.offset, { width: width, height: height });\n        var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);\n\n        // Add the manually provided offset\n        offset = addOffset(offset, manualOffset);\n        targetOffset = addOffset(targetOffset, manualTargetOffset);\n\n        // It's now our goal to make (element position + offset) == (target position + target offset)\n        var left = targetPos.left + targetOffset.left - offset.left;\n        var top = targetPos.top + targetOffset.top - offset.top;\n\n        for (var i = 0; i < TetherBase.modules.length; ++i) {\n          var _module2 = TetherBase.modules[i];\n          var ret = _module2.position.call(this, {\n            left: left,\n            top: top,\n            targetAttachment: targetAttachment,\n            targetPos: targetPos,\n            elementPos: elementPos,\n            offset: offset,\n            targetOffset: targetOffset,\n            manualOffset: manualOffset,\n            manualTargetOffset: manualTargetOffset,\n            scrollbarSize: scrollbarSize,\n            attachment: this.attachment\n          });\n\n          if (ret === false) {\n            return false;\n          } else if (typeof ret === 'undefined' || (typeof ret === 'undefined' ? 'undefined' : _typeof(ret)) !== 'object') {\n            continue;\n          } else {\n            top = ret.top;\n            left = ret.left;\n          }\n        }\n\n        // We describe the position three different ways to give the optimizer\n        // a chance to decide the best possible way to position the element\n        // with the fewest repaints.\n        var next = {\n          // It's position relative to the page (absolute positioning when\n          // the element is a child of the body)\n          page: {\n            top: top,\n            left: left\n          },\n\n          // It's position relative to the viewport (fixed positioning)\n          viewport: {\n            top: top - pageYOffset,\n            bottom: pageYOffset - top - height + innerHeight,\n            left: left - pageXOffset,\n            right: pageXOffset - left - width + innerWidth\n          }\n        };\n\n        var doc = this.target.ownerDocument;\n        var win = doc.defaultView;\n\n        var scrollbarSize = undefined;\n        if (win.innerHeight > doc.documentElement.clientHeight) {\n          scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n          next.viewport.bottom -= scrollbarSize.height;\n        }\n\n        if (win.innerWidth > doc.documentElement.clientWidth) {\n          scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);\n          next.viewport.right -= scrollbarSize.width;\n        }\n\n        if (['', 'static'].indexOf(doc.body.style.position) === -1 || ['', 'static'].indexOf(doc.body.parentElement.style.position) === -1) {\n          // Absolute positioning in the body will be relative to the page, not the 'initial containing block'\n          next.page.bottom = doc.body.scrollHeight - top - height;\n          next.page.right = doc.body.scrollWidth - left - width;\n        }\n\n        if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {\n          (function () {\n            var offsetParent = _this7.cache('target-offsetparent', function () {\n              return getOffsetParent(_this7.target);\n            });\n            var offsetPosition = _this7.cache('target-offsetparent-bounds', function () {\n              return getBounds(offsetParent);\n            });\n            var offsetParentStyle = getComputedStyle(offsetParent);\n            var offsetParentSize = offsetPosition;\n\n            var offsetBorder = {};\n            ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {\n              offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);\n            });\n\n            offsetPosition.right = doc.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;\n            offsetPosition.bottom = doc.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;\n\n            if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {\n              if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {\n                // We're within the visible part of the target's scroll parent\n                var scrollTop = offsetParent.scrollTop;\n                var scrollLeft = offsetParent.scrollLeft;\n\n                // It's position relative to the target's offset parent (absolute positioning when\n                // the element is moved to be a child of the target's offset parent).\n                next.offset = {\n                  top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,\n                  left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left\n                };\n              }\n            }\n          })();\n        }\n\n        // We could also travel up the DOM and try each containing context, rather than only\n        // looking at the body, but we're gonna get diminishing returns.\n\n        this.move(next);\n\n        this.history.unshift(next);\n\n        if (this.history.length > 3) {\n          this.history.pop();\n        }\n\n        if (flushChanges) {\n          flush();\n        }\n\n        return true;\n      }\n\n      // THE ISSUE\n    }, {\n      key: 'move',\n      value: function move(pos) {\n        var _this8 = this;\n\n        if (!(typeof this.element.parentNode !== 'undefined')) {\n          return;\n        }\n\n        var same = {};\n\n        for (var type in pos) {\n          same[type] = {};\n\n          for (var key in pos[type]) {\n            var found = false;\n\n            for (var i = 0; i < this.history.length; ++i) {\n              var point = this.history[i];\n              if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {\n                found = true;\n                break;\n              }\n            }\n\n            if (!found) {\n              same[type][key] = true;\n            }\n          }\n        }\n\n        var css = { top: '', left: '', right: '', bottom: '' };\n\n        var transcribe = function transcribe(_same, _pos) {\n          var hasOptimizations = typeof _this8.options.optimizations !== 'undefined';\n          var gpu = hasOptimizations ? _this8.options.optimizations.gpu : null;\n          if (gpu !== false) {\n            var yPos = undefined,\n                xPos = undefined;\n            if (_same.top) {\n              css.top = 0;\n              yPos = _pos.top;\n            } else {\n              css.bottom = 0;\n              yPos = -_pos.bottom;\n            }\n\n            if (_same.left) {\n              css.left = 0;\n              xPos = _pos.left;\n            } else {\n              css.right = 0;\n              xPos = -_pos.right;\n            }\n\n            if (window.matchMedia) {\n              // HubSpot/tether#207\n              var retina = window.matchMedia('only screen and (min-resolution: 1.3dppx)').matches || window.matchMedia('only screen and (-webkit-min-device-pixel-ratio: 1.3)').matches;\n              if (!retina) {\n                xPos = Math.round(xPos);\n                yPos = Math.round(yPos);\n              }\n            }\n\n            css[transformKey] = 'translateX(' + xPos + 'px) translateY(' + yPos + 'px)';\n\n            if (transformKey !== 'msTransform') {\n              // The Z transform will keep this in the GPU (faster, and prevents artifacts),\n              // but IE9 doesn't support 3d transforms and will choke.\n              css[transformKey] += \" translateZ(0)\";\n            }\n          } else {\n            if (_same.top) {\n              css.top = _pos.top + 'px';\n            } else {\n              css.bottom = _pos.bottom + 'px';\n            }\n\n            if (_same.left) {\n              css.left = _pos.left + 'px';\n            } else {\n              css.right = _pos.right + 'px';\n            }\n          }\n        };\n\n        var moved = false;\n        if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {\n          css.position = 'absolute';\n          transcribe(same.page, pos.page);\n        } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {\n          css.position = 'fixed';\n          transcribe(same.viewport, pos.viewport);\n        } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {\n          (function () {\n            css.position = 'absolute';\n            var offsetParent = _this8.cache('target-offsetparent', function () {\n              return getOffsetParent(_this8.target);\n            });\n\n            if (getOffsetParent(_this8.element) !== offsetParent) {\n              defer(function () {\n                _this8.element.parentNode.removeChild(_this8.element);\n                offsetParent.appendChild(_this8.element);\n              });\n            }\n\n            transcribe(same.offset, pos.offset);\n            moved = true;\n          })();\n        } else {\n          css.position = 'absolute';\n          transcribe({ top: true, left: true }, pos.page);\n        }\n\n        if (!moved) {\n          if (this.options.bodyElement) {\n            this.options.bodyElement.appendChild(this.element);\n          } else {\n            var offsetParentIsBody = true;\n            var currentNode = this.element.parentNode;\n            while (currentNode && currentNode.nodeType === 1 && currentNode.tagName !== 'BODY') {\n              if (getComputedStyle(currentNode).position !== 'static') {\n                offsetParentIsBody = false;\n                break;\n              }\n\n              currentNode = currentNode.parentNode;\n            }\n\n            if (!offsetParentIsBody) {\n              this.element.parentNode.removeChild(this.element);\n              this.element.ownerDocument.body.appendChild(this.element);\n            }\n          }\n        }\n\n        // Any css change will trigger a repaint, so let's avoid one if nothing changed\n        var writeCSS = {};\n        var write = false;\n        for (var key in css) {\n          var val = css[key];\n          var elVal = this.element.style[key];\n\n          if (elVal !== val) {\n            write = true;\n            writeCSS[key] = val;\n          }\n        }\n\n        if (write) {\n          defer(function () {\n            extend(_this8.element.style, writeCSS);\n            _this8.trigger('repositioned');\n          });\n        }\n      }\n    }]);\n\n    return TetherClass;\n  }(Evented);\n\n  TetherClass.modules = [];\n\n  TetherBase.position = position;\n\n  var Tether = extend(TetherClass, TetherBase);\n  /* globals TetherBase */\n\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;_e = err;\n      } finally {\n        try {\n          if (!_n && _i['return']) _i['return']();\n        } finally {\n          if (_d) throw _e;\n        }\n      }return _arr;\n    }return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError('Invalid attempt to destructure non-iterable instance');\n      }\n    };\n  }();\n\n  var _TetherBase$Utils = TetherBase.Utils;\n  var getBounds = _TetherBase$Utils.getBounds;\n  var extend = _TetherBase$Utils.extend;\n  var updateClasses = _TetherBase$Utils.updateClasses;\n  var defer = _TetherBase$Utils.defer;\n\n  var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];\n\n  function getBoundingRect(tether, to) {\n    if (to === 'scrollParent') {\n      to = tether.scrollParents[0];\n    } else if (to === 'window') {\n      to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];\n    }\n\n    if (to === document) {\n      to = to.documentElement;\n    }\n\n    if (typeof to.nodeType !== 'undefined') {\n      (function () {\n        var node = to;\n        var size = getBounds(to);\n        var pos = size;\n        var style = getComputedStyle(to);\n\n        to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];\n\n        // Account any parent Frames scroll offset\n        if (node.ownerDocument !== document) {\n          var win = node.ownerDocument.defaultView;\n          to[0] += win.pageXOffset;\n          to[1] += win.pageYOffset;\n          to[2] += win.pageXOffset;\n          to[3] += win.pageYOffset;\n        }\n\n        BOUNDS_FORMAT.forEach(function (side, i) {\n          side = side[0].toUpperCase() + side.substr(1);\n          if (side === 'Top' || side === 'Left') {\n            to[i] += parseFloat(style['border' + side + 'Width']);\n          } else {\n            to[i] -= parseFloat(style['border' + side + 'Width']);\n          }\n        });\n      })();\n    }\n\n    return to;\n  }\n\n  TetherBase.modules.push({\n    position: function position(_ref) {\n      var _this = this;\n\n      var top = _ref.top;\n      var left = _ref.left;\n      var targetAttachment = _ref.targetAttachment;\n\n      if (!this.options.constraints) {\n        return true;\n      }\n\n      var _cache = this.cache('element-bounds', function () {\n        return getBounds(_this.element);\n      });\n\n      var height = _cache.height;\n      var width = _cache.width;\n\n      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {\n        var _lastSize = this.lastSize;\n\n        // Handle the item getting hidden as a result of our positioning without glitching\n        // the classes in and out\n        width = _lastSize.width;\n        height = _lastSize.height;\n      }\n\n      var targetSize = this.cache('target-bounds', function () {\n        return _this.getTargetBounds();\n      });\n\n      var targetHeight = targetSize.height;\n      var targetWidth = targetSize.width;\n\n      var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];\n\n      this.options.constraints.forEach(function (constraint) {\n        var outOfBoundsClass = constraint.outOfBoundsClass;\n        var pinnedClass = constraint.pinnedClass;\n\n        if (outOfBoundsClass) {\n          allClasses.push(outOfBoundsClass);\n        }\n        if (pinnedClass) {\n          allClasses.push(pinnedClass);\n        }\n      });\n\n      allClasses.forEach(function (cls) {\n        ['left', 'top', 'right', 'bottom'].forEach(function (side) {\n          allClasses.push(cls + '-' + side);\n        });\n      });\n\n      var addClasses = [];\n\n      var tAttachment = extend({}, targetAttachment);\n      var eAttachment = extend({}, this.attachment);\n\n      this.options.constraints.forEach(function (constraint) {\n        var to = constraint.to;\n        var attachment = constraint.attachment;\n        var pin = constraint.pin;\n\n        if (typeof attachment === 'undefined') {\n          attachment = '';\n        }\n\n        var changeAttachX = undefined,\n            changeAttachY = undefined;\n        if (attachment.indexOf(' ') >= 0) {\n          var _attachment$split = attachment.split(' ');\n\n          var _attachment$split2 = _slicedToArray(_attachment$split, 2);\n\n          changeAttachY = _attachment$split2[0];\n          changeAttachX = _attachment$split2[1];\n        } else {\n          changeAttachX = changeAttachY = attachment;\n        }\n\n        var bounds = getBoundingRect(_this, to);\n\n        if (changeAttachY === 'target' || changeAttachY === 'both') {\n          if (top < bounds[1] && tAttachment.top === 'top') {\n            top += targetHeight;\n            tAttachment.top = 'bottom';\n          }\n\n          if (top + height > bounds[3] && tAttachment.top === 'bottom') {\n            top -= targetHeight;\n            tAttachment.top = 'top';\n          }\n        }\n\n        if (changeAttachY === 'together') {\n          if (tAttachment.top === 'top') {\n            if (eAttachment.top === 'bottom' && top < bounds[1]) {\n              top += targetHeight;\n              tAttachment.top = 'bottom';\n\n              top += height;\n              eAttachment.top = 'top';\n            } else if (eAttachment.top === 'top' && top + height > bounds[3] && top - (height - targetHeight) >= bounds[1]) {\n              top -= height - targetHeight;\n              tAttachment.top = 'bottom';\n\n              eAttachment.top = 'bottom';\n            }\n          }\n\n          if (tAttachment.top === 'bottom') {\n            if (eAttachment.top === 'top' && top + height > bounds[3]) {\n              top -= targetHeight;\n              tAttachment.top = 'top';\n\n              top -= height;\n              eAttachment.top = 'bottom';\n            } else if (eAttachment.top === 'bottom' && top < bounds[1] && top + (height * 2 - targetHeight) <= bounds[3]) {\n              top += height - targetHeight;\n              tAttachment.top = 'top';\n\n              eAttachment.top = 'top';\n            }\n          }\n\n          if (tAttachment.top === 'middle') {\n            if (top + height > bounds[3] && eAttachment.top === 'top') {\n              top -= height;\n              eAttachment.top = 'bottom';\n            } else if (top < bounds[1] && eAttachment.top === 'bottom') {\n              top += height;\n              eAttachment.top = 'top';\n            }\n          }\n        }\n\n        if (changeAttachX === 'target' || changeAttachX === 'both') {\n          if (left < bounds[0] && tAttachment.left === 'left') {\n            left += targetWidth;\n            tAttachment.left = 'right';\n          }\n\n          if (left + width > bounds[2] && tAttachment.left === 'right') {\n            left -= targetWidth;\n            tAttachment.left = 'left';\n          }\n        }\n\n        if (changeAttachX === 'together') {\n          if (left < bounds[0] && tAttachment.left === 'left') {\n            if (eAttachment.left === 'right') {\n              left += targetWidth;\n              tAttachment.left = 'right';\n\n              left += width;\n              eAttachment.left = 'left';\n            } else if (eAttachment.left === 'left') {\n              left += targetWidth;\n              tAttachment.left = 'right';\n\n              left -= width;\n              eAttachment.left = 'right';\n            }\n          } else if (left + width > bounds[2] && tAttachment.left === 'right') {\n            if (eAttachment.left === 'left') {\n              left -= targetWidth;\n              tAttachment.left = 'left';\n\n              left -= width;\n              eAttachment.left = 'right';\n            } else if (eAttachment.left === 'right') {\n              left -= targetWidth;\n              tAttachment.left = 'left';\n\n              left += width;\n              eAttachment.left = 'left';\n            }\n          } else if (tAttachment.left === 'center') {\n            if (left + width > bounds[2] && eAttachment.left === 'left') {\n              left -= width;\n              eAttachment.left = 'right';\n            } else if (left < bounds[0] && eAttachment.left === 'right') {\n              left += width;\n              eAttachment.left = 'left';\n            }\n          }\n        }\n\n        if (changeAttachY === 'element' || changeAttachY === 'both') {\n          if (top < bounds[1] && eAttachment.top === 'bottom') {\n            top += height;\n            eAttachment.top = 'top';\n          }\n\n          if (top + height > bounds[3] && eAttachment.top === 'top') {\n            top -= height;\n            eAttachment.top = 'bottom';\n          }\n        }\n\n        if (changeAttachX === 'element' || changeAttachX === 'both') {\n          if (left < bounds[0]) {\n            if (eAttachment.left === 'right') {\n              left += width;\n              eAttachment.left = 'left';\n            } else if (eAttachment.left === 'center') {\n              left += width / 2;\n              eAttachment.left = 'left';\n            }\n          }\n\n          if (left + width > bounds[2]) {\n            if (eAttachment.left === 'left') {\n              left -= width;\n              eAttachment.left = 'right';\n            } else if (eAttachment.left === 'center') {\n              left -= width / 2;\n              eAttachment.left = 'right';\n            }\n          }\n        }\n\n        if (typeof pin === 'string') {\n          pin = pin.split(',').map(function (p) {\n            return p.trim();\n          });\n        } else if (pin === true) {\n          pin = ['top', 'left', 'right', 'bottom'];\n        }\n\n        pin = pin || [];\n\n        var pinned = [];\n        var oob = [];\n\n        if (top < bounds[1]) {\n          if (pin.indexOf('top') >= 0) {\n            top = bounds[1];\n            pinned.push('top');\n          } else {\n            oob.push('top');\n          }\n        }\n\n        if (top + height > bounds[3]) {\n          if (pin.indexOf('bottom') >= 0) {\n            top = bounds[3] - height;\n            pinned.push('bottom');\n          } else {\n            oob.push('bottom');\n          }\n        }\n\n        if (left < bounds[0]) {\n          if (pin.indexOf('left') >= 0) {\n            left = bounds[0];\n            pinned.push('left');\n          } else {\n            oob.push('left');\n          }\n        }\n\n        if (left + width > bounds[2]) {\n          if (pin.indexOf('right') >= 0) {\n            left = bounds[2] - width;\n            pinned.push('right');\n          } else {\n            oob.push('right');\n          }\n        }\n\n        if (pinned.length) {\n          (function () {\n            var pinnedClass = undefined;\n            if (typeof _this.options.pinnedClass !== 'undefined') {\n              pinnedClass = _this.options.pinnedClass;\n            } else {\n              pinnedClass = _this.getClass('pinned');\n            }\n\n            addClasses.push(pinnedClass);\n            pinned.forEach(function (side) {\n              addClasses.push(pinnedClass + '-' + side);\n            });\n          })();\n        }\n\n        if (oob.length) {\n          (function () {\n            var oobClass = undefined;\n            if (typeof _this.options.outOfBoundsClass !== 'undefined') {\n              oobClass = _this.options.outOfBoundsClass;\n            } else {\n              oobClass = _this.getClass('out-of-bounds');\n            }\n\n            addClasses.push(oobClass);\n            oob.forEach(function (side) {\n              addClasses.push(oobClass + '-' + side);\n            });\n          })();\n        }\n\n        if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {\n          eAttachment.left = tAttachment.left = false;\n        }\n        if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {\n          eAttachment.top = tAttachment.top = false;\n        }\n\n        if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {\n          _this.updateAttachClasses(eAttachment, tAttachment);\n          _this.trigger('update', {\n            attachment: eAttachment,\n            targetAttachment: tAttachment\n          });\n        }\n      });\n\n      defer(function () {\n        if (!(_this.options.addTargetClasses === false)) {\n          updateClasses(_this.target, addClasses, allClasses);\n        }\n        updateClasses(_this.element, addClasses, allClasses);\n      });\n\n      return { top: top, left: left };\n    }\n  });\n  /* globals TetherBase */\n\n  'use strict';\n\n  var _TetherBase$Utils = TetherBase.Utils;\n  var getBounds = _TetherBase$Utils.getBounds;\n  var updateClasses = _TetherBase$Utils.updateClasses;\n  var defer = _TetherBase$Utils.defer;\n\n  TetherBase.modules.push({\n    position: function position(_ref) {\n      var _this = this;\n\n      var top = _ref.top;\n      var left = _ref.left;\n\n      var _cache = this.cache('element-bounds', function () {\n        return getBounds(_this.element);\n      });\n\n      var height = _cache.height;\n      var width = _cache.width;\n\n      var targetPos = this.getTargetBounds();\n\n      var bottom = top + height;\n      var right = left + width;\n\n      var abutted = [];\n      if (top <= targetPos.bottom && bottom >= targetPos.top) {\n        ['left', 'right'].forEach(function (side) {\n          var targetPosSide = targetPos[side];\n          if (targetPosSide === left || targetPosSide === right) {\n            abutted.push(side);\n          }\n        });\n      }\n\n      if (left <= targetPos.right && right >= targetPos.left) {\n        ['top', 'bottom'].forEach(function (side) {\n          var targetPosSide = targetPos[side];\n          if (targetPosSide === top || targetPosSide === bottom) {\n            abutted.push(side);\n          }\n        });\n      }\n\n      var allClasses = [];\n      var addClasses = [];\n\n      var sides = ['left', 'top', 'right', 'bottom'];\n      allClasses.push(this.getClass('abutted'));\n      sides.forEach(function (side) {\n        allClasses.push(_this.getClass('abutted') + '-' + side);\n      });\n\n      if (abutted.length) {\n        addClasses.push(this.getClass('abutted'));\n      }\n\n      abutted.forEach(function (side) {\n        addClasses.push(_this.getClass('abutted') + '-' + side);\n      });\n\n      defer(function () {\n        if (!(_this.options.addTargetClasses === false)) {\n          updateClasses(_this.target, addClasses, allClasses);\n        }\n        updateClasses(_this.element, addClasses, allClasses);\n      });\n\n      return true;\n    }\n  });\n  /* globals TetherBase */\n\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;_e = err;\n      } finally {\n        try {\n          if (!_n && _i['return']) _i['return']();\n        } finally {\n          if (_d) throw _e;\n        }\n      }return _arr;\n    }return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError('Invalid attempt to destructure non-iterable instance');\n      }\n    };\n  }();\n\n  TetherBase.modules.push({\n    position: function position(_ref) {\n      var top = _ref.top;\n      var left = _ref.left;\n\n      if (!this.options.shift) {\n        return;\n      }\n\n      var shift = this.options.shift;\n      if (typeof this.options.shift === 'function') {\n        shift = this.options.shift.call(this, { top: top, left: left });\n      }\n\n      var shiftTop = undefined,\n          shiftLeft = undefined;\n      if (typeof shift === 'string') {\n        shift = shift.split(' ');\n        shift[1] = shift[1] || shift[0];\n\n        var _shift = shift;\n\n        var _shift2 = _slicedToArray(_shift, 2);\n\n        shiftTop = _shift2[0];\n        shiftLeft = _shift2[1];\n\n        shiftTop = parseFloat(shiftTop, 10);\n        shiftLeft = parseFloat(shiftLeft, 10);\n      } else {\n        shiftTop = shift.top;\n        shiftLeft = shift.left;\n      }\n\n      top += shiftTop;\n      left += shiftLeft;\n\n      return { top: top, left: left };\n    }\n  });\n  return Tether;\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 51:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * Vue.js v2.3.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n\n\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction isUndef(v) {\n  return v === undefined || v === null;\n}\n\nfunction isDef(v) {\n  return v !== undefined && v !== null;\n}\n\nfunction isTrue(v) {\n  return v === true;\n}\n\nfunction isFalse(v) {\n  return v === false;\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive(value) {\n  return typeof value === 'string' || typeof value === 'number';\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction isRegExp(v) {\n  return _toString.call(v) === '[object RegExp]';\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString(val) {\n  return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber(val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n;\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap(str, expectsLowerCase) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase ? function (val) {\n    return map[val.toLowerCase()];\n  } : function (val) {\n    return map[val];\n  };\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove(arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind(fn, ctx) {\n  function boundFn(a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn;\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend(to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to;\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject(arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res;\n}\n\n/**\n * Perform no operation.\n */\nfunction noop() {}\n\n/**\n * Always return false.\n */\nvar no = function no() {\n  return false;\n};\n\n/**\n * Return same value\n */\nvar identity = function identity(_) {\n  return _;\n};\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys(modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || []);\n  }, []).join(',');\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual(a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b);\n    } catch (e) {\n      // possible circular reference\n      return a === b;\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b);\n  } else {\n    return false;\n  }\n}\n\nfunction looseIndexOf(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once(fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  };\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = ['component', 'directive', 'filter'];\n\nvar LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];\n\n/*  */\n\nvar config = {\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n};\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Define a property.\n */\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath(path) {\n  if (bailRE.test(path)) {\n    return;\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) {\n        return;\n      }\n      obj = obj[segments[i]];\n    }\n    return obj;\n  };\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = null; // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function classify(str) {\n    return str.replace(classifyRE, function (c) {\n      return c.toUpperCase();\n    }).replace(/[-_]/g, '');\n  };\n\n  warn = function warn(msg, vm) {\n    if (hasConsole && !config.silent) {\n      console.error(\"[Vue warn]: \" + msg + (vm ? generateComponentTrace(vm) : ''));\n    }\n  };\n\n  tip = function tip(msg, vm) {\n    if (hasConsole && !config.silent) {\n      console.warn(\"[Vue tip]: \" + msg + (vm ? generateComponentTrace(vm) : ''));\n    }\n  };\n\n  formatComponentName = function formatComponentName(vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>';\n    }\n    var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (name ? \"<\" + classify(name) + \">\" : \"<Anonymous>\") + (file && includeFile !== false ? \" at \" + file : '');\n  };\n\n  var repeat = function repeat(str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) {\n        res += str;\n      }\n      if (n > 1) {\n        str += str;\n      }\n      n >>= 1;\n    }\n    return res;\n  };\n\n  var generateComponentTrace = function generateComponentTrace(vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue;\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree.map(function (vm, i) {\n        return \"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + \"... (\" + vm[1] + \" recursive calls)\" : formatComponentName(vm));\n      }).join('\\n');\n    } else {\n      return \"\\n\\n(found in \" + formatComponentName(vm) + \")\";\n    }\n  };\n}\n\n/*  */\n\nfunction handleError(err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(\"Error in \" + info + \": \\\"\" + err.toString() + \"\\\"\", vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err;\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', {\n      get: function get() {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    }); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function isServerRendering() {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer;\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());\n}\n\nvar hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function logError(err) {\n      console.error(err);\n    };\n    timerFunc = function timerFunc() {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) {\n        setTimeout(noop);\n      }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]')) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function timerFunc() {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function timerFunc() {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick(cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      });\n    }\n  };\n}();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    function Set() {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has(key) {\n      return this.set[key] === true;\n    };\n    Set.prototype.add = function add(key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear() {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }();\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep() {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub(sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub(sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend() {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify() {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget(_target) {\n  if (Dep.target) {\n    targetStack.push(Dep.target);\n  }\n  Dep.target = _target;\n}\n\nfunction popTarget() {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) {\n      ob.observeArray(inserted);\n    }\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk(obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray(items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe(value, asRootData) {\n  if (!isObject(value)) {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1(obj, key, val, customSetter) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || newVal !== newVal && value !== value) {\n        return;\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set(target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val;\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val;\n  }\n  var ob = target.__ob__;\n  if (target._isVue || ob && ob.vmCount) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');\n    return val;\n  }\n  if (!ob) {\n    target[key] = val;\n    return val;\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del(target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return;\n  }\n  var ob = target.__ob__;\n  if (target._isVue || ob && ob.vmCount) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');\n    return;\n  }\n  if (!hasOwn(target, key)) {\n    return;\n  }\n  delete target[key];\n  if (!ob) {\n    return;\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray(value) {\n  for (var e = void 0, i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\"option \\\"\" + key + \"\\\" can only be used during instance \" + 'creation with the `new` keyword.');\n    }\n    return defaultStrat(parent, child);\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData(to, from) {\n  if (!from) {\n    return to;\n  }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook(parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, childVal) : res;\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) {\n    return Object.create(parentVal || null);\n  }\n  if (!parentVal) {\n    return childVal;\n  }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) {\n    return Object.create(parentVal || null);\n  }\n  if (!parentVal) {\n    return childVal;\n  }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents(options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps(options) {\n  var props = options.props;\n  if (!props) {\n    return;\n  }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val) ? val : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives(options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions(parent, child, vm) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) {\n    return assets[id];\n  }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) {\n    return assets[camelizedId];\n  }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) {\n    return assets[PascalCaseId];\n  }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\n/*  */\n\nfunction validateProp(key, propOptions, propsData, vm) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value;\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue(vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined;\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn('Invalid default value for prop \"' + key + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {\n    return vm._props[key];\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp(prop, name, value, vm, absent) {\n  if (prop.required && absent) {\n    warn('Missing required prop: \"' + name + '\"', vm);\n    return;\n  }\n  if (value == null && !prop.required) {\n    return;\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn('Invalid prop: type check failed for prop \"' + name + '\".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);\n    return;\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType(fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : '';\n}\n\nfunction isType(type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type);\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true;\n    }\n  }\n  /* istanbul ignore next */\n  return false;\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\n    mark = function mark(tag) {\n      return perf.mark(tag);\n    };\n    measure = function measure(name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function warnNonPresent(target, key) {\n    warn(\"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" + \"referenced during render. Make sure to declare reactive data \" + \"properties in the data option.\", target);\n  };\n\n  var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set(target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key);\n          return false;\n        } else {\n          target[key] = value;\n          return true;\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has(target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed;\n    }\n  };\n\n  var getHandler = {\n    get: function get(target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key];\n    }\n  };\n\n  initProxy = function initProxy(vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode(tag, data, children, text, elm, context, componentOptions) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance;\n};\n\nObject.defineProperties(VNode.prototype, prototypeAccessors);\n\nvar createEmptyVNode = function createEmptyVNode() {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node;\n};\n\nfunction createTextVNode(val) {\n  return new VNode(undefined, undefined, undefined, String(val));\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode(vnode) {\n  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions);\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned;\n}\n\nfunction cloneVNodes(vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res;\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  };\n});\n\nfunction createFnInvoker(fns) {\n  function invoker() {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments);\n    }\n  }\n  invoker.fns = fns;\n  return invoker;\n}\n\nfunction updateListeners(on, oldOn, add, remove$$1, vm) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\"Invalid handler for event \\\"\" + event.name + \"\\\": got \" + String(cur), vm);\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook(def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook() {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData(data, Ctor, tag) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return;\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {\n          tip(\"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" + formatComponentName(tag || Ctor) + \", but the declared prop name is\" + \" \\\"\" + key + \"\\\". \" + \"Note that HTML attributes are case-insensitive and camelCased \" + \"props need to use their kebab-case equivalents when using in-DOM \" + \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\");\n        }\n      }\n      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res;\n}\n\nfunction checkProp(res, hash, key, altKey, preserve) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true;\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren(children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children);\n    }\n  }\n  return children;\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren(children) {\n  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;\n}\n\nfunction isTextNode(node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment);\n}\n\nfunction normalizeArrayChildren(children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') {\n      continue;\n    }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + \"_\" + i));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        last.text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res;\n}\n\n/*  */\n\nfunction ensureCtor(comp, base) {\n  return isObject(comp) ? base.extend(comp) : comp;\n}\n\nfunction resolveAsyncComponent(factory, baseCtor, context) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp;\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved;\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp;\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function forceRender() {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\"Failed to resolve async component: \" + String(factory) + (reason ? \"\\nReason: \" + reason : ''));\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(process.env.NODE_ENV !== 'production' ? \"timeout (\" + res.timeout + \"ms)\" : null);\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading ? factory.loadingComp : factory.resolved;\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild(children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c;\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents(vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add(event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1(event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners(vm, listeners, oldListeners) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin(Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm;\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on() {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm;\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm;\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm;\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm;\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return vm;\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" + formatComponentName(vm) + \" but the handler is registered for \\\"\" + event + \"\\\". \" + \"Note that HTML attributes are case-insensitive and you cannot use \" + \"v-on to listen to camelCase events when using in-DOM templates. \" + \"You should probably use \\\"\" + hyphenate(event) + \"\\\" instead of \\\"\" + event + \"\\\".\");\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm;\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots(children, context) {\n  var slots = {};\n  if (!children) {\n    return slots;\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) && child.data && child.data.slot != null) {\n      var name = child.data.slot;\n      var slot = slots[name] || (slots[name] = []);\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots;\n}\n\nfunction isWhitespace(node) {\n  return node.isComment || node.text === ' ';\n}\n\nfunction resolveScopedSlots(fns, // see flow/vnode\nres) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res;\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle(vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin(Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */\n      , vm.$options._parentElm, vm.$options._refElm);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return;\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent(vm, el, hydrating) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {\n        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);\n      } else {\n        warn('Failed to mount component: template or render function not defined.', vm);\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function updateComponent() {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure(name + \" render\", startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure(name + \" patch\", startTag, endTag);\n    };\n  } else {\n    updateComponent = function updateComponent() {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm;\n}\n\nfunction updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(renderChildren || // has new static slots\n  vm.$options._renderChildren || // has old static slots\n  parentVnode.data.scopedSlots || // has new scoped slots\n  vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) {\n    // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree(vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction activateChildComponent(vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return;\n    }\n  } else if (vm._directInactive) {\n    return;\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent(vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return;\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook(vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, hook + \" hook\");\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState() {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue() {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) {\n    return a.id - b.id;\n  });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn('You may have an infinite update loop ' + (watcher.user ? \"in watcher with expression \\\"\" + watcher.expression + \"\\\"\" : \"in a component render function.\"), watcher.vm);\n        break;\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks(queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent(vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks(queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher(vm, expOrFn, cb, options) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production' ? expOrFn.toString() : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\"Failed watching path: \\\"\" + expOrFn + \"\\\" \" + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);\n    }\n  }\n  this.value = this.lazy ? undefined : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get() {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, \"getter for watcher \\\"\" + this.expression + \"\\\"\");\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value;\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep(dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps() {\n  var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update() {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run() {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated.\n    isObject(value) || this.deep) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, \"callback for watcher \\\"\" + this.expression + \"\\\"\");\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate() {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend() {\n  var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown() {\n  var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse(val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse(val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if (!isA && !isObject(val) || !Object.isExtensible(val)) {\n    return;\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return;\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) {\n      _traverse(val[i], seen);\n    }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      _traverse(val[keys[i]], seen);\n    }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy(target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter() {\n    return this[sourceKey][key];\n  };\n  sharedPropertyDefinition.set = function proxySetter(val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState(vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) {\n    initProps(vm, opts.props);\n  }\n  if (opts.methods) {\n    initMethods(vm, opts.methods);\n  }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) {\n    initComputed(vm, opts.computed);\n  }\n  if (opts.watch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps(vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function loop(key) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\", vm);\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\"Avoid mutating a prop directly since the value will be \" + \"overwritten whenever the parent component re-renders. \" + \"Instead, use a data or computed property based on the prop's \" + \"value. Prop being mutated: \\\"\" + key + \"\\\"\", vm);\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) {\n    loop(key);\n  }observerState.shouldConvert = true;\n}\n\nfunction initData(vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn('data functions should return an object:\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\"The data property \\\"\" + keys[i] + \"\\\" is already declared as a prop. \" + \"Use prop default value instead.\", vm);\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData(data, vm) {\n  try {\n    return data.call(vm);\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {};\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed(vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production') {\n      if (getter === undefined) {\n        warn(\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\", vm);\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn(\"The computed property \\\"\" + key + \"\\\" is already defined in data.\", vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn(\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\", vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed(target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get ? userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;\n    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter(key) {\n  return function computedGetter() {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    }\n  };\n}\n\nfunction initMethods(vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" + \"Did you reference the function correctly?\", vm);\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\"method \\\"\" + key + \"\\\" has already been defined as a prop.\", vm);\n      }\n    }\n  }\n}\n\nfunction initWatch(vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher(vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin(Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () {\n    return this._data;\n  };\n  var propsDef = {};\n  propsDef.get = function () {\n    return this._props;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n}\n\n/*  */\n\nfunction initProvide(vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;\n  }\n}\n\nfunction initInjections(vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\"Avoid mutating an injected value directly since the changes will be \" + \"overwritten whenever the provided component re-renders. \" + \"injection being mutated: \\\"\" + key + \"\\\"\", vm);\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject(inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray ? inject : hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break;\n        }\n        source = source.$parent;\n      }\n    }\n    return result;\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent(Ctor, propsData, data, context, children) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) {\n      mergeProps(props, data.attrs);\n    }\n    if (isDef(data.props)) {\n      mergeProps(props, data.props);\n    }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function h(a, b, c, d) {\n    return createElement(_context, a, b, c, d, true);\n  };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function slots() {\n      return resolveSlots(children, context);\n    }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode;\n}\n\nfunction mergeProps(to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init(vnode, hydrating, parentElm, refElm) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch(oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(child, options.propsData, // updated props\n    options.listeners, // updated listeners\n    vnode, // new parent vnode\n    options.children // new children\n    );\n  },\n\n  insert: function insert(vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy(vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent(Ctor, data, context, children, tag) {\n  if (isUndef(Ctor)) {\n    return;\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(\"Invalid Component definition: \" + String(Ctor), context);\n    }\n    return;\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return;\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children);\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\"vue-component-\" + Ctor.cid + (name ? \"-\" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children });\n  return vnode;\n}\n\nfunction createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't\nparent, // activeInstance in lifecycle state\nparentElm, refElm) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options);\n}\n\nfunction mergeHooks(data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1(one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  };\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel(options, data) {\n  var prop = options.model && options.model.prop || 'value';\n  var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement(context, tag, data, children, normalizationType, alwaysNormalize) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType);\n}\n\nfunction _createElement(context, tag, data, children, normalizationType) {\n  if (isDef(data) && isDef(data.__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\"Avoid using observed data object as vnode data: \" + JSON.stringify(data) + \"\\n\" + 'Always create fresh vnode data objects in each render!', context);\n    return createEmptyVNode();\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode();\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) && typeof children[0] === 'function') {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(tag, data, children, undefined, undefined, context);\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) {\n      applyNS(vnode, ns);\n    }\n    return vnode;\n  } else {\n    return createEmptyVNode();\n  }\n}\n\nfunction applyNS(vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList(val, render) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    ret._isVList = true;\n  }\n  return ret;\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot(name, fallback, props, bindObject) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) {\n    // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" + \"- this will likely cause render errors.\", this);\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback;\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter(id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity;\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes(eventKeyCode, key, builtInAlias) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1;\n  } else {\n    return keyCodes !== eventKeyCode;\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps(data, tag, value, asProp) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn('v-bind without argument expects an Object or Array value', this);\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data;\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic(index, isInFor) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, \"__static__\" + index, false);\n  return tree;\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce(tree, index, key) {\n  markStatic(tree, \"__once__\" + index + (key ? \"_\" + key : \"\"), true);\n  return tree;\n}\n\nfunction markStatic(tree, key, isOnce) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], key + \"_\" + i, isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode(node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender(vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) {\n    return createElement(vm, a, b, c, d, false);\n  };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) {\n    return createElement(vm, a, b, c, d, true);\n  };\n}\n\nfunction renderMixin(Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this);\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode;\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin(Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + vm._uid;\n      endTag = \"vue-perf-end:\" + vm._uid;\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(vm._name + \" init\", startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent(vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions(Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options;\n}\n\nfunction resolveModifiedOptions(Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) {\n        modified = {};\n      }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified;\n}\n\nfunction dedupe(latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res;\n  } else {\n    return latest;\n  }\n}\n\nfunction Vue$3(options) {\n  if (process.env.NODE_ENV !== 'production' && !(this instanceof Vue$3)) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse(Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n}\n\n/*  */\n\nfunction initMixin$1(Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this;\n  };\n}\n\n/*  */\n\nfunction initExtend(Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId];\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');\n      }\n    }\n\n    var Sub = function VueComponent(options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub;\n  };\n}\n\nfunction initProps$1(Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1(Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters(Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName(opts) {\n  return opts && (opts.Ctor.options.name || opts.tag);\n}\n\nfunction matches(pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1;\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name);\n  }\n  /* istanbul ignore next */\n  return false;\n}\n\nfunction pruneCache(cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry(vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created() {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed() {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include(val) {\n      pruneCache(this.cache, this._vnode, function (name) {\n        return matches(val, name);\n      });\n    },\n    exclude: function exclude(val) {\n      pruneCache(this.cache, this._vnode, function (name) {\n        return !matches(val, name);\n      });\n    }\n  },\n\n  render: function render() {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {\n        return vnode;\n      }\n      var key = vnode.key == null\n      // same constructor may get registered as different local components\n      // so cid alone is not enough (#3269)\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? \"::\" + componentOptions.tag : '') : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode;\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI(Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () {\n    return config;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn('Do not replace the Vue.config object, set individual fields instead.');\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get() {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext;\n  }\n});\n\nVue$3.version = '2.3.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function mustUseProp(tag, type, attr) {\n  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function isXlink(name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\n};\n\nvar getXlinkProp = function getXlinkProp(name) {\n  return isXlink(name) ? name.slice(6, name.length) : '';\n};\n\nvar isFalsyAttrValue = function isFalsyAttrValue(val) {\n  return val == null || val === false;\n};\n\n/*  */\n\nfunction genClassForVnode(vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data);\n}\n\nfunction mergeClassData(child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class) ? [child.class, parent.class] : parent.class\n  };\n}\n\nfunction genClassFromData(data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass));\n  }\n  /* istanbul ignore next */\n  return '';\n}\n\nfunction concat(a, b) {\n  return a ? b ? a + ' ' + b : a : b || '';\n}\n\nfunction stringifyClass(value) {\n  if (isUndef(value)) {\n    return '';\n  }\n  if (typeof value === 'string') {\n    return value;\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1);\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) {\n        res += key + ' ';\n      }\n    }\n    return res.slice(0, -1);\n  }\n  /* istanbul ignore next */\n  return res;\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template');\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\n\nvar isPreTag = function isPreTag(tag) {\n  return tag === 'pre';\n};\n\nvar isReservedTag = function isReservedTag(tag) {\n  return isHTMLTag(tag) || isSVG(tag);\n};\n\nfunction getTagNamespace(tag) {\n  if (isSVG(tag)) {\n    return 'svg';\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math';\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement(tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true;\n  }\n  if (isReservedTag(tag)) {\n    return false;\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag];\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n  } else {\n    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + el);\n      return document.createElement('div');\n    }\n    return selected;\n  } else {\n    return el;\n  }\n}\n\n/*  */\n\nfunction createElement$1(tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm;\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm;\n}\n\nfunction createElementNS(namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName);\n}\n\nfunction createTextNode(text) {\n  return document.createTextNode(text);\n}\n\nfunction createComment(text) {\n  return document.createComment(text);\n}\n\nfunction insertBefore(parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild(node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild(node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode(node) {\n  return node.parentNode;\n}\n\nfunction nextSibling(node) {\n  return node.nextSibling;\n}\n\nfunction tagName(node) {\n  return node.tagName;\n}\n\nfunction setTextContent(node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute(node, key, val) {\n  node.setAttribute(key, val);\n}\n\nvar nodeOps = Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create(_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update(oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy(vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef(vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) {\n    return;\n  }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode(a, b) {\n  return a.key === b.key && a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b);\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType(a, b) {\n  if (a.tag !== 'input') {\n    return true;\n  }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB;\n}\n\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) {\n      map[key] = i;\n    }\n  }\n  return map;\n}\n\nfunction createPatchFunction(backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt(elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\n  }\n\n  function createRmCb(childElm, listeners) {\n    function remove$$1() {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1;\n  }\n\n  function removeNode(el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return;\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.', vnode.context);\n        }\n      }\n      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true;\n      }\n    }\n  }\n\n  function initComponent(vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break;\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert(parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren(vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable(vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag);\n  }\n\n  function invokeCreateHooks(vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) {\n        i.create(emptyNode, vnode);\n      }\n      if (isDef(i.insert)) {\n        insertedVnodeQueue.push(vnode);\n      }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope(vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook(vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) {\n        i(vnode);\n      }\n      for (i = 0; i < cbs.destroy.length; ++i) {\n        cbs.destroy[i](vnode);\n      }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else {\n          // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook(vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) {\n        // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) {\n        // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) {\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n        }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) {\n          // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return;\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return;\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) {\n        cbs.update[i](oldVnode, vnode);\n      }\n      if (isDef(i = data.hook) && isDef(i = i.update)) {\n        i(oldVnode, vnode);\n      }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) {\n          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n        }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) {\n          nodeOps.setTextContent(elm, '');\n        }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\n        i(oldVnode, vnode);\n      }\n    }\n  }\n\n  function invokeInsertHook(vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate(elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false;\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) {\n        i(vnode, true /* hydrating */);\n      }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true;\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break;\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined' && !bailed) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false;\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break;\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true;\n  }\n\n  function assertNodeMatch(node, vnode) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3);\n    }\n  }\n\n  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) {\n        invokeDestroyHook(oldVnode);\n      }\n      return;\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode;\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(vnode, insertedVnodeQueue,\n        // extremely rare edge case: do not insert if old element is in a\n        // leaving transition. Only happens when combining transition +\n        // keep-alive + HOCs. (#4590)\n        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm;\n  };\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives(vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives(oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update(oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function callInsert() {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1(dirs, vm) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res;\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res;\n}\n\nfunction getRawDirName(dir) {\n  return dir.rawName || dir.name + \".\" + Object.keys(dir.modifiers || {}).join('.');\n}\n\nfunction callHook$1(dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, \"directive \" + dir.name + \" \" + hook + \" hook\");\n    }\n  }\n}\n\nvar baseModules = [ref, directives];\n\n/*  */\n\nfunction updateAttrs(oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return;\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr(el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass(oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {\n    return;\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters(exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) {\n        inSingle = false;\n      }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) {\n        inDouble = false;\n      }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) {\n        inTemplateString = false;\n      }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) {\n        inRegex = false;\n      }\n    } else if (c === 0x7C && // pipe\n    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22:\n          inDouble = true;break; // \"\n        case 0x27:\n          inSingle = true;break; // '\n        case 0x60:\n          inTemplateString = true;break; // `\n        case 0x28:\n          paren++;break; // (\n        case 0x29:\n          paren--;break; // )\n        case 0x5B:\n          square++;break; // [\n        case 0x5D:\n          square--;break; // ]\n        case 0x7B:\n          curly++;break; // {\n        case 0x7D:\n          curly--;break; // }\n      }\n      if (c === 0x2f) {\n        // /\n        var j = i - 1;\n        var p = void 0;\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') {\n            break;\n          }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter() {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression;\n}\n\nfunction wrapFilter(exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return \"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\";\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return \"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args;\n  }\n}\n\n/*  */\n\nfunction baseWarn(msg) {\n  console.error(\"[Vue compiler]: \" + msg);\n}\n\nfunction pluckModuleFunction(modules, key) {\n  return modules ? modules.map(function (m) {\n    return m[key];\n  }).filter(function (_) {\n    return _;\n  }) : [];\n}\n\nfunction addProp(el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr(el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective(el, name, rawName, value, arg, modifiers) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler(el, name, value, modifiers, important, warn) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && warn && modifiers && modifiers.prevent && modifiers.passive) {\n    warn('passive and prevent can\\'t be used together. ' + 'Passive handler can\\'t prevent default event.');\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr(el, name, getStatic) {\n  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue);\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue);\n    }\n  }\n}\n\nfunction getAndRemoveAttr(el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break;\n      }\n    }\n  }\n  return val;\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel(el, value, modifiers) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression = \"(typeof \" + baseValueExpression + \" === 'string'\" + \"? \" + baseValueExpression + \".trim()\" + \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: \"(\" + value + \")\",\n    expression: \"\\\"\" + value + \"\\\"\",\n    callback: \"function (\" + baseValueExpression + \") {\" + assignment + \"}\"\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode(value, assignment) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return value + \"=\" + assignment;\n  } else {\n    return \"var $$exp = \" + modelRs.exp + \", $$idx = \" + modelRs.idx + \";\" + \"if (!Array.isArray($$exp)){\" + value + \"=\" + assignment + \"}\" + \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\";\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel(val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    };\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  };\n}\n\nfunction next() {\n  return str.charCodeAt(++index$1);\n}\n\nfunction eof() {\n  return index$1 >= len;\n}\n\nfunction isStringStart(chr) {\n  return chr === 0x22 || chr === 0x27;\n}\n\nfunction parseBracket(chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue;\n    }\n    if (chr === 0x5B) {\n      inBracket++;\n    }\n    if (chr === 0x5D) {\n      inBracket--;\n    }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break;\n    }\n  }\n}\n\nfunction parseString(chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model(el, dir, _warn) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" + \"v-model does not support dynamic input types. Use v-if branches instead.\");\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" + \"File inputs are read only. Use a v-on:change listener instead.\");\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false;\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\">: \" + \"v-model is not supported on this element type. \" + 'If you are working with contenteditable, it\\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');\n  }\n\n  // ensure runtime directive metadata\n  return true;\n}\n\nfunction genCheckboxModel(el, value, modifiers) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked', \"Array.isArray(\" + value + \")\" + \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (trueValueBinding === 'true' ? \":(\" + value + \")\" : \":_q(\" + value + \",\" + trueValueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, \"var $$a=\" + value + \",\" + '$$el=$event.target,' + \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" + 'if(Array.isArray($$a)){' + \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" + '$$i=_i($$a,$$v);' + \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" + \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" + \"}else{\" + genAssignmentCode(value, '$$c') + \"}\", null, true);\n}\n\nfunction genRadioModel(el, value, modifiers) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? \"_n(\" + valueBinding + \")\" : valueBinding;\n  addProp(el, 'checked', \"_q(\" + value + \",\" + valueBinding + \")\");\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect(el, value, modifiers) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" + \".call($event.target.options,function(o){return o.selected})\" + \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" + \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + genAssignmentCode(value, assignment);\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel(el, value, modifiers) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', \"(\" + value + \")\");\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents(on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1(event, _handler, once$$1, capture, passive) {\n  if (once$$1) {\n    var oldHandler = _handler;\n    var _target = target$1; // save current target element in closure\n    _handler = function handler(ev) {\n      var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, _handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);\n}\n\nfunction remove$2(event, handler, capture, _target) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners(oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return;\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps(oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return;\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) {\n        vnode.children.length = 0;\n      }\n      if (cur === oldProps[key]) {\n        continue;\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue(elm, vnode, checkVal) {\n  return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));\n}\n\nfunction isDirty(elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal;\n}\n\nfunction isInputChanged(elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers) && modifiers.number || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal);\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim();\n  }\n  return value !== newVal;\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res;\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData(data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle ? extend(data.staticStyle, style) : style;\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding(bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle);\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle);\n  }\n  return bindingStyle;\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle(vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if (styleData = normalizeStyleData(vnode.data)) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while (parentNode = parentNode.parent) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res;\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function setProp(el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && prop in testEl.style) {\n    return prop;\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed;\n    }\n  }\n});\n\nfunction updateStyle(oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {\n    return;\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass(el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) {\n        return el.classList.add(c);\n      });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass(el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return;\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) {\n        return el.classList.remove(c);\n      });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition(def$$1) {\n  if (!def$$1) {\n    return;\n  }\n  /* istanbul ignore else */\n  if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res;\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1);\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: name + \"-enter\",\n    enterToClass: name + \"-enter-to\",\n    enterActiveClass: name + \"-enter-active\",\n    leaveClass: name + \"-leave\",\n    leaveToClass: name + \"-leave-to\",\n    leaveActiveClass: name + \"-leave-active\"\n  };\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;\n\nfunction nextFrame(fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass(el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass(el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds(el, expectedType, cb) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) {\n    return cb();\n  }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function end() {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function onEnd(e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo(el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n  }\n  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  };\n}\n\nfunction getTimeout(delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i]);\n  }));\n}\n\nfunction toMs(s) {\n  return Number(s.slice(0, -1)) * 1000;\n}\n\n/*  */\n\nfunction enter(vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return;\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return;\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return;\n  }\n\n  var startClass = isAppear && appearClass ? appearClass : enterClass;\n  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;\n  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;\n\n  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\n  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;\n  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\n  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;\n\n  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave(vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm();\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return;\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave() {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return;\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration(val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\"<transition> explicit \" + name + \" duration is not a valid number - \" + \"got \" + JSON.stringify(val) + \".\", vnode.context);\n  } else if (isNaN(val)) {\n    warn(\"<transition> explicit \" + name + \" duration is NaN - \" + 'the duration expression might be incorrect.', vnode.context);\n  }\n}\n\nfunction isValidDuration(val) {\n  return typeof val === 'number' && !isNaN(val);\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength(fn) {\n  if (isUndef(fn)) {\n    return false;\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);\n  } else {\n    return (fn._length || fn.length) > 1;\n  }\n}\n\nfunction _enter(_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1(vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [attrs, klass, events, domProps, style, transition];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted(el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function cb() {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated(el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple ? binding.value.some(function (v) {\n        return hasNoMatchingOption(v, el.options);\n      }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected(el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\"<select multiple v-model=\\\"\" + binding.expression + \"\\\"> \" + \"expects an Array value for its binding, but got \" + Object.prototype.toString.call(value).slice(8, -1), vm);\n    return;\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return;\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption(value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getValue(option) {\n  return '_value' in option ? option._value : option.value;\n}\n\nfunction onCompositionStart(e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd(e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) {\n    return;\n  }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger(el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode(vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;\n}\n\nvar show = {\n  bind: function bind(el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update(el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) {\n      return;\n    }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild(vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children));\n  } else {\n    return vnode;\n  }\n}\n\nfunction extractTransitionData(comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data;\n}\n\nfunction placeholder(h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    });\n  }\n}\n\nfunction hasParentTransition(vnode) {\n  while (vnode = vnode.parent) {\n    if (vnode.data.transition) {\n      return true;\n    }\n  }\n}\n\nfunction isSameChild(child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag;\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render(h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return;\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) {\n      return c.tag;\n    });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return;\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {\n      warn('invalid <transition> mode: ' + mode, this.$parent);\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild;\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild;\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild);\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + this._uid + \"-\";\n    child.key = child.key == null ? id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) {\n      return d.name === 'show';\n    })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild);\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function performLeave() {\n          delayedLeave();\n        };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n          delayedLeave = leave;\n        });\n      }\n    }\n\n    return rawChild;\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render(h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;\n          warn(\"<transition-group> children must be keyed: <\" + name + \">\");\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children);\n  },\n\n  beforeUpdate: function beforeUpdate() {\n    // force removing pass\n    this.__patch__(this._vnode, this.kept, false, // hydrating\n    true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated() {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || (this.name || 'v') + '-move';\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return;\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove(el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false;\n      }\n      if (this._hasMove != null) {\n        return this._hasMove;\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) {\n          removeClass(clone, cls);\n        });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return this._hasMove = info.hasTransform;\n    }\n  }\n};\n\nfunction callPendingCbs(c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition(c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation(c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (el, hydrating) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating);\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {\n    console[console.info ? 'info' : 'log'](\"You are running Vue in development mode.\\n\" + \"Make sure to turn on production mode when deploying for production.\\n\" + \"See more tips at https://vuejs.org/guide/deployment.html\");\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode(content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0;\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');\n\n/*  */\n\nvar decoder;\n\nfunction decode(html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent;\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n// attr value double quotes\n/\"([^\"]*)\"+/.source,\n// attr value, single quotes\n/'([^']*)'+/.source,\n// attr value, no quotes\n/([^\\s\"'=<>`]+)/.source];\nvar attribute = new RegExp('^\\\\s*' + singleAttrIdentifier.source + '(?:\\\\s*(' + singleAttrAssign.source + ')' + '\\\\s*(?:' + singleAttrValues.join('|') + '))?');\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr(value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) {\n    return decodingMap[match];\n  });\n}\n\nfunction parseHTML(html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue;\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue;\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue;\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue;\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue;\n        }\n      }\n\n      var text = void 0,\n          rest$1 = void 0,\n          next = void 0;\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (!endTag.test(rest$1) && !startTagOpen.test(rest$1) && !comment.test(rest$1) && !conditionalComment.test(rest$1)) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) {\n            break;\n          }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text.replace(/<!--([\\s\\S]*?)-->/g, '$1').replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return '';\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn(\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\");\n      }\n      break;\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance(n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag() {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match;\n      }\n    }\n  }\n\n  function handleStartTag(match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') {\n          delete args[3];\n        }\n        if (args[4] === '') {\n          delete args[4];\n        }\n        if (args[5] === '') {\n          delete args[5];\n        }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, options.shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag(tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) {\n      start = index;\n    }\n    if (end == null) {\n      end = index;\n    }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break;\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' && (i > pos || !tagName) && options.warn) {\n          options.warn(\"tag <\" + stack[i].tag + \"> has no matching end tag.\");\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\n});\n\nfunction parseText(text, delimiters) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while (match = tagRE.exec(text)) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push(\"_s(\" + exp + \")\");\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+');\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse(template, options) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce(msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre(element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start(tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + \"<\" + tag + \">\" + ', as they will not be parsed.');\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints(el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\"Cannot use <\" + el.tag + \"> as component root element because it may \" + 'contain multiple nodes.');\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\"Component template should contain exactly one root element. \" + \"If you are using v-if on multiple elements, \" + \"use v-else-if to chain them instead.\");\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) {\n          // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end() {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars(text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce('Component template requires a root element, rather than just text.');\n          } else if (text = text.trim()) {\n            warnOnce(\"text \\\"\" + text + \"\\\" outside root element will be ignored.\");\n          }\n        }\n        return;\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {\n        return;\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n      // only preserve whitespace if its not right after a starting tag\n      : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root;\n}\n\nfunction processPre(el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs(el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey(el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef(el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor(el) {\n  var exp;\n  if (exp = getAndRemoveAttr(el, 'v-for')) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$2(\"Invalid v-for expression: \" + exp);\n      return;\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf(el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions(el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\"v-\" + (el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else') + \" \" + \"used on element <\" + el.tag + \"> without corresponding v-if.\");\n  }\n}\n\nfunction findPrevElement(children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i];\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\"text \\\"\" + children[i].text.trim() + \"\\\" between v-if and v-else(-if) \" + \"will be ignored.\");\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition(el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce(el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot(el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\"`key` does not work on <slot> because slots are abstract outlets \" + \"and can possibly expand into multiple elements. \" + \"Use the key on a wrapping element instead.\");\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent(el) {\n  var binding;\n  if (binding = getBindingAttr(el, 'is')) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs(el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) {\n        // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') {\n              name = 'innerHTML';\n            }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(el, \"update:\" + camelize(name), genAssignmentCode(value, \"$event\"));\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) {\n        // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else {\n        // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(name + \"=\\\"\" + value + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.');\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor(el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction parseModifiers(name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) {\n      ret[m.slice(1)] = true;\n    });\n    return ret;\n  }\n}\n\nfunction makeAttrsMap(attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map;\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag(el) {\n  return el.tag === 'script' || el.tag === 'style';\n}\n\nfunction isForbiddenTag(el) {\n  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug(attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res;\n}\n\nfunction checkForAliasModel(el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\"<\" + el.tag + \" v-model=\\\"\" + value + \"\\\">: \" + \"You are binding v-model directly to a v-for iteration alias. \" + \"This will not be able to modify the v-for source array because \" + \"writing to the alias is like modifying a function local variable. \" + \"Consider using an array of objects and use v-model on an object property instead.\");\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize(root, options) {\n  if (!root) {\n    return;\n  }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1(keys) {\n  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));\n}\n\nfunction markStatic$1(node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {\n      return;\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots(node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {\n      node.staticRoot = true;\n      return;\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks(conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic(node) {\n  if (node.type === 2) {\n    // expression\n    return false;\n  }\n  if (node.type === 3) {\n    // text\n    return true;\n  }\n  return !!(node.pre || !node.hasBindings && // no dynamic bindings\n  !node.if && !node.for && // not v-if or v-for or v-else\n  !isBuiltInTag(node.tag) && // not a built-in\n  isPlatformReservedTag(node.tag) && // not a component\n  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));\n}\n\nfunction isDirectChildOfTemplateFor(node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false;\n    }\n    if (node.for) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function genGuard(condition) {\n  return \"if(\" + condition + \")return null;\";\n};\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers(events, isNative, warn) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (process.env.NODE_ENV !== 'production' && name === 'click' && handler && handler.modifiers && handler.modifiers.right) {\n      warn(\"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" + \"do not actually fire \\\"click\\\" events.\");\n    }\n    res += \"\\\"\" + name + \"\\\":\" + genHandler(name, handler) + \",\";\n  }\n  return res.slice(0, -1) + '}';\n}\n\nfunction genHandler(name, handler) {\n  if (!handler) {\n    return 'function(){}';\n  }\n\n  if (Array.isArray(handler)) {\n    return \"[\" + handler.map(function (handler) {\n      return genHandler(name, handler);\n    }).join(',') + \"]\";\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression ? handler.value : \"function($event){\" + handler.value + \"}\"; // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath ? handler.value + '($event)' : isFunctionExpression ? \"(\" + handler.value + \")($event)\" : handler.value;\n    return \"function($event){\" + code + handlerCode + \"}\";\n  }\n}\n\nfunction genKeyFilter(keys) {\n  return \"if(!('button' in $event)&&\" + keys.map(genFilterCode).join('&&') + \")return null;\";\n}\n\nfunction genFilterCode(key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return \"$event.keyCode!==\" + keyVal;\n  }\n  var alias = keyCodes[key];\n  return \"_k($event.keyCode,\" + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + \")\";\n}\n\n/*  */\n\nfunction bind$1(el, dir) {\n  el.wrapData = function (code) {\n    return \"_b(\" + code + \",'\" + el.tag + \"',\" + dir.value + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\";\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate(ast, options) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: \"with(this){return \" + code + \"}\",\n    staticRenderFns: currentStaticRenderFns\n  };\n}\n\nfunction genElement(el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el);\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el);\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el);\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el);\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0';\n  } else if (el.tag === 'slot') {\n    return genSlot(el);\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + el.tag + \"'\" + (data ? \",\" + data : '') + (children ? \",\" + children : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code;\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic(el) {\n  el.staticProcessed = true;\n  staticRenderFns.push(\"with(this){return \" + genElement(el) + \"}\");\n  return \"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\";\n}\n\n// v-once\nfunction genOnce(el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el);\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break;\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && warn$3(\"v-once can only be used inside v-for that is keyed. \");\n      return genElement(el);\n    }\n    return \"_o(\" + genElement(el) + \",\" + onceCount++ + (key ? \",\" + key : \"\") + \")\";\n  } else {\n    return genStatic(el);\n  }\n}\n\nfunction genIf(el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice());\n}\n\nfunction genIfConditions(conditions) {\n  if (!conditions.length) {\n    return '_e()';\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return \"(\" + condition.exp + \")?\" + genTernaryExp(condition.block) + \":\" + genIfConditions(conditions);\n  } else {\n    return \"\" + genTernaryExp(condition.block);\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp(el) {\n    return el.once ? genOnce(el) : genElement(el);\n  }\n}\n\nfunction genFor(el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? \",\" + el.iterator1 : '';\n  var iterator2 = el.iterator2 ? \",\" + el.iterator2 : '';\n\n  if (process.env.NODE_ENV !== 'production' && maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {\n    warn$3(\"<\" + el.tag + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" + \"v-for should have explicit keys. \" + \"See https://vuejs.org/guide/list.html#key for more info.\", true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" + \"function(\" + alias + iterator1 + iterator2 + \"){\" + \"return \" + genElement(el) + '})';\n}\n\nfunction genData(el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) {\n    data += dirs + ',';\n  }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + el.key + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + el.ref + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + el.tag + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + genProps(el.attrs) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + genProps(el.props) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += genHandlers(el.events, false, warn$3) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += genHandlers(el.nativeEvents, true, warn$3) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + el.slotTarget + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += genScopedSlots(el.scopedSlots) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + el.model.value + \",callback:\" + el.model.callback + \",expression:\" + el.model.expression + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data;\n}\n\nfunction genDirectives(el) {\n  var dirs = el.directives;\n  if (!dirs) {\n    return;\n  }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + dir.name + \"\\\",rawName:\\\"\" + dir.rawName + \"\\\"\" + (dir.value ? \",value:(\" + dir.value + \"),expression:\" + JSON.stringify(dir.value) : '') + (dir.arg ? \",arg:\\\"\" + dir.arg + \"\\\"\" : '') + (dir.modifiers ? \",modifiers:\" + JSON.stringify(dir.modifiers) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']';\n  }\n}\n\nfunction genInlineTemplate(el) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (el.children.length > 1 || ast.type !== 1)) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return \"inlineTemplate:{render:function(){\" + inlineRenderFns.render + \"},staticRenderFns:[\" + inlineRenderFns.staticRenderFns.map(function (code) {\n      return \"function(){\" + code + \"}\";\n    }).join(',') + \"]}\";\n  }\n}\n\nfunction genScopedSlots(slots) {\n  return \"scopedSlots:_u([\" + Object.keys(slots).map(function (key) {\n    return genScopedSlot(key, slots[key]);\n  }).join(',') + \"])\";\n}\n\nfunction genScopedSlot(key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el);\n  }\n  return \"{key:\" + key + \",fn:function(\" + String(el.attrsMap.scope) + \"){\" + \"return \" + (el.tag === 'template' ? genChildren(el) || 'void 0' : genElement(el)) + \"}}\";\n}\n\nfunction genForScopedSlot(key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? \",\" + el.iterator1 : '';\n  var iterator2 = el.iterator2 ? \",\" + el.iterator2 : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" + \"function(\" + alias + iterator1 + iterator2 + \"){\" + \"return \" + genScopedSlot(key, el) + '})';\n}\n\nfunction genChildren(el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {\n      return genElement(el$1);\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return \"[\" + children.map(genNode).join(',') + \"]\" + (normalizationType ? \",\" + normalizationType : '');\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType(children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue;\n    }\n    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {\n      return needsNormalization(c.block);\n    })) {\n      res = 2;\n      break;\n    }\n    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {\n      return maybeComponent(c.block);\n    })) {\n      res = 1;\n    }\n  }\n  return res;\n}\n\nfunction needsNormalization(el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\n}\n\nfunction maybeComponent(el) {\n  return !isPlatformReservedTag$1(el.tag);\n}\n\nfunction genNode(node) {\n  if (node.type === 1) {\n    return genElement(node);\n  } else {\n    return genText(node);\n  }\n}\n\nfunction genText(text) {\n  return \"_v(\" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()\n  : transformSpecialNewlines(JSON.stringify(text.text))) + \")\";\n}\n\nfunction genSlot(el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? \",\" + children : '');\n  var attrs = el.attrs && \"{\" + el.attrs.map(function (a) {\n    return camelize(a.name) + \":\" + a.value;\n  }).join(',') + \"}\";\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')';\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent(componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return \"_c(\" + componentName + \",\" + genData(el) + (children ? \",\" + children : '') + \")\";\n}\n\nfunction genProps(props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + prop.name + \"\\\":\" + transformSpecialNewlines(prop.value) + \",\";\n  }\n  return res.slice(0, -1);\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines(text) {\n  return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + 'delete,typeof,void'.split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors(ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors;\n}\n\nfunction checkNode(node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, \"v-for=\\\"\" + value + \"\\\"\", errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, name + \"=\\\"\" + value + \"\\\"\", errors);\n          } else {\n            checkExpression(value, name + \"=\\\"\" + value + \"\\\"\", errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent(exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\"avoid using JavaScript unary operator as property name: \" + \"\\\"\" + keywordMatch[0] + \"\\\" in expression \" + text.trim());\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor(node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier(ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push(\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + text.trim());\n  }\n}\n\nfunction checkExpression(exp, text, errors) {\n  try {\n    new Function(\"return \" + exp);\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\"avoid using JavaScript keyword as property name: \" + \"\\\"\" + keywordMatch[0] + \"\\\" in expression \" + text.trim());\n    } else {\n      errors.push(\"invalid expression: \" + text.trim());\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile(template, options) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  };\n}\n\nfunction makeFunction(code, errors) {\n  try {\n    return new Function(code);\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop;\n  }\n}\n\nfunction createCompiler(baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile(template, options) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(Object.create(baseOptions.directives), options.directives);\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (process.env.NODE_ENV !== 'production') {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled;\n  }\n\n  function compileToFunctions(template, options, vm) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters ? String(options.delimiters) + template : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key];\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\"Error compiling template:\\n\\n\" + template + \"\\n\\n\" + compiled.errors.map(function (e) {\n          return \"- \" + e;\n        }).join('\\n') + '\\n', vm);\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) {\n          return tip(msg, vm);\n        });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\"Failed to generate render function:\\n\\n\" + fnGenErrors.map(function (ref) {\n          var err = ref.err;\n          var code = ref.code;\n\n          return err.toString() + \" in\\n\\n\" + code + \"\\n\";\n        }).join('\\n'), vm);\n      }\n    }\n\n    return functionCompileCache[key] = res;\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  };\n}\n\n/*  */\n\nfunction transformNode(el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\"class=\\\"\" + staticClass + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.');\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1(el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + el.staticClass + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + el.classBinding + \",\";\n  }\n  return data;\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1(el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\"style=\\\"\" + staticStyle + \"\\\": \" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.');\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2(el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + el.staticStyle + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + el.styleBinding + \"),\";\n  }\n  return data;\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [klass$1, style$1];\n\n/*  */\n\nfunction text(el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', \"_s(\" + dir.value + \")\");\n  }\n}\n\n/*  */\n\nfunction html(el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', \"_s(\" + dir.value + \")\");\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML;\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (el, hydrating) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\");\n    return this;\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\"Template element not found or is empty: \" + options.template, this);\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this;\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure(this._name + \" compile\", 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating);\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nmodule.exports = Vue$3;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(66), __webpack_require__(83)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 543:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(51);
__webpack_require__(131);
__webpack_require__(132);
module.exports = __webpack_require__(85);


/***/ }),

/***/ 66:
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n})();\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n    return [];\n};\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n    return '/';\n};\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () {\n    return 0;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 85:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tether__ = __webpack_require__(469);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tether___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_tether__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction omitLinkProps() {\n  for (var t = [], e = arguments.length; e--;) {\n    t[e] = arguments[e];\n  }return Object.keys(props).reduce(function (e, n) {\n    return t.includes(n) || (e[n] = props[n]), e;\n  }, {});\n}function isVisible(t) {\n  return t && (t.offsetWidth > 0 || t.offsetHeight > 0);\n}function findFirstVisible(t, e) {\n  if (!t || !t.querySelectorAll || !e) return null;for (var n = Array.prototype.slice.call(t.querySelectorAll(e)), i = n.find ? n.find(function (t) {\n    return isVisible(t);\n  }) : null, o = 0; !i && o < n.length; o++) {\n    isVisible(n[o]) && (i = n[o]);\n  }return i;\n}function isVisible$1(t) {\n  return t && (t.offsetWidth > 0 || t.offsetHeight > 0);\n}function makePageArray(t, e) {\n  return Array.apply(null, { length: e }).map(function (e, n) {\n    return { number: n + t, className: null };\n  });\n}function observeDOM(t, e, n) {\n  var i = window.MutationObserver || window.WebKitMutationObserver,\n      o = window.addEventListener;i ? new i(function (t) {\n    (t[0].addedNodes.length > 0 || t[0].removedNodes.length > 0) && e();\n  }).observe(t, Object.assign({ childList: !0, subtree: !0 }, n)) : o && (t.addEventListener(\"DOMNodeInserted\", e, !1), t.addEventListener(\"DOMNodeRemoved\", e, !1));\n}function targets(t, e, n, i) {\n  var o = t.__vue__;if (!o) return console.warn(\"__vue__ is not available on element\", t), [];var r = Object.keys(e.modifiers || {}).filter(function (t) {\n    return !all_listen_types[t];\n  });e.value && r.push(e.value);var s = function s() {\n    i({ targets: r, vm: o });\n  };return Object.keys(all_listen_types).forEach(function (i) {\n    (n[i] || e.modifiers[i]) && t.addEventListener(i, s);\n  }), r;\n}function isElement(t) {\n  return t.nodeType;\n}function closest(t, e) {\n  var n = t.closest(e);return n === t ? null : n;\n}function $QSA(t, e) {\n  return e || (e = document), isElement(e) ? Array.prototype.slice.call(e.querySelectorAll(t)) : [];\n}function $QS(t, e) {\n  return e || (e = document), isElement(e) ? e.querySelector(t) || null : null;\n}function getVm(t) {\n  return t ? t.__vue__ : null;\n}function toType(t) {\n  return {}.toString.call(t).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}function typeCheckConfig(t, e, n) {\n  for (var i in n) {\n    if (Object.prototype.hasOwnProperty.call(n, i)) {\n      var o = n[i],\n          r = e[i],\n          s = r && isElement(r) ? \"element\" : toType(r);new RegExp(o).test(s) || console.error(t + ': Option \"' + i + '\" provided type \"' + s + '\" but expected type \"' + o + '\"');\n    }\n  }\n}function ScrollSpy(t, e) {\n  this._$el = t, this._selector = [Selector.NAV_LINKS, Selector.LIST_ITEMS, Selector.DROPDOWN_ITEMS].join(\",\"), this._config = Object.assign({}, Default), this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, this._$root = null, this._resizeTimeout = null, this.updateConfig(e);\n}var warn = function warn(t) {\n  console.warn(\"[Bootstrap-Vue warn]: \" + t);\n},\n    alert = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return t.localShow ? n(\"div\", { class: t.classObject, attrs: { role: \"alert\", \"aria-live\": \"polite\", \"aria-atomic\": \"true\" } }, [t.dismissible ? n(\"button\", { staticClass: \"close\", attrs: { type: \"button\", \"data-dismiss\": \"alert\", \"aria-label\": \"dismissLabel\" }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.dismiss(e);\n        } } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" } }, [t._v(\"×\")])]) : t._e(), t._t(\"default\")], 2) : t._e();\n  }, staticRenderFns: [], data: function data() {\n    return { countDownTimerId: null, dismissed: !1 };\n  }, created: function created() {\n    this.state && warn('<b-alert> \"state\" property is deprecated, please use \"variant\" property instead.');\n  }, computed: { classObject: function classObject() {\n      return [\"alert\", this.alertVariant, this.dismissible ? \"alert-dismissible\" : \"\"];\n    }, alertVariant: function alertVariant() {\n      return \"alert-\" + (this.state || this.variant || \"info\");\n    }, localShow: function localShow() {\n      return !this.dismissed && (this.countDownTimerId || this.show);\n    } }, props: { variant: { type: String, default: \"info\" }, state: { type: String, default: null }, dismissible: { type: Boolean, default: !1 }, dismissLabel: { type: String, default: \"Close\" }, show: { type: [Boolean, Number], default: !1 } }, watch: { show: function show() {\n      this.showChanged();\n    } }, mounted: function mounted() {\n    this.showChanged();\n  }, methods: { dismiss: function dismiss() {\n      this.dismissed = !0, this.$emit(\"dismissed\"), this.clearCounter();\n    }, clearCounter: function clearCounter() {\n      this.countDownTimerId && clearInterval(this.countDownTimerId);\n    }, showChanged: function showChanged() {\n      var t = this;if (this.dismissed = !1, !0 !== this.show && !1 !== this.show && null !== this.show && 0 !== this.show) {\n        var e = this.show;this.$emit(\"dismiss-count-down\", e), this.clearCounter(), this.countDownTimerId = setInterval(function () {\n          if (e < 2) return t.dismiss();e--, t.$emit(\"dismiss-count-down\", e);\n        }, 1e3);\n      }\n    } } },\n    props = { active: { type: Boolean, default: !1 }, activeClass: { type: String, default: \"active\" }, append: { type: Boolean, default: !1 }, disabled: { type: Boolean, default: !1 }, event: { type: [String, Array], default: \"click\" }, exact: { type: Boolean, default: !1 }, exactActiveClass: { type: String, default: \"active\" }, href: { type: String, default: \"#\" }, rel: { type: String, default: null }, replace: { type: Boolean, default: !1 }, routerTag: { type: String, default: \"a\" }, tag: { type: String, default: null }, target: { type: String, default: \"_self\" }, to: { type: [String, Object], default: null } },\n    computed = { linkProps: function linkProps() {\n    var t = this;return Object.keys(props).reduce(function (e, n) {\n      return e[n] = t[n], e;\n    }, {});\n  }, isRouterLink: function isRouterLink() {\n    return Boolean(this.$router && this.to && !this.disabled);\n  }, _href: function _href() {\n    return this.disabled ? \"#\" : this.href ? this.href : this.to && \"string\" == typeof this.to ? this.to : void 0;\n  }, computedRel: function computedRel() {\n    return \"_blank\" === this.target && null === this.rel ? \"noopener\" : this.rel || null;\n  }, componentTag: function componentTag() {\n    return this.tag ? (warn('<b-link> \"tag\" property is deprecated, please use \"routerTag\" property instead.'), this.tag) : this.routerTag;\n  }, linkClassObject: function linkClassObject() {\n    return [this.active ? this.exact ? this.exactActiveClass : this.activeClass : null, this.disabled ? \"disabled\" : null];\n  } },\n    methods = { linkClick: function linkClick(t) {\n    this.disabled ? t.stopPropagation() : (this.$root.$emit(\"clicked::link\", this), this.$emit(\"click\", t)), this.isRouterLink || \"#\" !== this._href || t.preventDefault();\n  } },\n    linkMixin = { props: props, computed: computed, methods: methods },\n    bLink = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return t.isRouterLink ? n(\"router-link\", { tag: \"a\", class: t.linkClassObject, attrs: { \"active-class\": t.activeClass, \"exact-active-class\": t.exactActiveClass, disabled: t.disabled, \"aria-disabled\": t.disabled ? \"true\" : \"false\", to: t.to, exact: t.exact, append: t.append, replace: t.replace, event: t.event, tag: t.componentTag }, nativeOn: { click: function click(e) {\n          t.linkClick(e);\n        } } }, [t._t(\"default\")], 2) : n(\"a\", { class: t.linkClassObject, attrs: { disabled: t.disabled, \"aria-disabled\": t.disabled ? \"true\" : \"false\", href: t._href, target: t.target || null, rel: t.computedRel }, on: { click: t.linkClick } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], mixins: [linkMixin] },\n    bLinkPropKeys = Object.keys(props),\n    breadcrumb = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"ol\", { staticClass: \"breadcrumb\" }, [t._l(t.normalizedItems, function (e) {\n      return n(\"li\", { class: [\"breadcrumb-item\", e.active ? \"active\" : null], attrs: { role: \"presentation\" }, on: { click: function click(n) {\n            t.onClick(e._originalItem);\n          } } }, [e.active ? n(\"span\", { attrs: { \"aria-current\": t.ariaCurrent }, domProps: { innerHTML: t._s(e.text) } }) : n(\"b-link\", t._b({ domProps: { innerHTML: t._s(e.text) } }, \"b-link\", e._linkProps))], 1);\n    }), t._t(\"default\")], 2);\n  }, staticRenderFns: [], components: { bLink: bLink }, computed: { normalizedItems: function normalizedItems() {\n      var t = !1,\n          e = this.items.length;return this.items.map(function (n, i) {\n        var o = { _originalItem: n },\n            r = i === e - 1;return \"string\" == typeof n ? Object.assign(o, { text: n, link: \"#\", active: r }) : Object.assign(o, n), !0 === o.active || !1 === o.active || t ? o.active && (t = !0) : o.active = r, o.link && (o.href = o.link), o._linkProps = Object.keys(o).reduce(function (t, e) {\n          return bLinkPropKeys.includes(e) && (t[e] = o[e]), t;\n        }, {}), o;\n      });\n    } }, props: { items: { type: Array, default: function _default() {\n        return [];\n      }, required: !0 }, ariaCurrent: { type: String, default: \"location\" } }, methods: { onClick: function onClick(t) {\n      this.$emit(\"click\", t);\n    } } },\n    linkProps = Object.assign(omitLinkProps(\"href\", \"to\"), { href: { type: props.href.type }, to: { type: props.to.type } }),\n    bBtn = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.componentType, t._b({ tag: \"button\", class: t.classList, attrs: { type: t.btnType, disabled: t.disabled }, on: { click: t.onClick } }, \"button\", t.conditionalLinkProps), [t._t(\"default\")], 2);\n  }, staticRenderFns: [], components: { bLink: bLink }, computed: { linkProps: computed.linkProps, classList: function classList() {\n      return [\"btn\", this.btnVariant, this.btnSize, this.btnBlock, this.btnDisabled];\n    }, componentType: function componentType() {\n      return this.href || this.to ? \"b-link\" : \"button\";\n    }, btnBlock: function btnBlock() {\n      return this.block ? \"btn-block\" : \"\";\n    }, btnVariant: function btnVariant() {\n      return this.variant ? \"btn-\" + this.variant : \"btn-secondary\";\n    }, btnSize: function btnSize() {\n      return this.size ? \"btn-\" + this.size : \"\";\n    }, btnDisabled: function btnDisabled() {\n      return this.disabled ? \"disabled\" : \"\";\n    }, btnType: function btnType() {\n      return this.href || this.to ? null : this.type;\n    }, conditionalLinkProps: function conditionalLinkProps() {\n      return \"button\" === this.componentType ? {} : this.linkProps;\n    } }, props: Object.assign(linkProps, { block: { type: Boolean, default: !1 }, disabled: { type: Boolean, default: !1 }, size: { type: String, default: null }, variant: { type: String, default: null }, type: { type: String, default: \"button\" } }), methods: { onClick: function onClick(t) {\n      this.disabled ? (t.stopPropagation(), t.preventDefault()) : this.$emit(\"click\", t);\n    } } },\n    ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])', '.form-control:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])', 'select:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])', 'input[type=\"checkbox\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])', 'input[type=\"radio\"]:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])'].join(\",\"),\n    buttonToolbar = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"div\", { class: t.classObject, attrs: { role: \"toolbar\", tabindex: t.keyNav ? \"0\" : null }, on: { focusin: function focusin(e) {\n          if (e.target !== e.currentTarget) return null;t.focusFirst(e);\n        }, keydown: [function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"left\", 37) ? \"button\" in e && 0 !== e.button ? null : void t.focusNext(e, !0) : null;\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"up\", 38)) return null;t.focusNext(e, !0);\n        }, function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"right\", 39) ? \"button\" in e && 2 !== e.button ? null : void t.focusNext(e, !1) : null;\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"down\", 40)) return null;t.focusNext(e, !1);\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"left\", 37)) && e.shiftKey ? \"button\" in e && 0 !== e.button ? null : void t.focusFirst(e) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"up\", 38)) && e.shiftKey ? void t.focusFirst(e) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"right\", 39)) && e.shiftKey ? \"button\" in e && 2 !== e.button ? null : void t.focusLast(e) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"down\", 40)) && e.shiftKey ? void t.focusLast(e) : null;\n        }] } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"btn-toolbar\", this.justify && !this.vertical ? \"justify-content-between\" : \"\"];\n    } }, props: { justify: { type: Boolean, default: !1 }, KeyNav: { type: Boolean, default: !1 } }, methods: { setItemFocus: function setItemFocus(t) {\n      this.$nextTick(function () {\n        t.focus();\n      });\n    }, focusNext: function focusNext(t, e) {\n      if (this.keyNav) {\n        t.preventDefault(), t.stopPropagation();var n = this.getItems();if (!(n.length < 1)) {\n          var i = n.indexOf(t.target);e && i > 0 ? i-- : !e && i < n.length - 1 && i++, i < 0 && (i = 0), this.setItemFocus(n[i]);\n        }\n      }\n    }, focusFirst: function focusFirst(t) {\n      if (this.keyNav) {\n        t.preventDefault(), t.stopPropagation();var e = this.getItems();e.length > 0 && this.setItemFocus(e[0]);\n      }\n    }, focusLast: function focusLast(t) {\n      if (this.keyNav) {\n        t.preventDefault(), t.stopPropagation();var e = this.getItems();e.length > 0 && this.setItemFocus([e.length - 1]);\n      }\n    }, getItems: function getItems() {\n      var t = Array.prototype.slice.call(this.$el.querySelectorAll(ITEM_SELECTOR));return t.forEach(function (t) {\n        t.tabIndex = -1;\n      }), t;\n    } }, mounted: function mounted() {\n    this.keyNav && this.getItems();\n  } },\n    buttonGroup = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"div\", { class: t.classObject }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"btn-group\", this.vertical ? \"btn-group-vertical\" : \"\", this.justify && !this.vertical ? \"justify-content-between\" : \"\", this.size ? \"btn-group-\" + this.size : \"\"];\n    } }, props: { vertical: { type: Boolean, default: !1 }, justify: { type: Boolean, default: !1 }, size: { type: String, default: null } } },\n    clickOut = { mounted: function mounted() {\n    \"undefined\" != typeof document && document.documentElement.addEventListener(\"click\", this._clickOutListener);\n  }, destroyed: function destroyed() {\n    \"undefined\" != typeof document && document.removeEventListener(\"click\", this._clickOutListener);\n  }, methods: { _clickOutListener: function _clickOutListener(t) {\n      this.$el.contains(t.target) || this.clickOutListener && this.clickOutListener();\n    } } },\n    ITEM_SELECTOR$1 = '.dropdown-item:not(.disabled):not([disabled]):not([style*=\"display: none\"]):not([style*=\"display:none\"])',\n    HEADER_SELECTOR = '.dropdown-header:not([style*=\"display: none\"]):not([style*=\"display:none\"])',\n    ALL_SELECTOR = [ITEM_SELECTOR$1, HEADER_SELECTOR].join(\",\"),\n    dropdown = { props: { split: { type: Boolean, default: !1 }, text: { type: String, default: \"\" }, dropup: { type: Boolean, default: !1 }, disabled: { type: Boolean, default: !1 }, right: { type: Boolean, default: !1 } }, created: function created() {\n    var t = this,\n        e = function e(_e) {\n      _e !== t && (t.visible = !1);\n    };this.$root.$on(\"shown::dropdown\", e), this.$root.$on(\"clicked::link\", e);\n  }, watch: { visible: function visible(t, e) {\n      var n = this;t !== e && (t ? (this.$root.$emit(\"shown::dropdown\", this), \"undefined\" != typeof document && \"ontouchstart\" in document.documentElement && Array.prototype.slice.call(document.body.children).forEach(function (t) {\n        t.addEventListener(\"mouseover\", n.noop);\n      })) : (this.$root.$emit(\"hidden::dropdown\", this), \"undefined\" != typeof document && \"ontouchstart\" in document.documentElement && Array.prototype.slice.call(document.body.children).forEach(function (t) {\n        t.removeEventListener(\"mouseover\", n.noop);\n      })));\n    } }, methods: { noop: function noop() {}, toggle: function toggle() {\n      this.disabled ? this.visible = !1 : (this.visible = !this.visible, this.visible && this.$nextTick(function () {\n        var t = this.getFirstItem();t && this.focusItem(0, [t]);\n      }));\n    }, onTab: function onTab() {\n      this.visible && (this.visible = !1);\n    }, onEsc: function onEsc(t) {\n      this.visible && (this.visible = !1, t.preventDefault(), t.stopPropagation(), this.$nextTick(function () {\n        var t;(t = this.split && this.$refs.toggle ? this.$refs.toggle.$el || this.$refs.toggle : this.$refs.button.$el || this.$refs.button) && t.focus && t.focus();\n      }));\n    }, focusNext: function focusNext(t, e) {\n      if (this.visible) {\n        t.preventDefault(), t.stopPropagation();var n = this.getItems();if (!(n.length < 1)) {\n          var i = n.indexOf(t.target);e && i > 0 ? i-- : !e && i < n.length - 1 && i++, i < 0 && (i = 0), this.focusItem(i, n);\n        }\n      }\n    }, focusHovered: function focusHovered(t) {\n      if (this.visible) {\n        var e = this.getItems();if (!(e.length < 1)) {\n          var n = e.indexOf(t.target);n > -1 && (t.preventDefault(), t.stopPropagation(), this.focusItem(n, e));\n        }\n      }\n    }, focusItem: function focusItem(t, e) {\n      e.forEach(function (e, n) {\n        n === t ? (e.classList.add(\"active\"), e.focus()) : e.classList.remove(\"active\");\n      });\n    }, getItems: function getItems() {\n      return Array.prototype.slice.call(this.$refs.menu.querySelectorAll(ALL_SELECTOR));\n    }, getFirstItem: function getFirstItem() {\n      var t = this.$refs.menu.querySelector(ITEM_SELECTOR$1);return t || (t = this.$refs.menu.querySelector(HEADER_SELECTOR)), t || null;\n    } } },\n    buttonGroupDropdown = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [\"btn-group\", \"dropdown\", { dropup: t.dropup, show: t.visible }], attrs: { id: t.id || null } }, [n(\"b-button\", { ref: \"button\", class: { \"dropdown-toggle\": !t.split, \"btn-link\": t.link }, attrs: { id: t.id ? t.id + \"__BV_button_\" : null, \"aria-expanded\": t.visible ? \"true\" : \"false\", variant: t.variant, size: t.size, disabled: t.disabled }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.click(e);\n        }, kedown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.stopPropagation(), e.preventDefault(), t.click(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.stopPropagation(), e.preventDefault(), t.click(e);\n        }] } }, [t._t(\"text\", [t._v(t._s(t.text))])], 2), n(\"div\", { ref: \"menu\", class: [\"dropdown-menu\", { \"dropdown-menu-right\": t.right }], attrs: { role: \"menu\", \"aria-labelledby\": t.id ? t.id + \"__BV_button_\" : null }, on: { keyup: function keyup(e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"esc\", 27)) return null;t.onEsc(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"tab\", 9)) return null;t.onTab(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"up\", 38)) return null;t.focusNext(e, !0);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"down\", 40)) return null;t.focusNext(e, !1);\n        }], mouseover: function mouseover(e) {\n          t.focusHovered(e);\n        } } }, [t._t(\"default\")], 2)], 1);\n  }, staticRenderFns: [], mixins: [clickOut, dropdown], data: function data() {\n    return { visible: !1 };\n  }, computed: { dropdownToggle: function dropdownToggle() {\n      return this.caret ? \"dropdown-toggle\" : \"\";\n    } }, props: { id: { type: String }, caret: { type: Boolean, default: !0 } }, methods: { clickOutListener: function clickOutListener() {\n      this.visible = !1;\n    } } },\n    inputGroup = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: t.classObject, attrs: { role: \"group\" } }, [t._t(\"left\", [t.left ? n(\"div\", { staticClass: \"input-group-addon\", domProps: { innerHTML: t._s(t.left) } }) : t._e()]), t._t(\"default\"), t._t(\"right\", [t.right ? n(\"div\", { staticClass: \"input-group-addon\", domProps: { innerHTML: t._s(t.right) } }) : t._e()])], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"input-group\", this.size ? \"input-group-\" + this.size : \"\", this.state ? \"has-\" + this.state : \"\"];\n    } }, props: { size: { type: String, default: null }, state: { type: String, default: null }, left: { type: String, default: null }, right: { type: String, default: null } } },\n    inputGroupAddon = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"div\", { staticClass: \"input-group-addon\", attrs: { id: t.id || null } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: { id: { type: String, default: null } } },\n    inputGroupButton = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"div\", { staticClass: \"input-group-btn\" }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: {} },\n    card = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(t.tag, { tag: \"component\", class: [\"card\", t.cardVariant, t.cardAlign, t.cardInverse] }, [t._t(\"img\", [t.img ? n(\"img\", { staticClass: \"card-img\", attrs: { src: t.img, alt: t.imgAlt } }) : t._e()]), t.header || t.$slots.header ? n(t.headerTag, { tag: \"component\", class: [\"card-header\", t.headerVariant ? \"bg-\" + t.headerVariant : \"\", t.headerClass] }, [t._t(\"header\", [n(\"div\", { domProps: { innerHTML: t._s(t.header) } })])], 2) : t._e(), t.noBlock ? [t._t(\"default\")] : n(\"div\", { class: t.blockClass }, [t.title ? n(\"h4\", { staticClass: \"card-title\", domProps: { innerHTML: t._s(t.title) } }) : t._e(), t.subTitle ? n(\"h6\", { staticClass: \"card-subtitle mb-2 text-muted\", domProps: { innerHTML: t._s(t.subTitle) } }) : t._e(), t._t(\"default\")], 2), t.footer || t.$slots.footer ? n(t.footerTag, { tag: \"component\", class: [\"card-footer\", t.footerVariant ? \"bg-\" + t.footerVariant : \"\", t.footerClass] }, [t._t(\"footer\", [n(\"div\", { domProps: { innerHTML: t._s(t.footer) } })])], 2) : t._e()], 2);\n  }, staticRenderFns: [], computed: { blockClass: function blockClass() {\n      return [\"card-block\", this.overlay ? \"card-img-overlay\" : null];\n    }, cardVariant: function cardVariant() {\n      return this.variant ? \"card-\" + this.variant : null;\n    }, cardInverse: function cardInverse() {\n      return this.overlay || this.inverse ? \"card-inverse\" : null === this.inverse && this.variant && this.variant.length > 0 && -1 === this.variant.indexOf(\"outline\") ? \"card-inverse\" : void 0;\n    }, cardAlign: function cardAlign() {\n      return this.align ? \"text-\" + this.align : null;\n    } }, props: { align: { type: String, default: null }, inverse: { type: Boolean, default: null }, variant: { type: String, default: null }, tag: { type: String, default: \"div\" }, header: { type: String, default: null }, headerVariant: { type: String, default: null }, headerClass: { type: [String, Array], default: \"\" }, headerTag: { type: String, default: \"div\" }, footer: { type: String, default: null }, footerVariant: { type: String, default: null }, footerClass: { type: [String, Array], default: \"\" }, footerTag: { type: String, default: \"div\" }, title: { type: String, default: null }, subTitle: { type: String, default: null }, noBlock: { type: Boolean, default: !1 }, img: { type: String, default: null }, imgAlt: { type: String, default: null }, overlay: { type: Boolean, default: !1 } } },\n    cardGroup = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.tag, { tag: \"component\", class: [\"card-\" + t.type] }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { type: function type() {\n      return this.deck ? \"deck\" : this.columns ? \"columns\" : \"group\";\n    } }, props: { tag: { type: String, default: \"div\" }, deck: { type: Boolean, default: !1 }, columns: { type: Boolean, default: !1 } } },\n    DIRECTION = { next: { current: \"carousel-item-left\", next: \"carousel-item-right\", overlay: \"carousel-item-next\" }, prev: { current: \"carousel-item-right\", next: \"carousel-item-left\", overlay: \"carousel-item-prev\" } },\n    carousel = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"carousel slide\", style: { background: t.background, height: t.height }, attrs: { role: \"region\", id: t.id || null, \"aria-busy\": t.isSliding ? \"true\" : \"false\" }, on: { mouseenter: t.pause, mouseleave: t.start, focusin: t.pause, focusout: function focusout(e) {\n          t.restart(e);\n        }, keydown: [function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"left\", 37) ? \"button\" in e && 0 !== e.button ? null : (e.stopPropagation(), e.preventDefault(), void t.prev(e)) : null;\n        }, function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"right\", 39) ? \"button\" in e && 2 !== e.button ? null : (e.stopPropagation(), e.preventDefault(), void t.next(e)) : null;\n        }] } }, [n(\"div\", { staticClass: \"carousel-inner\", attrs: { role: \"list\", id: t.id ? t.id + \"__BV_inner_\" : null } }, [t._t(\"default\")], 2), t.controls ? [n(\"a\", { staticClass: \"carousel-control-prev\", attrs: { href: \"#\", role: \"button\", \"aria-controls\": t.id ? t.id + \"__BV_inner_\" : null }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.prev(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.stopPropagation(), e.preventDefault(), t.prev(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.stopPropagation(), e.preventDefault(), t.prev(e);\n        }] } }, [n(\"span\", { staticClass: \"carousel-control-prev-icon\", attrs: { \"aria-hidden\": \"true\" } }), t._v(\" \"), n(\"span\", { staticClass: \"sr-only\" }, [t._v(t._s(t.labelPrev))])]), n(\"a\", { staticClass: \"carousel-control-next\", attrs: { href: \"#\", role: \"button\", \"aria-controls\": t.id ? t.id + \"__BV_inner_\" : null }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.next(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.stopPropagation(), e.preventDefault(), t.next(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.stopPropagation(), e.preventDefault(), t.next(e);\n        }] } }, [n(\"span\", { staticClass: \"carousel-control-next-icon\", attrs: { \"aria-hidden\": \"true\" } }), t._v(\" \"), n(\"span\", { staticClass: \"sr-only\" }, [t._v(t._s(t.labelNext))])])] : t._e(), n(\"ol\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.indicators, expression: \"indicators\" }], staticClass: \"carousel-indicators\", attrs: { role: \"group\", id: t.id ? t.id + \"__BV_indicators_\" : null, \"aria-hidden\": t.indicators ? \"false\" : \"true\", \"aria-label\": t.indicators && t.labelIndicators ? t.labelIndicators : null, \"aria-owns\": t.indicators && t.id ? t.id + \"__BV_inner_\" : null } }, t._l(t.slides.length, function (e) {\n      return n(\"li\", { class: { active: e - 1 === t.index }, attrs: { role: \"button\", id: t.id ? t.id + \"__BV_indicator_\" + e + \"_\" : null, tabindex: t.indicators ? \"0\" : \"-1\", \"aria-current\": e - 1 === t.index ? \"true\" : \"false\", \"aria-posinset\": e, \"aria-setsize\": t.slides.length, \"aria-label\": t.labelGotoSlide + \" \" + e, \"aria-describedby\": t.slides[e - 1].id || null, \"aria-controls\": t.id ? t.id + \"__BV_inner_\" : null }, on: { click: function click(n) {\n            t.index = e - 1;\n          }, keydown: [function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"enter\", 13)) return null;n.stopPropagation(), n.preventDefault(), t.index = e - 1;\n          }, function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"space\", 32)) return null;n.stopPropagation(), n.preventDefault(), t.index = e - 1;\n          }] } });\n    }))], 2);\n  }, staticRenderFns: [], data: function data() {\n    return { index: 0, isSliding: !1, slides: [] };\n  }, props: { id: { type: String }, labelPrev: { type: String, default: \"Previous Slide\" }, labelNext: { type: String, default: \"Next Slide\" }, labelGotoSlide: { type: String, default: \"Goto Slide\" }, labelIndicators: { type: String, default: \"Select a slide to display\" }, interval: { type: Number, default: 5e3 }, indicators: { type: Boolean, default: !1 }, controls: { type: Boolean, default: !1 }, height: { type: String }, background: { type: String } }, methods: { prev: function prev() {\n      this.index <= 0 ? this.index = this.slides.length - 1 : this.index--;\n    }, next: function next() {\n      \"undefined\" != typeof document && document.visibilityState && document.hidden || (this.index >= this.slides.length - 1 ? this.index = 0 : this.index++);\n    }, pause: function pause() {\n      0 !== this.interval && void 0 !== this.interval && (clearInterval(this._intervalId), this._intervalId = null, this.slides[this.index].tabIndex = 0);\n    }, start: function start() {\n      var t = this;0 !== this.interval && void 0 !== this.interval && (this.slides.forEach(function (t) {\n        t.tabIndex = -1;\n      }), this._intervalId = setInterval(function () {\n        t.next();\n      }, this.interval));\n    }, restart: function restart(t) {\n      t.relatedTarget && this.$el.contains(t.relatedTarget) || this.start();\n    } }, mounted: function mounted() {\n    this.slides = Array.prototype.slice.call(this.$el.querySelectorAll(\".carousel-item\")), this.slides[0].classList.add(\"active\");var t = this;this.slides.forEach(function (e, n) {\n      var i = n + 1;e.setAttribute(\"aria-current\", 0 === n ? \"true\" : \"false\"), e.setAttribute(\"aria-posinset\", String(i)), e.setAttribute(\"aria-setsize\", String(t.slides.length)), e.tabIndex = -1, t.id && e.setAttribute(\"aria-controlledby\", t.id + \"__BV_indicator_\" + i + \"_\");\n    }), this._intervalId = null, this.start();\n  }, watch: { index: function index(t, e) {\n      var n = this;if (t !== e) if (this.isSliding) this.index = e;else {\n        var i = t > e ? DIRECTION.next : DIRECTION.prev;0 === e && t === this.slides.length - 1 ? i = DIRECTION.prev : e === this.slides.length - 1 && 0 === t && (i = DIRECTION.next);var o = this.slides[e],\n            r = this.slides[t];o && r && (this.isSliding = !0, r.classList.add(i.next, i.overlay), o.classList.add(i.current), this._carouselAnimation = setTimeout(function () {\n          n.$emit(\"slide\", t), o.classList.remove(\"active\"), o.setAttribute(\"aria-current\", \"false\"), o.setAttribute(\"aria-hidden\", \"true\"), o.tabIndex = -1, o.classList.remove(i.current), r.classList.add(\"active\"), r.setAttribute(\"aria-current\", \"true\"), r.setAttribute(\"aria-hidden\", \"false\"), r.tabIndex = -1, r.classList.remove(i.next, i.overlay), n._intervalId || (o.tabIndex = 0, n.$nextTick(function () {\n            o.focus();\n          })), n.isSliding = !1;\n        }, 500));\n      }\n    } }, destroyed: function destroyed() {\n    clearTimeout(this._carouselAnimation), clearInterval(this._intervalId);\n  } },\n    carouselSlide = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"carousel-item\", style: { background: t.background, height: t.height }, attrs: { role: \"listitem\", id: t.id || null } }, [t.img ? n(\"img\", { staticClass: \"d-block img-fluid\", attrs: { src: t.img, alt: t.imgAlt } }) : t._e(), n(\"div\", { class: t.contentClasses }, [t.caption ? n(\"h3\", { domProps: { innerHTML: t._s(t.caption) } }) : t._e(), t.text ? n(\"p\", { domProps: { innerHTML: t._s(t.text) } }) : t._e(), t._t(\"default\")], 2)]);\n  }, staticRenderFns: [], props: { id: { type: String }, img: { type: String }, imgAlt: { type: String }, contentVisibleUp: { type: String }, caption: { type: String }, text: { type: String }, background: { type: String }, height: { type: String } }, computed: { contentClasses: function contentClasses() {\n      var t = { \"carousel-caption\": Boolean(this.caption) };return this.contentVisibleUp && (t[\"d-none\"] = !0, t[\"d-\" + this.contentVisibleUp + \"-block\"] = !0), t;\n    } } },\n    collapse = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"transition\", { attrs: { name: \"collapse\" }, on: { enter: t.enter, \"after-enter\": t.clearHeight, leave: t.leave, \"after-leave\": t.clearHeight } }, [n(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.show, expression: \"show\" }], class: t.classObject, attrs: { id: t.id || null } }, [t._t(\"default\")], 2)]);\n  }, staticRenderFns: [], _scopeId: \"data-v-67b0a2de\", data: function data() {\n    return { show: this.visible };\n  }, computed: { classObject: function classObject() {\n      return { \"navbar-collapse\": this.isNav, show: this.show };\n    } }, model: { prop: \"visible\", event: \"input\" }, watch: { visible: function visible(t) {\n      t !== this.show && (this.show = t, this.emitState());\n    } }, props: { isNav: { type: Boolean, default: !1 }, id: { type: String, required: !0 }, accordion: { type: String, default: null }, visible: { type: Boolean, default: !1 } }, methods: { toggle: function toggle() {\n      this.show = !this.show, this.emitState();\n    }, enter: function enter(t) {\n      t.style.height = \"auto\";var e = getComputedStyle(t).height;t.style.height = \"0px\", t.offsetHeight, t.style.height = e;\n    }, leave: function leave(t) {\n      t.style.height = \"auto\";var e = getComputedStyle(t).height;t.style.height = e, t.offsetHeight, t.style.height = \"0px\";\n    }, clearHeight: function clearHeight(t) {\n      t.style.height = null;\n    }, emitState: function emitState() {\n      this.$emit(\"input\", this.show), this.$root.$emit(\"collapse::toggle::state\", this.id, this.show), this.accordion && this.show && this.$root.$emit(\"accordion::toggle\", this.id, this.accordion);\n    } }, created: function created() {\n    var t = this;this.$root.$on(\"collapse::toggle\", function (e) {\n      e === t.id && t.toggle();\n    }), this.$root.$on(\"accordion::toggle\", function (e, n) {\n      t.accordion && n === t.accordion && (e === t.id ? t.show || t.toggle() : t.show && t.toggle());\n    });\n  }, mounted: function mounted() {\n    this.emitState();\n  } },\n    dropdown$1 = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [\"dropdown\", \"btn-group\", { dropup: t.dropup, show: t.visible }], attrs: { id: t.id || null } }, [n(\"b-button\", { ref: \"button\", class: { \"dropdown-toggle\": !t.split, \"btn-link\": t.link }, attrs: { id: t.id ? t.id + \"__BV_button_\" : null, \"aria-haspopup\": t.split ? null : \"true\", \"aria-expanded\": t.split ? null : t.visible ? \"true\" : \"false\", variant: t.variant, size: t.size, disabled: t.disabled }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.click(e);\n        } } }, [t._t(\"text\", [t._v(t._s(t.text))])], 2), t.split ? n(\"b-button\", { ref: \"toggle\", class: [\"dropdown-toggle\", \"dropdown-toggle-split\", { \"btn-link\": t.link }], attrs: { id: t.id ? t.id + \"__BV_toggle_\" : null, \"aria-haspopup\": t.split ? \"true\" : null, \"aria-expanded\": t.split ? t.visible ? \"true\" : \"false\" : null, variant: t.variant, size: t.size, disabled: t.disabled }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.toggle(e);\n        } } }, [n(\"span\", { staticClass: \"sr-only\" }, [t._v(t._s(t.toggleText))])]) : t._e(), n(\"div\", { ref: \"menu\", class: [\"dropdown-menu\", { \"dropdown-menu-right\": t.right }], attrs: { role: \"menu\", \"aria-labelledby\": t.id ? t.id + (t.split ? \"__BV_toggle_\" : \"__BV_button_\") : null }, on: { keyup: function keyup(e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"esc\", 27)) return null;t.onEsc(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"tab\", 9)) return null;t.onTab(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"up\", 38)) return null;t.focusNext(e, !0);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"down\", 40)) return null;t.focusNext(e, !1);\n        }], mouseover: function mouseover(e) {\n          t.focusHovered(e);\n        } } }, [t._t(\"default\")], 2)], 1);\n  }, staticRenderFns: [], mixins: [clickOut, dropdown], components: { bButton: bBtn }, data: function data() {\n    return { visible: !1 };\n  }, props: { id: { type: String }, toggleText: { type: String, default: \"Toggle Dropdown\" }, size: { type: String, default: null }, variant: { type: String, default: null }, link: { type: Boolean, default: !1 } }, methods: { clickOutListener: function clickOutListener() {\n      this.visible = !1;\n    }, click: function click(t) {\n      this.disabled ? this.visible = !1 : this.split ? (this.$emit(\"click\", t), this.$root.$emit(\"shown::dropdown\", this)) : this.toggle();\n    } } },\n    dropdownItem = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"b-link\", t._b({ staticClass: \"dropdown-item\", attrs: { role: \"menuitem\" }, on: { click: function click(e) {\n          t.$emit(\"click\", e);\n        } } }, \"b-link\", t.linkProps), [t._t(\"default\")], 2);\n  }, staticRenderFns: [], components: { bLink: bLink }, props: props, computed: { linkProps: computed.linkProps } },\n    dropdownItemButton = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"button\", { staticClass: \"dropdown-item\", attrs: { type: \"button\", role: \"menuitem\", disabled: t.disabled }, on: { click: t.onClick } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: { disabled: { type: Boolean, default: !1 } }, methods: { onClick: function onClick(t) {\n      this.$root.$emit(\"clicked::link\", this), this.$emit(\"click\", t);\n    } } },\n    dropdownDivider = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"div\", { staticClass: \"dropdown-divider\", attrs: { role: \"separator\" } });\n  }, staticRenderFns: [], props: {} },\n    dropdownHeader = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.tag, { tag: \"component\", staticClass: \"dropdown-header\", attrs: { tabindex: \"-1\" } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: { tag: { type: String, default: \"h6\" } } },\n    dropdownSelect = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"dropdown-select\", class: { open: t.show, dropdown: !t.dropup, dropup: t.dropup } }, [n(\"button\", { class: [\"btn\", \"dropdown\", t.dropdownToggle, t.btnVariant, t.btnSize], attrs: { id: t.id, role: \"button\", \"aria-haspopup\": \"true\", \"aria-expanded\": \"show\", disabled: t.disabled }, on: { click: function click(e) {\n          e.preventDefault(), t.toggle(e);\n        } } }, [n(\"span\", { staticClass: \"checked-items\", domProps: { innerHTML: t._s(t.displayItem) } })]), n(\"ul\", { staticClass: \"dropdown-menu\", class: { \"dropdown-menu-right\": \"right\" == t.position }, attrs: { \"aria-labelledby\": \"dLabel\" } }, t._l(t.list, function (e) {\n      return n(\"li\", [n(\"button\", { staticClass: \"dropdown-item\", attrs: { click: t.select(e) } }, [t._v(t._s(e.text))])]);\n    }))]);\n  }, staticRenderFns: [], data: function data() {\n    return { show: !1, selected: !1 };\n  }, computed: { btnVariant: function btnVariant() {\n      return this.variant && \"default\" !== this.variant ? \"btn-\" + this.variant : \"btn-secondary\";\n    }, btnSize: function btnSize() {\n      return this.size && \"default\" !== this.size ? \"btn-\" + this.size : \"\";\n    }, dropdownToggle: function dropdownToggle() {\n      return this.caret ? \"dropdown-toggle\" : \"\";\n    }, displayItem: function displayItem() {\n      if (this.returnObject && this.model && !this.model.text || !this.returnObject && this.model && 0 === this.model.length || this.forceDefault) return this.defaultText;if (this.returnObject && this.model && this.model.text) return this.model.text;if (!this.returnObject && this.model) {\n        var t = this.model || \"\";return this.list.forEach(function (e) {\n          e.value === this.model && (t = e.text);\n        }), t;\n      }return \"\";\n    } }, props: { id: { type: String }, model: { required: !1 }, list: { type: Array, default: [], required: !0 }, caret: { type: Boolean, default: !0 }, position: { type: String, default: \"left\" }, size: { type: String, default: \"\" }, variant: { type: String, default: \"default\" }, defaultText: { type: String, default: \"Plase select one\" }, forceDefault: { type: Boolean, default: !1 }, returnObject: { type: Boolean, default: !1 }, dropup: { type: Boolean, default: !1 }, disabled: { type: Boolean, default: !1 } }, methods: { toggle: function toggle(t) {\n      this.show = !this.show, this.show ? (this.$root.$emit(\"shown:dropdown\", this.id), t.stopPropagation()) : this.$root.$emit(\"hidden::dropdown\", this.id);\n    }, select: function select(t) {\n      this.returnObject ? this.model = t : this.model = t.value, this.show = !1, this.$root.$emit(\"selected::dropdown\", this.id, this.model);\n    } }, created: function created() {\n    this.$root.$on(\"hide::dropdown\", function () {\n      this.show = !1;\n    });\n  } },\n    bForm = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"form\", { class: t.classObject }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [this.inline ? \"form-inline\" : \"\"];\n    } }, props: { inline: { type: Boolean, default: !1 } } },\n    formFieldset = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [\"form-group\", \"row\", t.inputState], attrs: { id: t.id || null, role: \"group\", \"aria-describedby\": t.describedBy } }, [t.label ? n(\"label\", { class: [t.labelSrOnly ? \"sr-only\" : \"col-form-label\", t.labelLayout, t.labelAlignClass], attrs: { for: t.target, id: t.labelId }, domProps: { innerHTML: t._s(t.label) } }) : t._e(), n(\"div\", { ref: \"content\", class: t.inputLayout }, [t._t(\"default\"), t.feedback ? n(\"div\", { staticClass: \"form-text form-control-feedback\", attrs: { id: t.feedbackId, role: \"alert\", \"aria-live\": \"assertive\", \"aria-atomic\": \"true\" }, domProps: { innerHTML: t._s(t.feedback) } }) : t._e(), t.description ? n(\"small\", { staticClass: \"form-text text-muted\", attrs: { id: t.descriptionId }, domProps: { innerHTML: t._s(t.description) } }) : t._e()], 2)]);\n  }, staticRenderFns: [], data: function data() {\n    return { target: null };\n  }, computed: { labelId: function labelId() {\n      return this.id && this.label ? this.id + \"__BV_label_\" : null;\n    }, descriptionId: function descriptionId() {\n      return this.id && this.description ? this.id + \"__BV_description_\" : null;\n    }, feedbackId: function feedbackId() {\n      return this.id && this.feedback ? this.id + \"__BV_feedback_\" : null;\n    }, describedBy: function describedBy() {\n      return this.id && (this.label || this.feedback || this.description) ? [this.labelId, this.descriptionId, this.feedbackId].filter(function (t) {\n        return t;\n      }).join(\" \") : null;\n    }, inputState: function inputState() {\n      return this.state ? \"has-\" + this.state : \"\";\n    }, labelLayout: function labelLayout() {\n      return this.labelSrOnly ? null : this.horizontal ? \"col-sm-\" + this.labelSize : \"col-12\";\n    }, labelAlignClass: function labelAlignClass() {\n      return this.labelSrOnly ? null : this.labelTextAlign ? \"text-\" + this.labelTextAlign : null;\n    }, inputLayout: function inputLayout() {\n      return this.horizontal ? \"col-sm-\" + (12 - this.labelSize) : \"col-12\";\n    } }, methods: { updateTarget: function updateTarget() {\n      if (this.for && this.$el && this.$el.querySelector(\"#\" + this.for)) return this.for;var t = this.$refs.content;if (!t) return null;var e = t.querySelector(this.inputSelector);this.target = e && e.id ? e.id : null;\n    } }, mounted: function mounted() {\n    this.updateTarget();\n  }, updated: function updated() {\n    this.updateTarget();\n  }, props: { id: { type: String, default: null }, for: { type: String, default: null }, state: { type: String, default: null }, horizontal: { type: Boolean, default: !1 }, labelSize: { type: Number, default: 3 }, labelTextAlign: { type: String, default: null }, label: { type: String, default: null }, labelSrOnly: { type: Boolean, default: !1 }, description: { type: String, default: null }, feedback: { type: String, default: null }, inputSelector: { type: String, default: '[role=\"radiogroup\"],input,select,textarea,.form-control,.form-control-static,.dropdown,.dropup' } } },\n    formMixin = { computed: { inputClass: function inputClass() {\n      return [this.size ? \"form-control-\" + this.size : null, this.state ? \"form-control-\" + this.state : null];\n    }, custom: function custom() {\n      return !this.plain;\n    } }, props: { name: { type: String }, disabled: { type: Boolean }, plain: { type: Boolean, default: !1 }, state: { type: String }, size: { type: String }, id: { type: String } } },\n    formCheckBoxMixin = { computed: { checkboxClass: function checkboxClass() {\n      return { \"custom-control\": this.custom, \"form-check-inline\": this.inline };\n    } } },\n    formCheckbox = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"label\", { class: [t.inputClass, t.checkboxClass, t.custom ? \"custom-checkbox\" : null] }, [n(\"input\", { class: [t.custom ? \"custom-control-input\" : null], attrs: { type: \"checkbox\", id: t.id || null, name: t.name, disabled: t.disabled }, domProps: { value: t.value, checked: t.isChecked }, on: { change: t.handleChange } }), t._v(\" \"), t.custom ? n(\"span\", { staticClass: \"custom-control-indicator\", attrs: { \"aria-hidden\": \"true\" } }) : t._e(), t._v(\" \"), n(\"span\", { class: [t.custom ? \"custom-control-description\" : null] }, [t._t(\"default\")], 2)]);\n  }, staticRenderFns: [], mixins: [formMixin, formCheckBoxMixin], model: { prop: \"checked\", event: \"change\" }, props: { value: { default: !0 }, uncheckedValue: { default: !1 }, checked: { default: !0 } }, computed: { isChecked: function isChecked() {\n      return this.checked.includes(this.value);\n    } }, methods: { handleChange: function handleChange(t) {\n      var e = this,\n          n = t.target.checked;Array.isArray(this.checked) ? this.isChecked ? this.$emit(\"change\", this.checked.filter(function (t) {\n        return t !== e.value;\n      })) : this.$emit(\"change\", this.checked.concat([this.value])) : this.$emit(\"change\", n ? this.value : this.uncheckedValue);\n    } } },\n    formOptions = { computed: { formOptions: function formOptions() {\n      var t = this,\n          e = this.options || {};return e = Array.isArray(e) ? e.map(function (e) {\n        return \"object\" == (typeof e === \"undefined\" ? \"undefined\" : _typeof(e)) ? { value: e[t.valueField], text: e[t.textField], disabled: e.disabled || !1 } : { text: String(e), value: e || {} };\n      }) : Object.keys(e).map(function (n) {\n        var i = e[n] || {};return \"object\" != (typeof i === \"undefined\" ? \"undefined\" : _typeof(i)) && (i = { text: String(i) }), i.value = i[t.valueField] || n, i;\n      });\n    }, selectedValue: function selectedValue() {\n      for (var t = this, e = this.formOptions, n = 0; n < e.length; n++) {\n        if (e[n].value === t.localValue) return t.returnObject ? e[n] : e[n].value;\n      }\n    } }, props: { valueField: { type: [String], default: \"value\" }, textField: { type: [String], default: \"text\" } }, watch: { localValue: function localValue(t, e) {\n      t !== e && this.$emit(\"input\", this.selectedValue);\n    }, value: function value(t, e) {\n      t !== e && (this.localValue = t);\n    } } },\n    formRadio = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [t.inputClass, t.inputState, this.stacked ? \"custom-controls-stacked\" : \"\"], attrs: { id: t.id || null, role: \"radiogroup\" } }, t._l(t.formOptions, function (e) {\n      return n(\"label\", { class: [t.checkboxClass, t.custom ? \"custom-radio\" : null] }, [n(\"input\", { directives: [{ name: \"model\", rawName: \"v-model\", value: t.localValue, expression: \"localValue\" }], ref: \"inputs\", refInFor: !0, class: t.custom ? \"custom-control-input\" : null, attrs: { id: e.id || null, type: \"radio\", name: e.name, disabled: e.disabled }, domProps: { value: e.value, checked: t._q(t.localValue, e.value) }, on: { change: function change(n) {\n            t.$emit(\"change\", t.returnObject ? e : e.value);\n          }, __c: function __c(n) {\n            t.localValue = e.value;\n          } } }), t._v(\" \"), t.custom ? n(\"span\", { staticClass: \"custom-control-indicator\", attrs: { \"aria-hidden\": \"true\" } }) : t._e(), t._v(\" \"), n(\"span\", { class: t.custom ? \"custom-control-description\" : null, domProps: { innerHTML: t._s(e.text) } })]);\n    }));\n  }, staticRenderFns: [], mixins: [formMixin, formCheckBoxMixin, formOptions], data: function data() {\n    return { localValue: this.value };\n  }, computed: { inputState: function inputState() {\n      return this.state ? \"has-\" + this.state : \"\";\n    } }, props: { value: {}, options: { type: [Array, Object], default: null, required: !0 }, stacked: { type: Boolean, default: !1 }, returnObject: { type: Boolean, default: !1 } } },\n    bFormInputStatic = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"p\", { class: [\"form-control-static\", t.inputClass], attrs: { id: t.id || null }, domProps: { innerHTML: t._s(t.staticValue) } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], mixins: [formMixin], computed: { staticValue: function staticValue() {\n      return this.formatter ? this.formatter(this.value) : this.value;\n    } }, props: { value: { default: null }, formatter: { type: Function } } },\n    formInput = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return t.static ? n(\"b-form-input-static\", { attrs: { id: t.id || null, value: t.value, formatter: t.formatter } }) : n(t.textarea ? \"textarea\" : \"input\", { ref: \"input\", tag: \"input\", class: [\"form-control\", t.inputClass], attrs: { type: t.type, name: t.name, id: t.id || null, disabled: t.disabled, readonly: t.readonly, rows: t.rows || t.rowsCount, placeholder: t.placeholder }, domProps: { value: t.value }, on: { input: function input(e) {\n          t.onInput(e.target.value);\n        }, change: function change(e) {\n          t.onChange(e.target.value);\n        }, keyup: function keyup(e) {\n          t.onKeyUp(e);\n        }, focus: function focus(e) {\n          t.$emit(\"focus\");\n        }, blur: function blur(e) {\n          t.$emit(\"blur\");\n        } } });\n  }, staticRenderFns: [], mixins: [formMixin], components: { bFormInputStatic: bFormInputStatic }, computed: { rowsCount: function rowsCount() {\n      return (this.value || \"\").toString().split(\"\\n\").length;\n    } }, methods: { format: function format(t) {\n      if (this.formatter) {\n        var e = this.formatter(t);e !== t && (t = e, this.$refs.input.value = e);\n      }return t;\n    }, onInput: function onInput(t) {\n      this.lazyFormatter || (t = this.format(t)), this.$emit(\"input\", t);\n    }, onChange: function onChange(t) {\n      t = this.format(t), this.$emit(\"input\", t), this.$emit(\"change\", t);\n    }, onKeyUp: function onKeyUp(t) {\n      this.$emit(\"keyup\", t);\n    }, focus: function focus() {\n      this.$refs.input.focus();\n    } }, props: { value: { default: null }, type: { type: String, default: \"text\" }, readonly: { type: Boolean, default: !1 }, static: { type: Boolean, default: !1 }, placeholder: { type: String, default: null }, rows: { type: Number, default: null }, textarea: { type: Boolean, default: !1 }, formatter: { type: Function }, lazyFormatter: { type: Boolean, default: !1 } } },\n    formFile = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [\"form-control\", t.custom ? \"custom-file\" : null, t.inputClass], attrs: { id: t.id ? t.id + \"__BV_file_outer_\" : null }, on: { dragover: function dragover(e) {\n          e.stopPropagation(), e.preventDefault(), t.dragover(e);\n        } } }, [t.dragging && t.custom ? n(\"span\", { staticClass: \"drop-here\", attrs: { \"data-drop\": t.dropLabel }, on: { dragover: function dragover(e) {\n          e.stopPropagation(), e.preventDefault(), t.dragover(e);\n        }, drop: function drop(e) {\n          e.stopPropagation(), e.preventDefault(), t.drop(e);\n        }, dragleave: function dragleave(e) {\n          e.stopPropagation(), e.preventDefault(), t.dragging = !1;\n        } } }) : t._e(), n(\"input\", { ref: \"input\", class: t.custom ? \"custom-file-input\" : \"\", attrs: { type: \"file\", name: t.name, id: t.id || null, disabled: t.disabled, accept: t.accept || null, multiple: t.multiple, webkitdirectory: t.directory, \"aria-describedby\": t.custom && t.id ? t.id + \"__BV_file_control_\" : null }, on: { change: t.onFileChange } }), t._v(\" \"), t.custom ? n(\"span\", { class: [\"custom-file-control\", t.dragging ? \"dragging\" : null, t.inputClass], attrs: { id: t.id ? t.id + \"__BV_file_control_\" : null, \"data-choose\": t.computedChooseLabel, \"data-selected\": t.selectedLabel } }) : t._e()]);\n  }, staticRenderFns: [], _scopeId: \"data-v-c68bd5f8\", mixins: [formMixin], data: function data() {\n    return { selectedFile: null, dragging: !1 };\n  }, computed: { selectedLabel: function selectedLabel() {\n      return this.selectedFile && 0 !== this.selectedFile.length ? this.multiple ? 1 === this.selectedFile.length ? this.selectedFile[0].name : this.selectedFormat.replace(\":names\", this.selectedFile.map(function (t) {\n        return t.name;\n      }).join(\",\")).replace(\":count\", this.selectedFile.length) : this.selectedFile.name : this.placeholder || \"No file chosen\";\n    }, computedChooseLabel: function computedChooseLabel() {\n      return this.chooseLabel || (this.multiple ? \"Choose Files\" : \"Choose File\");\n    } }, watch: { selectedFile: function selectedFile(t, e) {\n      t !== e && (!t && this.multiple ? this.$emit(\"input\", []) : this.$emit(\"input\", t));\n    } }, methods: { reset: function reset() {\n      try {\n        this.$refs.input.value = \"\";\n      } catch (t) {}this.$refs.input.type = \"\", this.$refs.input.type = \"file\", this.selectedFile = this.multiple ? [] : null;\n    }, onFileChange: function onFileChange(t) {\n      var e = this;this.$emit(\"change\", t);var n = t.dataTransfer && t.dataTransfer.items;if (!n || this.noTraverse) this.setFiles(t.target.files || t.dataTransfer.files);else {\n        for (var i = [], o = 0; o < n.length; o++) {\n          var r = n[o].webkitGetAsEntry();r && i.push(e.traverseFileTree(r));\n        }Promise.all(i).then(function (t) {\n          e.setFiles(Array.prototype.concat.apply([], t));\n        });\n      }\n    }, setFiles: function setFiles(t) {\n      var e = this;if (t) {\n        if (this.multiple) {\n          for (var n = [], i = 0; i < t.length; i++) {\n            t[i].type.match(e.accept) && n.push(t[i]);\n          }this.selectedFile = n;\n        } else this.selectedFile = t[0];\n      } else this.selectedFile = null;\n    }, dragover: function dragover(t) {\n      !this.noDrop && this.custom && (this.dragging = !0, t.dataTransfer.dropEffect = \"copy\");\n    }, drop: function drop(t) {\n      this.noDrop || (this.dragging = !1, t.dataTransfer.files && t.dataTransfer.files.length > 0 && this.onFileChange(t));\n    }, traverseFileTree: function traverseFileTree(t, e) {\n      var n = this;return new Promise(function (i) {\n        e = e || \"\", t.isFile ? t.file(function (t) {\n          t.$path = e, i(t);\n        }) : t.isDirectory && t.createReader().readEntries(function (o) {\n          for (var r = [], s = 0; s < o.length; s++) {\n            r.push(n.traverseFileTree(o[s], e + t.name + \"/\"));\n          }Promise.all(r).then(function (t) {\n            i(Array.prototype.concat.apply([], t));\n          });\n        });\n      });\n    } }, props: { accept: { type: String, default: \"\" }, placeholder: { type: String, default: null }, chooseLabel: { type: String, default: null }, multiple: { type: Boolean, default: !1 }, directory: { type: Boolean, default: !1 }, noTraverse: { type: Boolean, default: !1 }, selectedFormat: { type: String, default: \":count Files\" }, noDrop: { type: Boolean, default: !1 }, dropLabel: { type: String, default: \"Drop files here\" } } },\n    formSelect = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"select\", { directives: [{ name: \"model\", rawName: \"v-model\", value: t.localValue, expression: \"localValue\" }], ref: \"input\", class: [\"form-control\", t.inputClass, t.custom ? \"custom-select\" : null], attrs: { name: t.name, id: t.id || null, disabled: t.disabled }, on: { change: function change(e) {\n          var n = Array.prototype.filter.call(e.target.options, function (t) {\n            return t.selected;\n          }).map(function (t) {\n            return \"_value\" in t ? t._value : t.value;\n          });t.localValue = e.target.multiple ? n : n[0];\n        } } }, t._l(t.formOptions, function (e) {\n      return n(\"option\", { attrs: { disabled: e.disabled }, domProps: { value: e.value, innerHTML: t._s(e.text) } });\n    }));\n  }, staticRenderFns: [], mixins: [formMixin, formOptions], data: function data() {\n    return { localValue: this.value };\n  }, props: { value: {}, options: { type: [Array, Object], required: !0 }, returnObject: { type: Boolean, default: !1 } } },\n    jumbotron = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { class: [\"jumbotron\", t.fluid ? \"jumbotron-fluid\" : null] }, [n(\"div\", { class: t.containerFluid ? \"container-fluid\" : \"container\" }, [t.header ? n(\"h1\", { staticClass: \"display-3\", domProps: { innerHTML: t._s(t.header) } }) : t._e(), t.lead ? n(\"p\", { staticClass: \"lead\", domProps: { innerHTML: t._s(t.lead) } }) : t._e(), t._t(\"default\")], 2)]);\n  }, staticRenderFns: [], computed: {}, props: { fluid: { type: Boolean, default: !1 }, containerFluid: { type: Boolean, default: !1 }, header: { type: String, default: null }, lead: { type: String, default: null } } },\n    badge = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"span\", { class: [\"badge\", t.badgeVariant, t.badgePill] }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { badgeVariant: function badgeVariant() {\n      return this.variant && \"default\" !== this.variant ? \"badge-\" + this.variant : \"badge-default\";\n    }, badgePill: function badgePill() {\n      return this.pill ? \"badge-pill\" : \"\";\n    } }, props: { variant: { type: String, default: \"default\" }, pill: { type: Boolean, default: !1 } } },\n    listGroup = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.tag, { tag: \"component\", class: [\"list-group\", t.flush ? \"list-group-flush\" : null] }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: { tag: { type: String, default: \"div\" }, flush: { type: Boolean, default: !1 } } },\n    linkProps$1 = Object.assign(omitLinkProps(\"href\", \"to\"), { href: { type: props.href.type }, to: { type: props.to.type }, tag: { type: props.tag.type } }),\n    actionTags = [\"a\", \"router-link\", \"button\", \"b-link\"],\n    listGroupItem = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.myTag, t._b({ ref: \"item\", tag: \"component\", class: t.classObject }, \"component\", t.conditionalLinkProps), [t._t(\"default\")], 2);\n  }, staticRenderFns: [], components: { bLink: bLink }, computed: { linkProps: computed.linkProps, classObject: function classObject() {\n      return [\"list-group-item\", this.listState, this.active ? \"active\" : null, this.disabled ? \"disabled\" : null, this.isAction ? \"list-group-item-action\" : null];\n    }, isAction: function isAction() {\n      return !1 !== this.action && !!(this.action || this.to || this.href || actionTags.includes(this.tag));\n    }, listState: function listState() {\n      return this.variant ? \"list-group-item-\" + this.variant : null;\n    }, myTag: function myTag() {\n      return this.tag ? this.tag : this.to || this.href ? \"b-link\" : \"div\";\n    }, conditionalLinkProps: function conditionalLinkProps() {\n      return \"b-link\" !== this.myTag ? {} : this.linkProps;\n    } }, props: Object.assign(linkProps$1, { action: { type: Boolean, default: null }, variant: { type: String, default: null } }) },\n    media = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"media\" }, [t.rightAlign ? t._e() : n(\"div\", { class: [\"d-flex\", \"mr-3\", t.verticalAlignClass] }, [t._t(\"aside\")], 2), n(\"div\", { staticClass: \"media-body\" }, [t._t(\"default\")], 2), t.rightAlign ? n(\"div\", { class: [\"d-flex\", \"ml-3\", t.verticalAlignClass] }, [t._t(\"aside\")], 2) : t._e()]);\n  }, staticRenderFns: [], computed: { verticalAlignClass: function verticalAlignClass() {\n      return \"align-self-\" + this.verticalAlign;\n    } }, props: { rightAlign: { type: Boolean, default: !1 }, verticalAlign: { type: String, default: \"top\" } } },\n    FOCUS_SELECTOR = [\"button:not([disabled])\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"a:not([disabled]):not(.disabled)\", \"[tabindex]:not([disabled]):not(.disabled)\"].join(\",\"),\n    modal = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", [n(\"transition-group\", { attrs: { \"enter-class\": \"hidden\", \"enter-to-class\": \"\", \"enter-active-class\": \"\", \"leave-class\": \"show\", \"leave-active-class\": \"\", \"leave-to-class\": \"hidden\" }, on: { \"after-enter\": t.focusFirst } }, [n(\"div\", { directives: [{ name: \"show\", rawName: \"v-show\", value: t.is_visible, expression: \"is_visible\" }], key: \"modal\", ref: \"modal\", class: [\"modal\", { fade: !t.noFade, show: t.is_visible }], attrs: { id: t.id || null, role: \"dialog\" }, on: { click: function click(e) {\n          t.onClickOut();\n        }, keyup: function keyup(e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"esc\", 27)) return null;t.onEsc();\n        } } }, [n(\"div\", { class: [\"modal-dialog\", \"modal-\" + t.size] }, [n(\"div\", { ref: \"content\", staticClass: \"modal-content\", attrs: { tabindex: \"-1\", role: \"document\", \"aria-labelledby\": t.hideHeader || !t.id ? null : t.id + \"__BV_title_\", \"aria-describedby\": t.id ? t.id + \"__BV_body_\" : null }, on: { click: function click(t) {\n          t.stopPropagation();\n        } } }, [t.hideHeader ? t._e() : n(\"header\", { ref: \"header\", staticClass: \"modal-header\" }, [t._t(\"modal-header\", [n(\"h5\", { staticClass: \"modal-title\", attrs: { id: t.id ? t.id + \"__BV_title_\" : null } }, [t._t(\"modal-title\", [t._v(t._s(t.title))])], 2), t.hideHeaderClose ? t._e() : n(\"button\", { staticClass: \"close\", attrs: { type: \"button\", \"aria-label\": t.headerCloseLabel }, on: { click: t.hide } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" } }, [t._v(\"×\")])])])], 2), n(\"div\", { ref: \"body\", staticClass: \"modal-body\", attrs: { id: t.id ? t.id + \"__BV_body_\" : null } }, [t._t(\"default\")], 2), t.hideFooter ? t._e() : n(\"footer\", { ref: \"footer\", staticClass: \"modal-footer\" }, [t._t(\"modal-footer\", [t.okOnly ? t._e() : n(\"b-btn\", { attrs: { variant: \"secondary\", size: t.buttonSize }, on: { click: function click(e) {\n          t.hide(!1);\n        } } }, [t._t(\"modal-cancel\", [t._v(t._s(t.closeTitle))])], 2), n(\"b-btn\", { attrs: { variant: \"primary\", size: t.buttonSize, disabled: t.okDisabled }, on: { click: function click(e) {\n          t.hide(!0);\n        } } }, [t._t(\"modal-ok\", [t._v(t._s(t.okTitle))])], 2)])], 2)])])]), t.is_visible ? n(\"div\", { key: \"modal-backdrop\", class: [\"modal-backdrop\", { fade: !t.noFade, show: t.is_visible }] }) : t._e()])], 1);\n  }, staticRenderFns: [], _scopeId: \"data-v-1b4cbb68\", components: { bBtn: bBtn }, data: function data() {\n    return { is_visible: !1, return_focus: this.returnFocus || null };\n  }, model: { prop: \"visible\", event: \"change\" }, computed: { body: function body() {\n      if (\"undefined\" != typeof document) return document.querySelector(\"body\");\n    } }, watch: { visible: function visible(t, e) {\n      t !== e && (t ? this.show() : this.hide());\n    } }, props: { id: { type: String, default: null }, title: { type: String, default: \"\" }, size: { type: String, default: \"md\" }, buttonSize: { type: String, default: \"md\" }, noFade: { type: Boolean, default: !1 }, noCloseOnBackdrop: { type: Boolean, default: !1 }, noCloseOnEsc: { type: Boolean, default: !1 }, noAutoFocus: { type: Boolean, default: !1 }, hideHeader: { type: Boolean, default: !1 }, hideFooter: { type: Boolean, default: !1 }, okOnly: { type: Boolean, default: !1 }, okDisabled: { type: Boolean, default: !1 }, hideHeaderClose: { type: Boolean, default: !1 }, visible: { type: Boolean, default: !1 }, returnFocus: { default: null }, headerCloseLabel: { type: String, default: \"Close\" }, closeTitle: { type: String, default: \"Close\" }, okTitle: { type: String, default: \"OK\" } }, methods: { show: function show() {\n      this.is_visible || (this.$emit(\"show\"), this.is_visible = !0, this.$root.$emit(\"shown::modal\", this.id), this.body.classList.add(\"modal-open\"), this.$emit(\"shown\"), this.$emit(\"change\", !0), \"undefined\" != typeof document && (document.removeEventListener(\"focusin\", this.enforceFocus, !1), document.addEventListener(\"focusin\", this.enforceFocus, !1)));\n    }, hide: function hide(t) {\n      if (this.is_visible) {\n        var e = !1,\n            n = { isOK: t, cancel: function cancel() {\n            e = !0;\n          } };this.$emit(\"change\", !1), this.$emit(\"hide\", n), !0 === t ? this.$emit(\"ok\", n) : !1 === t && this.$emit(\"cancel\", n), e || (\"undefined\" != typeof document && (document.removeEventListener(\"focusin\", this.enforceFocus, !1), this.returnFocusTo()), this.is_visible = !1, this.$root.$emit(\"hidden::modal\", this.id), this.$emit(\"hidden\", n), this.body.classList.remove(\"modal-open\"));\n      }\n    }, onClickOut: function onClickOut() {\n      this.is_visible && !this.noCloseOnBackdrop && this.hide();\n    }, onEsc: function onEsc() {\n      this.is_visible && !this.noCloseOnEsc && this.hide();\n    }, focusFirst: function focusFirst() {\n      var t = this;\"undefined\" != typeof document && this.$nextTick(function () {\n        if (!document.activeElement || !t.$refs.content.contains(document.activeElement)) {\n          var e;t.noAutoFocus || (t.$refs.body && (e = findFirstVisible(t.$refs.body, FOCUS_SELECTOR)), !e && t.$refs.footer && (e = findFirstVisible(t.$refs.footer, FOCUS_SELECTOR)), !e && t.$refs.header && (e = findFirstVisible(t.$refs.header, FOCUS_SELECTOR))), e || (e = t.$refs.content), e && e.focus && e.focus();\n        }\n      });\n    }, returnFocusTo: function returnFocusTo() {\n      var t = this.returnFocus || this.return_focus || null;t && (\"string\" == typeof t && (t = document.querySelector(t)), t && t.$el && \"function\" == typeof t.$el.focus ? t.$el.focus() : t && \"function\" == typeof t.focus && t.focus());\n    }, enforceFocus: function enforceFocus(t) {\n      this.is_visible && document !== t.target && this.$refs.content && this.$refs.content !== t.target && !this.$refs.content.contains(t.target) && this.$refs.content.focus();\n    } }, created: function created() {\n    var t = this;this.$root.$on(\"show::modal\", function (e, n) {\n      e === t.id && (t.return_focus = n || null, t.show());\n    }), this.$root.$on(\"hide::modal\", function (e) {\n      e === t.id && t.hide();\n    });\n  }, mounted: function mounted() {\n    !0 === this.visible && this.show();\n  }, destroyed: function destroyed() {\n    \"undefined\" != typeof document && document.removeEventListener(\"focusin\", this.enforceFocus, !1);\n  } },\n    nav = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(t.type, { tag: \"component\", class: t.classObject }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return { nav: !0, \"navbar-nav\": this.isNavBar, \"nav-tabs\": this.tabs, \"nav-pills\": this.pills, \"flex-column\": this.vertical, \"nav-fill\": this.fill, \"nav-justified\": this.justified };\n    } }, props: { type: { type: String, default: \"ul\" }, fill: { type: Boolean, default: !1 }, justified: { type: Boolean, default: !1 }, tabs: { type: Boolean, default: !1 }, pills: { type: Boolean, default: !1 }, vertical: { type: Boolean, default: !1 }, isNavBar: { type: Boolean, default: !1 } } },\n    navItem = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"li\", { staticClass: \"nav-item\" }, [n(\"b-link\", t._b({ staticClass: \"nav-link\", on: { click: function click(e) {\n          t.$emit(\"click\", e);\n        } } }, \"b-link\", t.linkProps), [t._t(\"default\")], 2)], 1);\n  }, staticRenderFns: [], components: { bLink: bLink }, props: props, computed: { linkProps: computed.linkProps } },\n    navItemDropdown = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"li\", { class: [\"nav-item\", \"dropdown\", { dropup: t.dropup, show: t.visible }], attrs: { id: t.id || null } }, [n(\"a\", { ref: \"button\", class: [\"nav-link\", t.dropdownToggle, { disabled: t.disabled }], attrs: { href: \"#\", id: t.id ? t.id + \"__BV_button_\" : null, \"aria-haspopup\": \"true\", \"aria-expanded\": t.visible ? \"true\" : \"false\", disabled: t.disabled }, on: { click: function click(e) {\n          e.stopPropagation(), e.preventDefault(), t.toggle(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.stopPropagation(), e.preventDefault(), t.toggle(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.stopPropagation(), e.preventDefault(), t.toggle(e);\n        }] } }, [t._t(\"text\", [n(\"span\", { domProps: { innerHTML: t._s(t.text) } })])], 2), n(\"div\", { ref: \"menu\", class: [\"dropdown-menu\", { \"dropdown-menu-right\": t.right }], attrs: { role: \"menu\", \"aria-labelledby\": t.id ? t.id + \"__BV_button_\" : null }, on: { keyup: function keyup(e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"esc\", 27)) return null;t.onEsc(e);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"tab\", 9)) return null;t.onTab(e);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"up\", 38)) return null;t.focusNext(e, !0);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"down\", 40)) return null;t.focusNext(e, !1);\n        }], mouseover: function mouseover(e) {\n          t.focusHovered(e);\n        } } }, [t._t(\"default\")], 2)]);\n  }, staticRenderFns: [], mixins: [clickOut, dropdown], data: function data() {\n    return { visible: !1 };\n  }, computed: { dropdownToggle: function dropdownToggle() {\n      return this.caret ? \"dropdown-toggle\" : \"\";\n    } }, props: { id: { type: String }, caret: { type: Boolean, default: !0 } }, methods: { clickOutListener: function clickOutListener() {\n      this.visible = !1;\n    } } },\n    navToggle = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"button\", { class: t.classObject, attrs: { type: \"button\", \"aria-label\": t.label, \"aria-controls\": t.target.id ? t.target.id : t.target, \"aria-expanded\": t.toggleState ? \"true\" : \"false\" }, on: { click: t.onclick } }, [n(\"span\", { staticClass: \"navbar-toggler-icon\" })]);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"navbar-toggler\", \"navbar-toggler-\" + this.position];\n    } }, data: function data() {\n    return { toggleState: !1 };\n  }, props: { label: { type: String, default: \"Toggle navigation\" }, position: { type: String, default: \"right\" }, target: { required: !0 } }, methods: { onclick: function onclick() {\n      var t = this.target;t.toggle && t.toggle(), this.$root.$emit(\"collapse::toggle\", this.target);\n    } }, created: function created() {\n    var t = this;this.$root.$on(\"collapse::toggle::state\", function (e, n) {\n      e !== t.target && e !== t.target.id || (t.toggleState = n);\n    });\n  } },\n    navbar = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"nav\", { class: t.classObject }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"navbar\", this.type ? \"navbar-\" + this.type : null, this.variant ? \"bg-\" + this.variant : null, this.fixed ? \"fixed-\" + this.fixed : null, this.sticky ? \"sticky-top\" : null, this.toggleable ? this.toggleableClass : null];\n    }, toggleableClass: function toggleableClass() {\n      var t = \"navbar-toggleable\";return this.toggleBreakpoint && (t += \"-\" + this.toggleBreakpoint), t;\n    } }, props: { type: { type: String, default: \"light\" }, variant: { type: String }, toggleable: { type: Boolean, default: !1 }, toggleBreakpoint: { type: String, default: null }, fixed: { type: String }, sticky: { type: Boolean, default: !1 } } },\n    navText = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"span\", { staticClass: \"navbar-text\" }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], props: {} },\n    navForm = { render: function render() {\n    var t = this,\n        e = t.$createElement;return (t._self._c || e)(\"b-form\", { attrs: { id: t.id || null, inline: \"\" } }, [t._t(\"default\")], 2);\n  }, staticRenderFns: [], components: [bForm], props: { id: { type: String } } },\n    ELLIPSIS_THRESHOLD = 3,\n    pagination = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"ul\", { class: [\"pagination\", t.btnSize], attrs: { role: t.role, \"aria-disabled\": t.disabled ? \"true\" : \"false\", \"aria-label\": t.ariaLabel ? t.ariaLabel : null }, on: { focusin: function focusin(e) {\n          if (e.target !== e.currentTarget) return null;t.focusCurrent(e);\n        }, keydown: [function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"left\", 37) ? \"button\" in e && 0 !== e.button ? null : (e.preventDefault(), void t.focusPrev(e)) : null;\n        }, function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"right\", 39) ? \"button\" in e && 2 !== e.button ? null : (e.preventDefault(), void t.focusNext(e)) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"left\", 37)) && e.shiftKey ? \"button\" in e && 0 !== e.button ? null : (e.preventDefault(), void t.focusFirst(e)) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"right\", 39)) && e.shiftKey ? \"button\" in e && 2 !== e.button ? null : (e.preventDefault(), void t.focusLast(e)) : null;\n        }] } }, [t.hideGotoEndButtons ? t._e() : [t.isActive(1) || t.disabled ? n(\"li\", { staticClass: \"page-item disabled\", attrs: { \"aria-hidden\": \"true\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.firstText) } })]) : n(\"li\", { staticClass: \"page-item\" }, [n(\"a\", { staticClass: \"page-link\", attrs: { role: t.buttonRole, \"aria-label\": t.labelFirstPage, tabindex: \"-1\", href: \"#\" }, on: { click: function click(e) {\n          e.preventDefault(), t.setPage(e, 1);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.preventDefault(), t.setPage(e, 1);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.preventDefault(), t.setPage(e, 1);\n        }] } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" }, domProps: { innerHTML: t._s(t.firstText) } })])])], t.isActive(1) || t.disabled ? n(\"li\", { staticClass: \"page-item disabled\", attrs: { \"aria-hidden\": \"true\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.prevText) } })]) : n(\"li\", { staticClass: \"page-item\" }, [n(\"a\", { staticClass: \"page-link\", attrs: { role: t.buttonRole, \"aria-label\": t.labelPrevPage, tabindex: \"-1\", href: \"#\" }, on: { click: function click(e) {\n          e.preventDefault(), t.setPage(e, t.currentPage - 1);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.preventDefault(), t.setPage(e, t.currentPage - 1);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.preventDefault(), t.setPage(e, t.currentPage - 1);\n        }] } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" }, domProps: { innerHTML: t._s(t.prevText) } })])]), t.showFirstDots ? n(\"li\", { staticClass: \"page-item disabled hidden-xs-down\", attrs: { role: \"seperator\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.ellipsisText) } })]) : t._e(), t._l(t.pageList, function (e) {\n      return n(\"li\", { key: e.number, class: t.pageItemClasses(e) }, [n(\"a\", { class: t.pageLinkClasses(e), attrs: { role: t.buttonRole, disabled: t.disabled, \"aria-disabled\": t.disabled ? \"true\" : \"false\", \"aria-label\": t.labelPage + \" \" + e.number, \"aria-current\": t.isActive(e) ? \"true\" : \"false\", \"aria-posinset\": e.number, \"aria-setsize\": t.numberOfPages, tabindex: \"-1\" }, on: { click: function click(n) {\n            n.preventDefault(), t.setPage(n, e.number);\n          }, keydown: [function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"enter\", 13)) return null;n.preventDefault(), t.setPage(n, e.number);\n          }, function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"space\", 32)) return null;n.preventDefault(), t.setPage(n, e.number);\n          }] } }, [t._v(t._s(e.number))])]);\n    }), t.showLastDots ? n(\"li\", { staticClass: \"page-item disabled hidden-xs-down\", attrs: { role: \"seperator\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.ellipsisText) } })]) : t._e(), t.isActive(t.numberOfPages) || t.disabled ? n(\"li\", { staticClass: \"page-item disabled\", attrs: { \"aria-hidden\": \"true\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.nextText) } })]) : n(\"li\", { staticClass: \"page-item\" }, [n(\"a\", { staticClass: \"page-link\", attrs: { role: t.buttonRole, \"aria-label\": t.labelNextPage, tabindex: \"-1\" }, on: { click: function click(e) {\n          e.preventDefault(), t.setPage(e, t.currentPage + 1);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.preventDefault(), t.setPage(e, t.currentPage + 1);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.preventDefault(), t.setPage(e, t.currentPage + 1);\n        }] } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" }, domProps: { innerHTML: t._s(t.nextText) } })])]), t.hideGotoEndButtons ? t._e() : [t.isActive(t.numberOfPages) || t.disabled ? n(\"li\", { staticClass: \"page-item disabled\", attrs: { \"aria-hidden\": \"true\" } }, [n(\"span\", { staticClass: \"page-link\", domProps: { innerHTML: t._s(t.lastText) } })]) : n(\"li\", { staticClass: \"page-item\" }, [n(\"a\", { staticClass: \"page-link\", attrs: { role: t.buttonRole, \"aria-label\": t.labelLastPage, tabindex: \"-1\" }, on: { click: function click(e) {\n          e.preventDefault(), t.setPage(e, t.numberOfPages);\n        }, keydown: [function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.preventDefault(), t.setPage(e, t.numberOfPages);\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.preventDefault(), t.setPage(e, t.numberOfPages);\n        }] } }, [n(\"span\", { attrs: { \"aria-hidden\": \"true\" }, domProps: { innerHTML: t._s(t.lastText) } })])])]], 2);\n  }, staticRenderFns: [], _scopeId: \"data-v-2792960b\", data: function data() {\n    return { showFirstDots: !1, showLastDots: !1, currentPage: this.value };\n  }, computed: { numberOfPages: function numberOfPages() {\n      var t = Math.ceil(this.totalRows / this.perPage);return t < 1 ? 1 : t;\n    }, btnSize: function btnSize() {\n      return this.size ? \"pagination-\" + this.size : \"\";\n    }, pageList: function pageList() {\n      this.currentPage > this.numberOfPages ? this.currentPage = this.numberOfPages : this.currentPage < 1 && (this.currentPage = 1), this.showFirstDots = !1, this.showLastDots = !1;var t = this.limit,\n          e = 1;this.numberOfPages <= this.limit ? t = this.numberOfPages : this.currentPage < this.limit - 1 && this.limit > ELLIPSIS_THRESHOLD ? this.hideEllipsis || (t = this.limit - 1, this.showLastDots = !0) : this.numberOfPages - this.currentPage + 2 < this.limit && this.limit > ELLIPSIS_THRESHOLD ? (this.hideEllipsis || (this.showFirstDots = !0, t = this.limit - 1), e = this.numberOfPages - t + 1) : (this.limit > ELLIPSIS_THRESHOLD && !this.hideEllipsis && (this.showFirstDots = !0, this.showLastDots = !0, t = this.limit - 2), e = this.currentPage - Math.floor(t / 2)), e < 1 ? e = 1 : e > this.numberOfPages - t && (e = this.numberOfPages - t + 1);var n = makePageArray(e, t);if (n.length > 3) {\n        var i = this.currentPage - e;if (0 === i) for (var o = 3; o < n.length; o++) {\n          n[o].className = \"hidden-xs-down\";\n        } else if (i === n.length - 1) for (var r = 0; r < n.length - 3; r++) {\n          n[r].className = \"hidden-xs-down\";\n        } else {\n          for (var s = 0; s < i - 1; s++) {\n            n[s].className = \"hidden-xs-down\";\n          }for (var a = n.length - 1; a > i + 1; a--) {\n            n[a].className = \"hidden-xs-down\";\n          }\n        }\n      }return n;\n    } }, methods: { isActive: function isActive(t) {\n      return t === this.currentPage;\n    }, pageItemClasses: function pageItemClasses(t) {\n      var e = this.isActive(t.number);return [\"page-item\", this.disabled ? \"disabled\" : \"\", e ? \"active\" : \"\", t.className];\n    }, pageLinkClasses: function pageLinkClasses(t) {\n      var e = this.isActive(t.number);return [\"page-link\", this.disabled ? \"disabled\" : \"\", e ? \"active\" : \"\"];\n    }, setPage: function setPage(t, e) {\n      var n = this;if (this.disabled) return t.preventDefault(), void t.stopPropagation();e > this.numberOfPages ? this.currentPage = this.numberOfPages : e < 1 ? this.currentpage = 1 : this.currentPage = e, this.$nextTick(function () {\n        isVisible$1(t.target) && t.target.focus ? t.target.focus() : n.focusCurrent();\n      }), this.$emit(\"change\", this.currentPage);\n    }, getButtons: function getButtons() {\n      return Array.prototype.slice.call(this.$el.querySelectorAll(\"a.page-link\")).filter(function (t) {\n        return isVisible$1(t);\n      });\n    }, setBtnFocus: function setBtnFocus(t) {\n      this.$nextTick(function () {\n        t.focus();\n      });\n    }, focusFirst: function focusFirst() {\n      var t = this.getButtons().find(function (t) {\n        return !t.disabled;\n      });t && t.focus && t !== document.activeElement && this.setBtnFocus(t);\n    }, focusLast: function focusLast() {\n      var t = this.getButtons().reverse().find(function (t) {\n        return !t.disabled;\n      });t && t.focus && t !== document.activeElement && this.setBtnFocus(t);\n    }, focusCurrent: function focusCurrent() {\n      var t = this,\n          e = this.getButtons().find(function (e) {\n        return parseInt(e.getAttribute(\"aria-posinset\"), 10) === t.currentPage;\n      });e && e.focus ? this.setBtnFocus(e) : this.focusFirst();\n    }, focusPrev: function focusPrev() {\n      var t = this.getButtons(),\n          e = t.indexOf(document.activeElement);e > 0 && !t[e - 1].disabled && t[e - 1].focus && this.setBtnFocus(t[e - 1]);\n    }, focusNext: function focusNext() {\n      var t = this.getButtons(),\n          e = t.indexOf(document.activeElement);e < t.length - 1 && !t[e + 1].disabled && t[e + 1].focus && this.setBtnFocus(t[e + 1]);\n    } }, watch: { currentPage: function currentPage(t, e) {\n      t !== e && this.$emit(\"input\", t);\n    }, value: function value(t, e) {\n      t !== e && (this.currentPage = t);\n    } }, props: { disabled: { type: Boolean, default: !1 }, value: { type: Number, default: 1 }, limit: { type: Number, default: 5 }, perPage: { type: Number, default: 20 }, totalRows: { type: Number, default: 20 }, size: { type: String, default: \"md\" }, hideGotoEndButtons: { type: Boolean, default: !1 }, ariaLabel: { type: String, default: \"Pagination\" }, labelFirstPage: { type: String, default: \"Goto first page\" }, firstText: { type: String, default: \"&laquo\" }, labelPrevPage: { type: String, default: \"Goto previous page\" }, prevText: { type: String, default: \"&lsaquo;\" }, labelNextPage: { type: String, default: \"Goto next page\" }, nextText: { type: String, default: \"&rsaquo;\" }, labelLastPage: { type: String, default: \"Goto last page\" }, lastText: { type: String, default: \"&raquo;\" }, labelPage: { type: String, default: \"Goto page\" }, hideEllipsis: { type: Boolean, default: !1 }, ellipsisText: { type: String, default: \"&hellip;\" }, role: { type: String, default: \"group\" }, buttonRole: { type: String, default: \"button\" } } },\n    TRIGGER_LISTENERS = { click: { click: \"toggle\" }, hover: { mouseenter: \"show\", mouseleave: \"hide\" }, focus: { focus: \"show\", blur: \"hide\" } },\n    PLACEMENT_PARAMS = { top: \"bottom center\", bottom: \"top center\", left: \"middle right\", right: \"middle left\" },\n    TETHER_CLASS_PREFIX = \"bs-tether\",\n    TETHER_CLASSES = { element: !1, enabled: !1 },\n    TRANSITION_DURATION = 150,\n    popover$1 = { props: { constraints: { type: Array, default: function _default() {\n        return [];\n      } }, debounce: { type: [Number], default: 300, validator: function validator(t) {\n        return t >= 0;\n      } }, delay: { type: [Number, Object], default: 0, validator: function validator(t) {\n        return \"number\" == typeof t ? t >= 0 : null !== t && \"object\" == (typeof t === \"undefined\" ? \"undefined\" : _typeof(t)) && \"number\" == typeof t.show && \"number\" == typeof t.hide && t.show >= 0 && t.hide >= 0;\n      } }, offset: { type: String, default: \"0 0\", validator: function validator(t) {\n        return (/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)\n        );\n      } }, placement: { type: String, default: \"top\", validator: function validator(t) {\n        return -1 !== Object.keys(PLACEMENT_PARAMS).indexOf(t);\n      } }, popoverStyle: { type: Object, default: null }, show: { type: Boolean, default: null }, targetOffset: { type: String, default: \"0 0\", validator: function validator(t) {\n        return (/^((0\\s?)|([+-]?[0-9]+(px|%)\\s?)){2}$/.test(t)\n        );\n      } }, triggers: { type: [Boolean, String, Array], default: function _default() {\n        return [\"click\", \"focus\"];\n      }, validator: function validator(t) {\n        if (!1 === t || \"\" === t) return !0;if (\"string\" == typeof t) return -1 !== Object.keys(TRIGGER_LISTENERS).indexOf(t);if (Array.isArray(t)) {\n          var e = Object.keys(TRIGGER_LISTENERS);return t.forEach(function (t) {\n            if (-1 === e.indexOf(t)) return !1;\n          }), !0;\n        }return !1;\n      } } }, data: function data() {\n    return { triggerState: this.show, classState: this.show, lastEvent: null };\n  }, computed: { normalizedTriggers: function normalizedTriggers() {\n      return !1 === this.triggers ? [] : \"string\" == typeof this.triggers ? [this.triggers] : this.triggers;\n    }, popoverAlignment: function popoverAlignment() {\n      return this.placement && \"default\" !== this.placement ? \"popover-\" + this.placement : \"popover-top\";\n    }, showState: function showState() {\n      return !1 !== this.show && (this.triggerState || this.show);\n    } }, watch: { constraints: function constraints() {\n      this.setOptions();\n    }, normalizedTriggers: function normalizedTriggers(t, e) {\n      this.updateListeners(t, e);\n    }, offset: function offset() {\n      this.setOptions();\n    }, placement: function placement() {\n      this.setOptions();\n    }, showState: function showState(t) {\n      var e = this,\n          n = this.getDelay(t);clearTimeout(this.$data._timeout), n ? this.$data._timeout = setTimeout(function () {\n        return e.togglePopover(t);\n      }, n) : this.togglePopover(t);\n    } }, methods: { addListener: function addListener(t) {\n      var e = this;for (var n in TRIGGER_LISTENERS[t]) {\n        e.$data._trigger.addEventListener(n, function (t) {\n          return e.eventHandler(t);\n        });\n      }\n    }, destroyTether: function destroyTether() {\n      if (this.$data._tether && !this.showState) {\n        this.$data._tether.destroy(), this.$data._tether = null;var t = new RegExp(\"(^|[^-]\\\\b)(\" + TETHER_CLASS_PREFIX + \"\\\\S*)\", \"g\");this.$data._trigger.className = this.$data._trigger.className.replace(t, \"\");\n      }\n    }, eventHandler: function eventHandler(t) {\n      var e = this;if (!(this.normalizedTriggers.length > 1 && this.debounce > 0 && null !== this.lastEvent && t.timeStamp <= this.lastEvent + this.debounce)) for (var n in TRIGGER_LISTENERS) {\n        for (var i in TRIGGER_LISTENERS[n]) {\n          if (i === t.type) {\n            var o = TRIGGER_LISTENERS[n][i];return void ((\"toggle\" === o || e.triggerState && \"hide\" === o || !e.triggerState && \"show\" === o) && (e.triggerState = !e.triggerState, e.lastEvent = t.timeStamp));\n          }\n        }\n      }\n    }, getDelay: function getDelay(t) {\n      return \"object\" == _typeof(this.delay) ? t ? this.delay.show : this.delay.hide : this.delay;\n    }, getTetherOptions: function getTetherOptions() {\n      return { attachment: PLACEMENT_PARAMS[this.placement], element: this.$data._popover, target: this.$data._trigger, classes: TETHER_CLASSES, classPrefix: TETHER_CLASS_PREFIX, offset: this.offset, constraints: this.constraints, targetOffset: this.targetOffset };\n    }, hidePopover: function hidePopover() {\n      var t = this;this.classState = !1, clearTimeout(this.$data._timeout), this.$data._timeout = setTimeout(function () {\n        t.$data._popover.style.display = \"none\", t.destroyTether();\n      }, TRANSITION_DURATION);\n    }, refreshPosition: function refreshPosition() {\n      var t = this;this.$data._tether && this.$nextTick(function () {\n        t.$data._tether.position();\n      });\n    }, removeListener: function removeListener(t) {\n      var e = this;for (var n in TRIGGER_LISTENERS[t]) {\n        e.$data._trigger.removeEventListener(n, function (t) {\n          return e.eventHandler(t);\n        });\n      }\n    }, setOptions: function setOptions() {\n      this.$data._tether && this.$data._tether.setOptions(this.getTetherOptions());\n    }, showPopover: function showPopover() {\n      var t = this;clearTimeout(this.$data._timeout), this.$data._tether || (this.$data._tether = new __WEBPACK_IMPORTED_MODULE_0_tether___default.a(this.getTetherOptions())), this.$data._popover.style.display = \"block\", this.refreshPosition(), this.$nextTick(function () {\n        t.classState = !0;\n      });\n    }, togglePopover: function togglePopover(t) {\n      this.$emit(\"showChange\", t), t ? (this.showPopover(), this.$root.$emit(\"shown::popover\")) : (this.hidePopover(), this.$root.$emit(\"hidden::popover\"));\n    }, updateListeners: function updateListeners(t, e) {\n      var n = this;void 0 === e && (e = []);var i = [],\n          o = [];t.forEach(function (t) {\n        -1 === e.indexOf(t) && i.push(t);\n      }), e.forEach(function (e) {\n        -1 === t.indexOf(e) && o.push(e);\n      }), i.forEach(function (t) {\n        return n.addListener(t);\n      }), o.forEach(function (t) {\n        return n.removeListener(t);\n      });\n    } }, created: function created() {\n    var t = this;this.$root.$on(\"hide::popover\", function () {\n      t.triggerState = !1;\n    });\n  }, mounted: function mounted() {\n    this.$data._trigger = this.$refs.trigger.children[0] || this.$refs.trigger, this.$data._popover = this.$refs.popover, this.$data._popover.style.display = \"none\", this.$data._tether = new __WEBPACK_IMPORTED_MODULE_0_tether___default.a(this.getTetherOptions()), this.$data._timeout = 0, this.updateListeners(this.normalizedTriggers), this.showState && this.showPopover();\n  }, updated: function updated() {\n    this.refreshPosition();\n  }, beforeDestroy: function beforeDestroy() {\n    var t = this;this.normalizedTriggers.forEach(function (e) {\n      return t.removeListener(e);\n    }), clearTimeout(this.$data._timeout), this.destroyTether();\n  }, destroyed: function destroyed() {\n    this.$data._popover.parentElement === document.body && document.body.removeChild(this.$data._popover);\n  } },\n    popover = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", [n(\"span\", { ref: \"trigger\" }, [t._t(\"default\")], 2), n(\"div\", { ref: \"popover\", class: [\"popover\", \"fade\", t.classState ? \"show\" : \"\", t.popoverAlignment], style: t.popoverStyle, attrs: { tabindex: \"-1\" }, on: { focus: function focus(e) {\n          t.$emit(\"focus\");\n        }, blur: function blur(e) {\n          t.$emit(\"blur\");\n        } } }, [n(\"div\", { staticClass: \"popover-arrow\" }), t.title ? n(\"h3\", { staticClass: \"popover-title\", domProps: { innerHTML: t._s(t.title) } }) : t._e(), n(\"div\", { staticClass: \"popover-content\" }, [n(\"div\", { staticClass: \"popover-content-wrapper\" }, [t._t(\"content\", [n(\"span\", { domProps: { innerHTML: t._s(t.content) } })])], 2)])])]);\n  }, staticRenderFns: [], mixins: [popover$1], props: { title: { type: String, default: \"\" }, content: { type: String, default: \"\" }, popoverStyle: { type: Object, default: null } } },\n    progress = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"progress\" }, [n(\"transition\", [n(\"div\", { class: t.classObject, style: t.styleObject, attrs: { role: \"progressbar\", \"aria-valuenow\": t.value, \"aria-valuemin\": 0, \"aria-valuemax\": t.max } }, [t._t(\"default\", [t.showProgress ? [t._v(t._s(t.progress) + \"%\")] : t.showValue ? [t._v(t._s(t.value))] : t._e()])], 2)])], 1);\n  }, staticRenderFns: [], computed: { classObject: function classObject() {\n      return [\"progress-bar\", this.progressVariant, this.striped || this.animated ? \"progress-bar-striped\" : \"\", this.animated ? \"progress-bar-animated\" : \"\"];\n    }, styleObject: function styleObject() {\n      return { width: this.progress + \"%\" };\n    }, progressVariant: function progressVariant() {\n      return this.variant ? \"bg-\" + this.variant : null;\n    }, progress: function progress() {\n      var t = Math.pow(10, this.precision);return Math.round(100 * t * this.value / this.max) / t;\n    } }, props: { striped: { type: Boolean, default: !1 }, animated: { type: Boolean, default: !1 }, precision: { type: Number, default: 0 }, value: { type: Number, default: 0 }, max: { type: Number, default: 100 }, variant: { type: String, default: null }, showProgress: { type: Boolean, default: !1 }, showValue: { type: Boolean, default: !1 } } },\n    toString = function toString(t) {\n  return t ? t instanceof Object ? Object.keys(t).map(function (e) {\n    return toString(t[e]);\n  }).join(\" \") : String(t) : \"\";\n},\n    recToString = function recToString(t) {\n  if (!(t instanceof Object)) return \"\";var e = { state: !0, _rowVariant: !0 };return toString(Object.keys(t).reduce(function (n, i) {\n    return e[i] || (n[i] = t[i]), n;\n  }, {}));\n},\n    defaultSortCompare = function defaultSortCompare(t, e, n) {\n  return \"number\" == typeof t[n] && \"number\" == typeof e[n] ? t[n] < e[n] ? -1 : t[n] > e[n] ? 1 : 0 : toString(t[n]).localeCompare(toString(e[n]), void 0, { numeric: !0 });\n},\n    table = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"table\", { class: t.tableClass, attrs: { id: t.id || null, role: \"grid\", \"aria-busy\": t.busy ? \"true\" : \"false\" } }, [n(\"thead\", { class: t.headClass }, [n(\"tr\", { attrs: { role: \"row\" } }, t._l(t.fields, function (e, i) {\n      return n(\"th\", { key: i, class: t.fieldClass(e, i), style: e.thStyle || {}, attrs: { \"aria-label\": e.sortable ? t.sortDesc && t.sortBy === i ? t.labelSortAsc : t.labelSortDesc : null, \"aria-sort\": e.sortable && t.sortBy === i ? t.sortDesc ? \"descending\" : \"ascending\" : null, tabindex: e.sortable ? \"0\" : null }, on: { click: function click(n) {\n            n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }, keydown: [function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"enter\", 13)) return null;n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }, function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"space\", 32)) return null;n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }] } }, [t._t(\"HEAD_\" + i, [n(\"div\", { domProps: { innerHTML: t._s(e.label) } })], { label: e.label, column: i, field: e })], 2);\n    }))]), t.footClone ? n(\"tfoot\", { class: t.footClass }, [n(\"tr\", { attrs: { role: \"row\" } }, t._l(t.fields, function (e, i) {\n      return n(\"th\", { key: i, class: t.fieldClass(e, i), style: e.thStyle || {}, attrs: { \"aria-label\": e.sortable ? t.sortDesc && t.sortBy === i ? t.labelSortAsc : t.labelSortDesc : null, \"aria-sort\": e.sortable && t.sortBy === i ? t.sortDesc ? \"descending\" : \"ascending\" : null, tabindex: e.sortable ? \"0\" : null }, on: { click: function click(n) {\n            n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }, keydown: [function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"enter\", 13)) return null;n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }, function (n) {\n            if (!(\"button\" in n) && t._k(n.keyCode, \"space\", 32)) return null;n.stopPropagation(), n.preventDefault(), t.headClicked(n, e, i);\n          }] } }, [t.$scopedSlots[\"FOOT_\" + i] ? t._t(\"FOOT_\" + i, [n(\"div\", { domProps: { innerHTML: t._s(e.label) } })], { label: e.label, column: i, field: e }) : t._t(\"HEAD_\" + i, [n(\"div\", { domProps: { innerHTML: t._s(e.label) } })], { label: e.label, column: i, field: e })], 2);\n    }))]) : t._e(), n(\"tbody\", [t._l(t._items, function (e, i) {\n      return n(\"tr\", { key: i, class: t.rowClass(e), attrs: { role: \"row\" }, on: { click: function click(n) {\n            t.rowClicked(n, e, i);\n          }, hover: function hover(n) {\n            t.rowHovered(n, e, i);\n          } } }, t._l(t.fields, function (o, r) {\n        return n(\"td\", { key: r, class: t.tdClass(o, e, r) }, [t._t(r, [t._v(t._s(e[r]))], { value: e[r], item: e, index: i })], 2);\n      }));\n    }), !t.showEmpty || t._items && 0 !== t._items.length ? t._e() : n(\"tr\", { attrs: { role: \"row\" } }, [n(\"td\", { attrs: { colspan: Object.keys(t.fields).length } }, [t.filter ? n(\"div\", { attrs: { role: \"alert\", \"aria-live\": \"polite\" } }, [t._t(\"emptyfiltered\", [n(\"div\", { staticClass: \"text-center my-2\", domProps: { innerHTML: t._s(t.emptyFilteredText) } })])], 2) : n(\"div\", { attrs: { role: \"alert\", \"aria-live\": \"polite\" } }, [t._t(\"empty\", [n(\"div\", { staticClass: \"text-center my-2\", domProps: { innerHTML: t._s(t.emptyText) } })])], 2)])])], 2)], 1);\n  }, staticRenderFns: [], data: function data() {\n    return { sortBy: null, sortDesc: !0, localItems: [] };\n  }, props: { id: { type: String, default: \"\" }, items: { type: [Array, Function], default: function _default() {\n        return this && this.itemsProvider ? (warn(\"b-table: prop items-provider has been deprecated. Pass a function to items instead\"), this.itemsProvider) : [];\n      } }, fields: { type: Object, default: {} }, striped: { type: Boolean, default: !1 }, bordered: { type: Boolean, default: !1 }, inverse: { type: Boolean, default: !1 }, hover: { type: Boolean, default: !1 }, small: { type: Boolean, default: !1 }, responsive: { type: Boolean, default: !1 }, headVariant: { type: String, default: \"\" }, footVariant: { type: String, default: \"\" }, perPage: { type: Number, default: null }, currentPage: { type: Number, default: 1 }, filter: { type: [String, RegExp, Function], default: null }, sortCompare: { type: Function, default: null }, itemsProvider: { type: Function, default: null }, noProviderPaging: { type: Boolean, default: !1 }, noProviderSorting: { type: Boolean, default: !1 }, noProviderFiltering: { type: Boolean, default: !1 }, busy: { type: Boolean, default: !1 }, value: { type: Array, default: function _default() {\n        return [];\n      } }, footClone: { type: Boolean, default: !1 }, labelSortAsc: { type: String, default: \"Click to sort Ascending\" }, labelSortDesc: { type: String, default: \"Click to sort Descending\" }, showEmpty: { type: Boolean, default: !1 }, emptyText: { type: String, default: \"There are no records to show\" }, emptyFilteredText: { type: String, default: \"There are no records matching your request\" } }, watch: { items: function items(t, e) {\n      e !== t && this._providerUpdate();\n    }, sortDesc: function sortDesc(t, e) {\n      e === t || this.noProviderSorting || this._providerUpdate();\n    }, sortBy: function sortBy(t, e) {\n      e === t || this.noProviderSorting || this._providerUpdate();\n    }, perPage: function perPage(t, e) {\n      e === t || this.noProviderPaging || this._providerUpdate();\n    }, currentPage: function currentPage(t, e) {\n      e === t || this.noProviderPaging || this._providerUpdate();\n    }, filter: function filter(t, e) {\n      e === t || this.noProviderFiltering || this._providerUpdate();\n    } }, mounted: function mounted() {\n    var t = this;this.hasProvider && this._providerUpdate(), this.$root.$on(\"table::refresh\", function (e) {\n      e === t.id && t._providerUpdate();\n    });\n  }, computed: { tableClass: function tableClass() {\n      return [\"table\", \"b-table\", this.striped ? \"table-striped\" : \"\", this.hover ? \"table-hover\" : \"\", this.inverse ? \"table-inverse\" : \"\", this.bordered ? \"table-bordered\" : \"\", this.responsive ? \"table-responsive\" : \"\", this.small ? \"table-sm\" : \"\"];\n    }, headClass: function headClass() {\n      return this.headVariant ? \"thead-\" + this.headVariant : \"\";\n    }, footClass: function footClass() {\n      var t = this.footVariant || this.headVariant || null;return t ? \"thead-\" + t : \"\";\n    }, hasProvider: function hasProvider() {\n      return this.items instanceof Function;\n    }, providerFiltering: function providerFiltering() {\n      return Boolean(this.hasProvider && !this.noProviderFiltering);\n    }, providerSorting: function providerSorting() {\n      return Boolean(this.hasProvider && !this.noProviderSorting);\n    }, providerPaging: function providerPaging() {\n      return Boolean(this.hasProvider && !this.noProviderPaging);\n    }, context: function context() {\n      return { perPage: this.perPage, currentPage: this.currentPage, filter: this.filter, sortBy: this.sortBy, sortDesc: this.sortDesc };\n    }, _items: function _items() {\n      var t = this,\n          e = this.perPage,\n          n = this.currentPage,\n          i = this.filter,\n          o = (this.sortBy, this.sortDesc, this.sortCompare || defaultSortCompare),\n          r = this.hasProvider ? this.localItems : this.items;if (!r) return this.$nextTick(this._providerUpdate), [];if (r = r.slice(), i && !this.providerFiltering) if (i instanceof Function) r = r.filter(i);else {\n        var s;s = i instanceof RegExp ? i : new RegExp(\".*\" + i + \".*\", \"ig\"), r = r.filter(function (t) {\n          var e = s.test(recToString(t));return s.lastIndex = 0, e;\n        });\n      }return this.sortBy && !this.providerSorting && (r = r.sort(function (e, n) {\n        var i = o(e, n, t.sortBy);return t.sortDesc ? i : -1 * i;\n      })), e && !this.providerPaging && (r = r.slice((n - 1) * e, n * e)), this.$emit(\"input\", r), r;\n    } }, methods: { fieldClass: function fieldClass(t, e) {\n      return [t.sortable ? \"sorting\" : \"\", t.sortable && this.sortBy === e ? \"sorting_\" + (this.sortDesc ? \"desc\" : \"asc\") : \"\", t.variant ? \"table-\" + t.variant : \"\", t.class ? t.class : \"\", t.thClass ? t.thClass : \"\"];\n    }, tdClass: function tdClass(t, e, n) {\n      var i = \"\";return e._cellVariants && e._cellVariants[n] && (i = (this.inverse ? \"bg-\" : \"table-\") + e._cellVariants[n]), [t.variant && !i ? (this.inverse ? \"bg-\" : \"table-\") + t.variant : \"\", i, t.class ? t.class : \"\", t.tdClass ? t.tdClass : \"\"];\n    }, rowClass: function rowClass(t) {\n      var e = t._rowVariant || t.state || null;return [e ? (this.inverse ? \"bg-\" : \"table-\") + e : \"\"];\n    }, rowClicked: function rowClicked(t, e, n) {\n      if (this.busy) return t.preventDefault(), void t.stopPropagation();this.$emit(\"row-clicked\", e, n);\n    }, rowHovered: function rowHovered(t, e, n) {\n      if (this.busy) return t.preventDefault(), void t.stopPropagation();this.$emit(\"row-hovered\", e, n);\n    }, headClicked: function headClicked(t, e, n) {\n      if (this.busy) return t.preventDefault(), void t.stopPropagation();var i = !1;e.sortable ? (n === this.sortBy ? this.sortDesc = !this.sortDesc : (this.sortBy = n, this.sortDesc = !0), i = !0) : this.sortBy && (this.sortBy = null, i = !0), this.$emit(\"head-clicked\", n, e), i && this.$emit(\"sort-changed\", this.context);\n    }, refresh: function refresh() {\n      this.hasProvider && this._providerUpdate();\n    }, _providerSetLocal: function _providerSetLocal(t) {\n      this.localItems = t && t.length > 0 ? t.slice() : [], this.$emit(\"refreshed\"), this.$root.$emit(\"table::refreshed\", this.id);\n    }, _providerUpdate: function _providerUpdate() {\n      var t = this;if (!this.busy && this.hasProvider) {\n        var e = this.items(this.context, this._providerSetLocal);e && (e.then && \"function\" == typeof e.then ? e.then(function (e) {\n          t._providerSetLocal(e);\n        }) : this._providerSetLocal(e));\n      }\n    } } },\n    tabs = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(t.tag, { tag: \"component\", staticClass: \"tabs\", attrs: { id: t.id || null } }, [t.bottom ? n(\"div\", { ref: \"tabsContainer\", class: [\"tab-content\", { \"card-block\": t.card }] }, [t._t(\"default\"), t.tabs && t.tabs.length ? t._e() : t._t(\"empty\")], 2) : t._e(), n(\"div\", { class: { \"card-header\": t.card } }, [n(\"ul\", { class: [\"nav\", \"nav-\" + t.navStyle, t.card ? \"card-header-\" + t.navStyle : null], attrs: { role: \"tablist\", tabindex: \"0\", \"aria-setsize\": t.tabs.length, \"aria-posinset\": t.currentTab + 1 }, on: { keydown: [function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"left\", 37) ? \"button\" in e && 0 !== e.button ? null : void t.previousTab(e) : null;\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"up\", 38)) return null;t.previousTab(e);\n        }, function (e) {\n          return \"button\" in e || !t._k(e.keyCode, \"right\", 39) ? \"button\" in e && 2 !== e.button ? null : void t.nextTab(e) : null;\n        }, function (e) {\n          if (!(\"button\" in e) && t._k(e.keyCode, \"down\", 40)) return null;t.nextTab(e);\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"left\", 37)) && e.shiftKey ? \"button\" in e && 0 !== e.button ? null : void t.setTab(-1, !1, 1) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"up\", 38)) && e.shiftKey ? void t.setTab(-1, !1, 1) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"right\", 39)) && e.shiftKey ? \"button\" in e && 2 !== e.button ? null : void t.setTab(t.tabs.length, !1, -1) : null;\n        }, function (e) {\n          return (\"button\" in e || !t._k(e.keyCode, \"down\", 40)) && e.shiftKey ? void t.setTab(t.tabs.length, !1, -1) : null;\n        }] } }, [t._l(t.tabs, function (e, i) {\n      return n(\"li\", { staticClass: \"nav-item\", attrs: { role: \"presentation\" } }, [e.headHtml ? n(\"div\", { class: [\"tab-head\", { small: t.small, active: e.localActive, disabled: e.disabled }], attrs: { role: \"heading\", tabindex: \"-1\" }, domProps: { innerHTML: t._s(e.headHtml) } }) : n(\"a\", { class: [\"nav-link\", { small: t.small, active: e.localActive, disabled: e.disabled }], attrs: { href: e.href, role: \"tab\", \"aria-selected\": e.localActive ? \"true\" : \"false\", \"aria-controls\": e.id || null, id: e.controlledBy || null, tabindex: \"-1\" }, domProps: { innerHTML: t._s(e.title) }, on: { click: function click(e) {\n            e.preventDefault(), e.stopPropagation(), t.setTab(i);\n          }, keydown: [function (e) {\n            if (!(\"button\" in e) && t._k(e.keyCode, \"space\", 32)) return null;e.preventDefault(), e.stopPropagation(), t.setTab(i);\n          }, function (e) {\n            if (!(\"button\" in e) && t._k(e.keyCode, \"enter\", 13)) return null;e.preventDefault(), e.stopPropagation(), t.setTab(i);\n          }] } })]);\n    }), t._t(\"tabs\")], 2)]), t.bottom ? t._e() : n(\"div\", { ref: \"tabsContainer\", class: [\"tab-content\", { \"card-block\": t.card }] }, [t._t(\"default\"), t.tabs && t.tabs.length ? t._e() : t._t(\"empty\")], 2)]);\n  }, staticRenderFns: [], data: function data() {\n    return { currentTab: this.value, tabs: [] };\n  }, props: { id: { type: String, default: \"\" }, tag: { type: String, default: \"div\" }, noFade: { type: Boolean, default: !1 }, card: { type: Boolean, default: !1 }, small: { type: Boolean, default: !1 }, value: { type: Number, default: 0 }, pills: { type: Boolean, default: !1 }, lazy: { type: Boolean, default: !1 }, bottom: { type: Boolean, default: !1 } }, watch: { currentTab: function currentTab(t, e) {\n      t !== e && (this.$root.$emit(\"changed::tab\", this, t, this.tabs[t]), this.$emit(\"input\", t), this.tabs[t].$emit(\"click\"));\n    }, value: function value(t, e) {\n      t !== e && this.setTab(t);\n    }, fade: function fade(t, e) {\n      var n = this;t !== e && this.tabs.forEach(function (e) {\n        n.$set(e, \"fade\", t);\n      });\n    } }, computed: { fade: function fade() {\n      return !this.noFade;\n    }, navStyle: function navStyle() {\n      return this.pills ? \"pills\" : \"tabs\";\n    } }, methods: { sign: function sign(t) {\n      return 0 === t ? 0 : t > 0 ? 1 : -1;\n    }, nextTab: function nextTab() {\n      this.setTab(this.currentTab, !1, 1);\n    }, previousTab: function previousTab() {\n      this.setTab(this.currentTab, !1, -1);\n    }, setTab: function setTab(t, e, n) {\n      var i = this;if (n = n || 0, e || t + n !== this.currentTab) {\n        var o = this.tabs[t + n];o && (o.disabled ? n && this.setTab(t, e, n + this.sign(n)) : (this.tabs.forEach(function (t) {\n          t !== o && t.localActive && i.$set(t, \"localActive\", !1);\n        }), this.$set(o, \"localActive\", !0), this.currentTab = t + n));\n      }\n    }, updateTabs: function updateTabs() {\n      var t = this;this.$slots.default ? this.tabs = this.$slots.default.filter(function (t) {\n        return t.componentInstance || !1;\n      }).map(function (t) {\n        return t.componentInstance;\n      }) : this.tabs = [], this.tabs.forEach(function (e) {\n        t.$set(e, \"fade\", t.fade), t.$set(e, \"lazy\", t.lazy);\n      });var e = this.currentTab;null !== e && void 0 !== e || this.tabs.forEach(function (t, n) {\n        t.active && (e = n);\n      });var n = 0;e > this.tabs.length - 1 && (n = -1), this.setTab(e || 0, !0, n);\n    } }, mounted: function mounted() {\n    this.updateTabs(), observeDOM(this.$refs.tabsContainer, this.updateTabs.bind(this), { subtree: !1 });\n  } },\n    tab = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"transition\", { attrs: { mode: \"out-in\" }, on: { enter: t.enter, \"before-leave\": t.beforeLeave } }, [t.localActive || !t.lazy ? n(t.tag, { directives: [{ name: \"show\", rawName: \"v-show\", value: t.localActive || t.lazy, expression: \"localActive || lazy\" }], ref: \"panel\", tag: \"component\", class: [\"tab-pane\", { show: t.show, fade: t.fade, disabled: t.disabled, active: t.localActive }], attrs: { id: t.id || null, role: \"tabpanel\", \"aria-hidden\": t.localActive ? \"false\" : \"true\", \"aria-expanded\": t.localActive ? \"true\" : \"false\", \"aria-lablelledby\": t.controlledBy || null } }, [t._t(\"default\")], 2) : t._e()], 1);\n  }, staticRenderFns: [], methods: { enter: function enter() {\n      this.show = !0;\n    }, beforeLeave: function beforeLeave() {\n      this.show = !1;\n    } }, data: function data() {\n    return { fade: !1, localActive: !1, lazy: !0, show: !1 };\n  }, computed: { controlledBy: function controlledBy() {\n      return this.buttonId || (this.id ? this.id + \"__BV_tab_button__\" : null);\n    } }, props: { id: { type: String, default: \"\" }, tag: { type: String, default: \"div\" }, buttonId: { type: String, default: \"\" }, title: { type: String, default: \"\" }, headHtml: { type: String, default: null }, disabled: { type: Boolean, default: !1 }, active: { type: Boolean, default: !1 }, href: { type: String, default: \"#\" } } },\n    tooltip = { render: function render() {\n    var t = this,\n        e = t.$createElement,\n        n = t._self._c || e;return n(\"div\", { staticClass: \"d-inline-block\" }, [n(\"span\", { ref: \"trigger\", staticClass: \"d-inline-block\" }, [t._t(\"default\")], 2), n(\"div\", { ref: \"popover\", class: [\"tooltip\", \"tooltip-\" + this.placement], style: { opacity: t.showState ? 1 : 0 }, attrs: { tabindex: \"-1\" }, on: { focus: function focus(e) {\n          t.$emit(\"focus\");\n        }, blur: function blur(e) {\n          t.$emit(\"blur\");\n        } } }, [n(\"div\", { staticClass: \"tooltip-inner\" }, [t._t(\"content\", [n(\"span\", { domProps: { innerHTML: t._s(t.content) } })])], 2)])]);\n  }, staticRenderFns: [], mixins: [popover$1], props: { content: { type: String, default: \"\" }, triggers: { type: [Boolean, String, Array], default: \"hover\" } } },\n    components = Object.freeze({ bAlert: alert, bBreadcrumb: breadcrumb, bButton: bBtn, bBtn: bBtn, bButtonToolbar: buttonToolbar, bBtnToolbar: buttonToolbar, bButtonGroup: buttonGroup, bBtnGroup: buttonGroup, bButtonGroupDropdown: buttonGroupDropdown, bBtnGroupDropdown: buttonGroupDropdown, bInputGroup: inputGroup, bInputGroupAddon: inputGroupAddon, bInputGroupButton: inputGroupButton, bInputGroupBtn: inputGroupButton, bCard: card, bCardGroup: cardGroup, bDropdown: dropdown$1, bDropdownItem: dropdownItem, bDropdownItemButton: dropdownItemButton, bDropdownItemBtn: dropdownItemButton, bDropdownDivider: dropdownDivider, bDropdownHeader: dropdownHeader, bDropdownSelect: dropdownSelect, bForm: bForm, bFormCheckbox: formCheckbox, bFormFieldset: formFieldset, bFormFile: formFile, bFormRadio: formRadio, bFormInput: formInput, bFormInputStatic: bFormInputStatic, bFormSelect: formSelect, bJumbotron: jumbotron, bBadge: badge, bMedia: media, bModal: modal, bNavbar: navbar, bNavText: navText, bNavForm: navForm, bPagination: pagination, bPopover: popover, bProgress: progress, bTable: table, bTooltip: tooltip, bTab: tab, bTabs: tabs, bNav: nav, bNavItem: navItem, bNavItemDropdown: navItemDropdown, bNavToggle: navToggle, bListGroupItem: listGroupItem, bListGroup: listGroup, bCarouselSlide: carouselSlide, bCarousel: carousel, bCollapse: collapse, bLink: bLink }),\n    all_listen_types = { hover: !0, click: !0, focus: !0 },\n    inBrowser = \"undefined\" != typeof window,\n    listen_types = { click: !0 },\n    toggle = { bind: function bind(t, e) {\n    var n = targets(t, e, listen_types, function (t) {\n      var e = t.targets,\n          n = t.vm;e.forEach(function (t) {\n        n.$root.$emit(\"collapse::toggle\", t);\n      });\n    });inBrowser && t.__vue__ && n.length > 0 && (t.setAttribute(\"aria-controls\", n.join(\" \")), t.setAttribute(\"aria-expanded\", \"false\"), t.__vue__.$root.$on(\"collapse::toggle::state\", function (e, i) {\n      -1 !== n.indexOf(e) && t.setAttribute(\"aria-expanded\", i ? \"true\" : \"false\");\n    }));\n  } },\n    listen_types$1 = { click: !0 },\n    modal$1 = { bind: function bind(t, e) {\n    targets(t, e, listen_types$1, function (e) {\n      var n = e.targets,\n          i = e.vm;n.forEach(function (e) {\n        i.$root.$emit(\"show::modal\", e, t);\n      });\n    });\n  } },\n    inBrowser$1 = \"undefined\" != typeof window,\n    isServer = !inBrowser$1;inBrowser$1 && window.Element && !Element.prototype.closest && (Element.prototype.closest = function (t) {\n  var e,\n      n = (this.document || this.ownerDocument).querySelectorAll(t),\n      i = this;do {\n    for (e = n.length; --e >= 0 && n.item(e) !== i;) {}\n  } while (e < 0 && (i = i.parentElement));return i;\n});var NAME = \"v-b-scrollspy\",\n    EVENT = \"scrollspy::activate\",\n    BVSS = \"__BV_ScrollSpy__\",\n    Default = { element: \"body\", offset: 10, method: \"auto\", throttle: 200 },\n    DefaultType = { element: \"(string|element)\", offset: \"number\", method: \"string\", throttle: \"number\" },\n    ClassName = { DROPDOWN_ITEM: \"dropdown-item\", DROPDOWN_MENU: \"dropdown-menu\", DROPDOWN_TOGGLE: \"dropdown-toggle\", NAV_LINK: \"nav-link\", LIST_ITEM: \"list-group-item\", ACTIVE: \"active\" },\n    Selector = { ACTIVE: \".active\", NAV_LIST_GROUP: \".nav, .list-group\", NAV: \".nav\", LIST_GROUP: \".list-group\", NAV_LINKS: \".nav-link\", LIST_ITEMS: \".list-group-item\", DROPDOWN: \".dropdown\", DROPDOWN_ITEMS: \".dropdown-item\", DROPDOWN_TOGGLE: \".dropdown-toggle\" },\n    OffsetMethod = { OFFSET: \"offset\", POSITION: \"position\" };ScrollSpy.prototype.updateConfig = function (t) {\n  var e = this;t.arg && (this._config.element = \"#\" + t.arg), Object.keys(t.modifiers).forEach(function (t) {\n    /^\\d+$/.test(t) ? e._config.offset = parseInt(t, 10) : /^(auto|position|offset)$/.test(t) && (e._config.method = t);\n  }), \"string\" == typeof t.value ? this._config.element = t.value : \"number\" == typeof t.value ? this._config.offset = Math.round(t.value) : \"object\" == _typeof(t.value) && Object.keys(t.value).filter(function (t) {\n    return Boolean(DefaultType[t]);\n  }).forEach(function (n) {\n    e._config[n] = t.value[n];\n  }), typeCheckConfig(NAME, this._config, DefaultType);var n = getVm(this._$el);return n && n.$root && (this._$root = n.$root), this;\n}, ScrollSpy.prototype.listen = function () {\n  var t = this._getScroller();return t && (\"BODY\" !== t.tagName && t.addEventListener(\"scroll\", this, !1), window.addEventListener(\"scroll\", this, !1), window.addEventListener(\"orientationchange\", this, !1), window.addEventListener(\"resize\", this, !1)), this;\n}, ScrollSpy.prototype.unListen = function () {\n  var t = this._getScroller();return t && (\"BODY\" !== t.tagName && t.removeEventListener(\"scroll\", this, !1), window.removeEventListener(\"scroll\", this, !1), window.removeEventListener(\"orientationchange\", this, !1), window.removeEventListener(\"resize\", this, !1)), this;\n}, ScrollSpy.prototype.refresh = function () {\n  var t = this,\n      e = this._getScroller();if (!e) return this;var n = \"BODY\" === e.tagName ? OffsetMethod.OFFSET : OffsetMethod.POSITION,\n      i = \"auto\" === this._config.method ? n : this._config.method,\n      o = i === OffsetMethod.OFFSET ? 0 : this._getScrollTop();return this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), $QSA(this._selector, this._$el).map(function (t) {\n    var n = t.getAttribute(\"href\");if (n && \"#\" === n.charAt(0) && \"#\" !== n && -1 === n.indexOf(\"#/\")) {\n      var r = $QS(n, e);if (!r) return null;var s = r.getBoundingClientRect();if (s.width || s.height) return { offset: (i === OffsetMethod.OFFSET ? s.top : r.offsetTop) + o, href: n };\n    }return null;\n  }).filter(function (t) {\n    return t;\n  }).sort(function (t, e) {\n    return t.offset - e.offset;\n  }).forEach(function (e) {\n    t._offsets.push(e.offset), t._targets.push(e.href);\n  }), this;\n}, ScrollSpy.prototype.process = function () {\n  var t = this;if (!this._getScroller) return this;var e = this._getScrollTop() + this._config.offset,\n      n = this._getScrollHeight(),\n      i = this._config.offset + n - this._getOffsetHeight();if (this._scrollHeight !== n && this.refresh(), e >= i) {\n    var o = this._targets[this._targets.length - 1];return this._activeTarget !== o && this._activate(o), this;\n  }if (this._activeTarget && e < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, this._clear(), this;for (var r = this._offsets.length; r--;) {\n    t._activeTarget !== t._targets[r] && e >= t._offsets[r] && (void 0 === t._offsets[r + 1] || e < t._offsets[r + 1]) && t._activate(t._targets[r]);\n  }return this;\n}, ScrollSpy.prototype.dispose = function () {\n  this.unListen(), clearTimeout(this._resizeTimeout), this._resizeTimeout = null, this._$el = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null, this._$root = null;\n}, ScrollSpy.prototype.handleEvent = function (t) {\n  var e = this;\"scroll\" === t.type ? this.process() : \"orientationchange\" === t.type ? this.refresh().process() : \"resize\" === t.type && function () {\n    clearTimeout(this._resizeTimeout), this._resizeTimeout = setTimeout(function () {\n      e.refresh().process();\n    }, e._config.throttle || Default.throttle);\n  }();\n}, ScrollSpy.prototype._getScroller = function () {\n  if (isServer) return null;var t = this._config.element;return t ? t && isElement(t) ? t : \"string\" == typeof t ? \"body\" === t ? document.body : $QS(t) : null : null;\n}, ScrollSpy.prototype._getScrollTop = function () {\n  var t = this._getScroller();return t ? \"BODY\" === t.tagName ? window.pageYOffset : t.scrollTop : 0;\n}, ScrollSpy.prototype._getScrollHeight = function () {\n  var t = this._getScroller();return t ? \"BODY\" === t.tagName ? Math.max(document.body.scrollHeight, document.documentElement.scrollHeight) : t.scrollHeight : 0;\n}, ScrollSpy.prototype._getOffsetHeight = function () {\n  var t = this._getScroller();return t ? \"BODY\" === t.tagName ? window.innerHeight : t.getBoundingClientRect().height : 0;\n}, ScrollSpy.prototype._activate = function (t) {\n  var e = this;this._activeTarget = t, this._clear();var n = this._selector.split(\",\"),\n      i = $QSA((n = n.map(function (e) {\n    return e + '[href=\"' + t + '\"]';\n  })).join(\",\"), this._$el);i.forEach(function (t) {\n    if (t.classList.contains(ClassName.DROPDOWN_ITEM)) {\n      var n = closest(t, Selector.DROPDOWN);if (n) {\n        var i = $QS(Selector.DROPDOWN_TOGGLE, n);i && e._setActiveState(i, !0);\n      }e._setActiveState(t, !0);\n    } else e._setActiveState(t, !0), e._setParentsSiblingActiveState(t, Selector.NAV_LIST_GROUP, [ClassName.NAV_LINK, ClassName.LIST_ITEM], !0);\n  }), i && i.length > 0 && this._$root && this._$root.$emit && this._$root.$emit(EVENT, t);\n}, ScrollSpy.prototype._clear = function () {\n  var t = this;$QSA(this._selector, this._$el).filter(function (t) {\n    if (t.classList.contains(ClassName.ACTIVE)) {\n      var e = t.getAttribute(\"href\");return \"#\" === e.charAt(0) && 0 !== e.indexOf(\"#/\");\n    }return !1;\n  }).forEach(function (e) {\n    t._setActiveState(e, !1);\n  });\n}, ScrollSpy.prototype._setActiveState = function (t, e) {\n  if (t) {\n    t.classList.contains(ClassName.NAV_LINK) && !t.classList.contains(ClassName.DROPDOWN_TOGGLE) && (t = t.parentElement);var n = getVm(t);n && Object.prototype.hasOwnProperty.call(n.$props, \"active\") ? n.$props.active = e : t.classList[e ? \"add\" : \"remove\"](ClassName.ACTIVE);\n  }\n}, ScrollSpy.prototype._setParentsSiblingActiveState = function (t, e, n, i) {\n  var o = this;if (n) {\n    Array.isArray(n) || (n = [n]);for (var r = t; r;) {\n      if ((r = closest(r, e)) && r.previousElementSibling) for (var s = 0; s < n.length - 1; s++) {\n        r.previousElementSibling.classList.contains(n[s]) && o._setActiveState(r, i);\n      }\n    }\n  }\n};var scrollspy = { bind: function bind(t, e) {\n    isServer || t[BVSS] || (t[BVSS] = new ScrollSpy(t, e));\n  }, inserted: function inserted(t, e) {\n    !isServer && t[BVSS] && t[BVSS].updateConfig(e).listen().refresh().process();\n  }, update: function update(t, e) {\n    !isServer && t[BVSS] && t[BVSS].updateConfig(e).refresh().process();\n  }, componentUpdated: function componentUpdated(t, e) {\n    !isServer && t[BVSS] && t[BVSS].updateConfig(e).refresh().process();\n  }, unbind: function unbind(t) {\n    !isServer && t[BVSS] && (t[BVSS].unListen().dispose(), t[BVSS] = null);\n  } },\n    directives = Object.freeze({ bToggle: toggle, bModal: modal$1, bScrollspy: scrollspy }),\n    VuePlugin = { install: function install(t) {\n    if (!t._bootstrap_vue_installed) {\n      t._bootstrap_vue_installed = !0;for (var e in components) {\n        t.component(e, components[e]);\n      }for (var n in directives) {\n        t.directive(n, directives[n]);\n      }\n    }\n  } };\"undefined\" != typeof window && window.Vue && window.Vue.use(VuePlugin);/* harmony default export */ __webpack_exports__[\"default\"] = (VuePlugin);\n//# sourceMappingURL=bootstrap-vue.esm.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

},[543]);